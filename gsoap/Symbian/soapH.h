/* soapH.h
   Generated by gSOAP 2.8.18 from interop_all.h

Copyright(C) 2000-2014, Robert van Engelen, Genivia Inc. All Rights Reserved.
The generated code is released under one of the following licenses:
GPL or Genivia's license for commercial use.
This program is released under the GPL with the additional exemption that
compiling, linking, and/or using OpenSSL is allowed.
*/

#ifndef soapH_H
#define soapH_H
#include "soapStub.h"
#ifndef WITH_NOIDREF

#ifdef __cplusplus
extern "C" {
#endif
SOAP_FMAC3 void SOAP_FMAC4 soap_markelement(struct soap*, const void*, int);

#ifdef __cplusplus
}
#endif
SOAP_FMAC3 int SOAP_FMAC4 soap_putindependent(struct soap*);
SOAP_FMAC3 int SOAP_FMAC4 soap_getindependent(struct soap*);
#endif

#ifdef __cplusplus
extern "C" {
#endif
SOAP_FMAC3 void *SOAP_FMAC4 soap_getelement(struct soap*, int*);
SOAP_FMAC3 int SOAP_FMAC4 soap_putelement(struct soap*, const void*, const char*, int, int);

#ifdef __cplusplus
}
#endif
SOAP_FMAC3 int SOAP_FMAC4 soap_ignore_element(struct soap*);

SOAP_FMAC3 const char ** SOAP_FMAC4 soap_faultcode(struct soap *soap);

SOAP_FMAC3 void * SOAP_FMAC4 soap_instantiate(struct soap*, int, const char*, const char*, size_t*);
SOAP_FMAC3 int SOAP_FMAC4 soap_fdelete(struct soap_clist*);
SOAP_FMAC3 void* SOAP_FMAC4 soap_class_id_enter(struct soap*, const char*, void*, int, size_t, const char*, const char*);

#ifndef SOAP_TYPE_byte
#define SOAP_TYPE_byte (3)
#endif
SOAP_FMAC3 void SOAP_FMAC4 soap_default_byte(struct soap*, char *);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_byte(struct soap*, const char*, int, const char *, const char*);
SOAP_FMAC3 char * SOAP_FMAC4 soap_in_byte(struct soap*, const char*, char *, const char*);

SOAP_FMAC3 int SOAP_FMAC4 soap_put_byte(struct soap*, const char *, const char*, const char*);

#ifndef soap_write_byte
#define soap_write_byte(soap, data) ( soap_free_temp(soap), soap_begin_send(soap) || (soap_serialize_byte(soap, data),0) || soap_put_byte(soap, data, "byte", NULL) || soap_end_send(soap), (soap)->error )
#endif

SOAP_FMAC3 char * SOAP_FMAC4 soap_get_byte(struct soap*, char *, const char*, const char*);

#ifndef soap_read_byte
#define soap_read_byte(soap, data) ( soap_begin_recv(soap) || !soap_get_byte(soap, data, NULL, NULL) || soap_end_recv(soap), (soap)->error )
#endif


#ifndef SOAP_TYPE_int
#define SOAP_TYPE_int (1)
#endif
SOAP_FMAC3 void SOAP_FMAC4 soap_default_int(struct soap*, int *);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_int(struct soap*, const char*, int, const int *, const char*);
SOAP_FMAC3 int * SOAP_FMAC4 soap_in_int(struct soap*, const char*, int *, const char*);

SOAP_FMAC3 int SOAP_FMAC4 soap_put_int(struct soap*, const int *, const char*, const char*);

#ifndef soap_write_int
#define soap_write_int(soap, data) ( soap_free_temp(soap), soap_begin_send(soap) || (soap_serialize_int(soap, data),0) || soap_put_int(soap, data, "int", NULL) || soap_end_send(soap), (soap)->error )
#endif

SOAP_FMAC3 int * SOAP_FMAC4 soap_get_int(struct soap*, int *, const char*, const char*);

#ifndef soap_read_int
#define soap_read_int(soap, data) ( soap_begin_recv(soap) || !soap_get_int(soap, data, NULL, NULL) || soap_end_recv(soap), (soap)->error )
#endif


#ifndef SOAP_TYPE_xsd__int
#define SOAP_TYPE_xsd__int (19)
#endif

#define soap_default_xsd__int(soap, a) soap_default_long(soap, a)

SOAP_FMAC3 int SOAP_FMAC4 soap_out_xsd__int(struct soap*, const char*, int, const long *, const char*);
SOAP_FMAC3 long * SOAP_FMAC4 soap_in_xsd__int(struct soap*, const char*, long *, const char*);

SOAP_FMAC3 int SOAP_FMAC4 soap_put_xsd__int(struct soap*, const long *, const char*, const char*);

#ifndef soap_write_xsd__int
#define soap_write_xsd__int(soap, data) ( soap_free_temp(soap), soap_begin_send(soap) || (soap_serialize_xsd__int(soap, data),0) || soap_put_xsd__int(soap, data, "xsd:int", NULL) || soap_end_send(soap), (soap)->error )
#endif

SOAP_FMAC3 long * SOAP_FMAC4 soap_get_xsd__int(struct soap*, long *, const char*, const char*);

#ifndef soap_read_xsd__int
#define soap_read_xsd__int(soap, data) ( soap_begin_recv(soap) || !soap_get_xsd__int(soap, data, NULL, NULL) || soap_end_recv(soap), (soap)->error )
#endif


#ifndef SOAP_TYPE_long
#define SOAP_TYPE_long (18)
#endif
SOAP_FMAC3 void SOAP_FMAC4 soap_default_long(struct soap*, long *);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_long(struct soap*, const char*, int, const long *, const char*);
SOAP_FMAC3 long * SOAP_FMAC4 soap_in_long(struct soap*, const char*, long *, const char*);

SOAP_FMAC3 int SOAP_FMAC4 soap_put_long(struct soap*, const long *, const char*, const char*);

#ifndef soap_write_long
#define soap_write_long(soap, data) ( soap_free_temp(soap), soap_begin_send(soap) || (soap_serialize_long(soap, data),0) || soap_put_long(soap, data, "long", NULL) || soap_end_send(soap), (soap)->error )
#endif

SOAP_FMAC3 long * SOAP_FMAC4 soap_get_long(struct soap*, long *, const char*, const char*);

#ifndef soap_read_long
#define soap_read_long(soap, data) ( soap_begin_recv(soap) || !soap_get_long(soap, data, NULL, NULL) || soap_end_recv(soap), (soap)->error )
#endif


#ifndef SOAP_TYPE_xsd__float
#define SOAP_TYPE_xsd__float (32)
#endif

#define soap_default_xsd__float(soap, a) soap_default_float(soap, a)

SOAP_FMAC3 int SOAP_FMAC4 soap_out_xsd__float(struct soap*, const char*, int, const float *, const char*);
SOAP_FMAC3 float * SOAP_FMAC4 soap_in_xsd__float(struct soap*, const char*, float *, const char*);

SOAP_FMAC3 int SOAP_FMAC4 soap_put_xsd__float(struct soap*, const float *, const char*, const char*);

#ifndef soap_write_xsd__float
#define soap_write_xsd__float(soap, data) ( soap_free_temp(soap), soap_begin_send(soap) || (soap_serialize_xsd__float(soap, data),0) || soap_put_xsd__float(soap, data, "xsd:float", NULL) || soap_end_send(soap), (soap)->error )
#endif

SOAP_FMAC3 float * SOAP_FMAC4 soap_get_xsd__float(struct soap*, float *, const char*, const char*);

#ifndef soap_read_xsd__float
#define soap_read_xsd__float(soap, data) ( soap_begin_recv(soap) || !soap_get_xsd__float(soap, data, NULL, NULL) || soap_end_recv(soap), (soap)->error )
#endif


#ifndef SOAP_TYPE_float
#define SOAP_TYPE_float (31)
#endif
SOAP_FMAC3 void SOAP_FMAC4 soap_default_float(struct soap*, float *);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_float(struct soap*, const char*, int, const float *, const char*);
SOAP_FMAC3 float * SOAP_FMAC4 soap_in_float(struct soap*, const char*, float *, const char*);

SOAP_FMAC3 int SOAP_FMAC4 soap_put_float(struct soap*, const float *, const char*, const char*);

#ifndef soap_write_float
#define soap_write_float(soap, data) ( soap_free_temp(soap), soap_begin_send(soap) || (soap_serialize_float(soap, data),0) || soap_put_float(soap, data, "float", NULL) || soap_end_send(soap), (soap)->error )
#endif

SOAP_FMAC3 float * SOAP_FMAC4 soap_get_float(struct soap*, float *, const char*, const char*);

#ifndef soap_read_float
#define soap_read_float(soap, data) ( soap_begin_recv(soap) || !soap_get_float(soap, data, NULL, NULL) || soap_end_recv(soap), (soap)->error )
#endif


#ifndef SOAP_TYPE_unsignedByte
#define SOAP_TYPE_unsignedByte (62)
#endif
SOAP_FMAC3 void SOAP_FMAC4 soap_default_unsignedByte(struct soap*, unsigned char *);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_unsignedByte(struct soap*, const char*, int, const unsigned char *, const char*);
SOAP_FMAC3 unsigned char * SOAP_FMAC4 soap_in_unsignedByte(struct soap*, const char*, unsigned char *, const char*);

SOAP_FMAC3 int SOAP_FMAC4 soap_put_unsignedByte(struct soap*, const unsigned char *, const char*, const char*);

#ifndef soap_write_unsignedByte
#define soap_write_unsignedByte(soap, data) ( soap_free_temp(soap), soap_begin_send(soap) || (soap_serialize_unsignedByte(soap, data),0) || soap_put_unsignedByte(soap, data, "unsignedByte", NULL) || soap_end_send(soap), (soap)->error )
#endif

SOAP_FMAC3 unsigned char * SOAP_FMAC4 soap_get_unsignedByte(struct soap*, unsigned char *, const char*, const char*);

#ifndef soap_read_unsignedByte
#define soap_read_unsignedByte(soap, data) ( soap_begin_recv(soap) || !soap_get_unsignedByte(soap, data, NULL, NULL) || soap_end_recv(soap), (soap)->error )
#endif


#ifndef SOAP_TYPE_unsignedInt
#define SOAP_TYPE_unsignedInt (61)
#endif
SOAP_FMAC3 void SOAP_FMAC4 soap_default_unsignedInt(struct soap*, unsigned int *);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_unsignedInt(struct soap*, const char*, int, const unsigned int *, const char*);
SOAP_FMAC3 unsigned int * SOAP_FMAC4 soap_in_unsignedInt(struct soap*, const char*, unsigned int *, const char*);

SOAP_FMAC3 int SOAP_FMAC4 soap_put_unsignedInt(struct soap*, const unsigned int *, const char*, const char*);

#ifndef soap_write_unsignedInt
#define soap_write_unsignedInt(soap, data) ( soap_free_temp(soap), soap_begin_send(soap) || (soap_serialize_unsignedInt(soap, data),0) || soap_put_unsignedInt(soap, data, "unsignedInt", NULL) || soap_end_send(soap), (soap)->error )
#endif

SOAP_FMAC3 unsigned int * SOAP_FMAC4 soap_get_unsignedInt(struct soap*, unsigned int *, const char*, const char*);

#ifndef soap_read_unsignedInt
#define soap_read_unsignedInt(soap, data) ( soap_begin_recv(soap) || !soap_get_unsignedInt(soap, data, NULL, NULL) || soap_end_recv(soap), (soap)->error )
#endif


#ifndef SOAP_TYPE_xsd__boolean
#define SOAP_TYPE_xsd__boolean (84)
#endif

#define soap_default_xsd__boolean(soap, a) soap_default_bool(soap, a)

SOAP_FMAC3 int SOAP_FMAC4 soap_out_xsd__boolean(struct soap*, const char*, int, const bool *, const char*);

SOAP_FMAC3S const char* SOAP_FMAC4S soap_xsd__boolean2s(struct soap*, bool);
SOAP_FMAC3 bool * SOAP_FMAC4 soap_in_xsd__boolean(struct soap*, const char*, bool *, const char*);

SOAP_FMAC3S int SOAP_FMAC4S soap_s2xsd__boolean(struct soap*, const char*, bool *);

SOAP_FMAC3 int SOAP_FMAC4 soap_put_xsd__boolean(struct soap*, const bool *, const char*, const char*);

#ifndef soap_write_xsd__boolean
#define soap_write_xsd__boolean(soap, data) ( soap_free_temp(soap), soap_begin_send(soap) || (soap_serialize_xsd__boolean(soap, data),0) || soap_put_xsd__boolean(soap, data, "xsd:boolean", NULL) || soap_end_send(soap), (soap)->error )
#endif

SOAP_FMAC3 bool * SOAP_FMAC4 soap_get_xsd__boolean(struct soap*, bool *, const char*, const char*);

#ifndef soap_read_xsd__boolean
#define soap_read_xsd__boolean(soap, data) ( soap_begin_recv(soap) || !soap_get_xsd__boolean(soap, data, NULL, NULL) || soap_end_recv(soap), (soap)->error )
#endif


#ifndef SOAP_TYPE_bool
#define SOAP_TYPE_bool (83)
#endif
SOAP_FMAC3 void SOAP_FMAC4 soap_default_bool(struct soap*, bool *);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_bool(struct soap*, const char*, int, const bool *, const char*);

SOAP_FMAC3S const char* SOAP_FMAC4S soap_bool2s(struct soap*, bool);
SOAP_FMAC3 bool * SOAP_FMAC4 soap_in_bool(struct soap*, const char*, bool *, const char*);

SOAP_FMAC3S int SOAP_FMAC4S soap_s2bool(struct soap*, const char*, bool *);

SOAP_FMAC3 int SOAP_FMAC4 soap_put_bool(struct soap*, const bool *, const char*, const char*);

#ifndef soap_write_bool
#define soap_write_bool(soap, data) ( soap_free_temp(soap), soap_begin_send(soap) || (soap_serialize_bool(soap, data),0) || soap_put_bool(soap, data, "boolean", NULL) || soap_end_send(soap), (soap)->error )
#endif

SOAP_FMAC3 bool * SOAP_FMAC4 soap_get_bool(struct soap*, bool *, const char*, const char*);

#ifndef soap_read_bool
#define soap_read_bool(soap, data) ( soap_begin_recv(soap) || !soap_get_bool(soap, data, NULL, NULL) || soap_end_recv(soap), (soap)->error )
#endif


#ifndef WITH_NOGLOBAL

#ifndef SOAP_TYPE_SOAP_ENV__Fault
#define SOAP_TYPE_SOAP_ENV__Fault (124)
#endif
SOAP_FMAC3 void SOAP_FMAC4 soap_default_SOAP_ENV__Fault(struct soap*, struct SOAP_ENV__Fault *);
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_SOAP_ENV__Fault(struct soap*, const struct SOAP_ENV__Fault *);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_SOAP_ENV__Fault(struct soap*, const char*, int, const struct SOAP_ENV__Fault *, const char*);
SOAP_FMAC3 struct SOAP_ENV__Fault * SOAP_FMAC4 soap_in_SOAP_ENV__Fault(struct soap*, const char*, struct SOAP_ENV__Fault *, const char*);

SOAP_FMAC3 int SOAP_FMAC4 soap_put_SOAP_ENV__Fault(struct soap*, const struct SOAP_ENV__Fault *, const char*, const char*);

#ifndef soap_write_SOAP_ENV__Fault
#define soap_write_SOAP_ENV__Fault(soap, data) ( soap_free_temp(soap), soap_begin_send(soap) || (soap_serialize_SOAP_ENV__Fault(soap, data),0) || soap_put_SOAP_ENV__Fault(soap, data, "SOAP-ENV:Fault", NULL) || soap_end_send(soap), (soap)->error )
#endif

SOAP_FMAC3 struct SOAP_ENV__Fault * SOAP_FMAC4 soap_get_SOAP_ENV__Fault(struct soap*, struct SOAP_ENV__Fault *, const char*, const char*);

#ifndef soap_read_SOAP_ENV__Fault
#define soap_read_SOAP_ENV__Fault(soap, data) ( soap_begin_recv(soap) || !soap_get_SOAP_ENV__Fault(soap, data, NULL, NULL) || soap_end_recv(soap), (soap)->error )
#endif

SOAP_FMAC1 struct SOAP_ENV__Fault * SOAP_FMAC2 soap_instantiate_SOAP_ENV__Fault(struct soap*, int, const char*, const char*, size_t*);

inline struct SOAP_ENV__Fault * soap_new_SOAP_ENV__Fault(struct soap *soap, int n = -1) { return soap_instantiate_SOAP_ENV__Fault(soap, n, NULL, NULL, NULL); }

inline struct SOAP_ENV__Fault * soap_new_req_SOAP_ENV__Fault(struct soap *soap) { struct SOAP_ENV__Fault *_p = soap_instantiate_SOAP_ENV__Fault(soap, -1, NULL, NULL, NULL); if (_p) { soap_default_SOAP_ENV__Fault(soap, _p); } return _p; }

inline struct SOAP_ENV__Fault * soap_new_set_SOAP_ENV__Fault(struct soap *soap, char *faultcode, char *faultstring, char *faultactor, struct SOAP_ENV__Detail *detail, struct SOAP_ENV__Code *SOAP_ENV__Code, struct SOAP_ENV__Reason *SOAP_ENV__Reason, char *SOAP_ENV__Node, char *SOAP_ENV__Role, struct SOAP_ENV__Detail *SOAP_ENV__Detail) { struct SOAP_ENV__Fault *_p = soap_instantiate_SOAP_ENV__Fault(soap, -1, NULL, NULL, NULL); if (_p) { soap_default_SOAP_ENV__Fault(soap, _p); _p->faultcode = faultcode; _p->faultstring = faultstring; _p->faultactor = faultactor; _p->detail = detail; _p->SOAP_ENV__Code = SOAP_ENV__Code; _p->SOAP_ENV__Reason = SOAP_ENV__Reason; _p->SOAP_ENV__Node = SOAP_ENV__Node; _p->SOAP_ENV__Role = SOAP_ENV__Role; _p->SOAP_ENV__Detail = SOAP_ENV__Detail; } return _p; }

inline void soap_delete_SOAP_ENV__Fault(struct soap *soap, struct SOAP_ENV__Fault *p) { soap_delete(soap, p); }

SOAP_FMAC3 void SOAP_FMAC4 soap_copy_SOAP_ENV__Fault(struct soap*, int, int, void*, size_t, const void*, size_t);

#endif

#ifndef WITH_NOGLOBAL

#ifndef SOAP_TYPE_SOAP_ENV__Reason
#define SOAP_TYPE_SOAP_ENV__Reason (123)
#endif
SOAP_FMAC3 void SOAP_FMAC4 soap_default_SOAP_ENV__Reason(struct soap*, struct SOAP_ENV__Reason *);
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_SOAP_ENV__Reason(struct soap*, const struct SOAP_ENV__Reason *);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_SOAP_ENV__Reason(struct soap*, const char*, int, const struct SOAP_ENV__Reason *, const char*);
SOAP_FMAC3 struct SOAP_ENV__Reason * SOAP_FMAC4 soap_in_SOAP_ENV__Reason(struct soap*, const char*, struct SOAP_ENV__Reason *, const char*);

SOAP_FMAC3 int SOAP_FMAC4 soap_put_SOAP_ENV__Reason(struct soap*, const struct SOAP_ENV__Reason *, const char*, const char*);

#ifndef soap_write_SOAP_ENV__Reason
#define soap_write_SOAP_ENV__Reason(soap, data) ( soap_free_temp(soap), soap_begin_send(soap) || (soap_serialize_SOAP_ENV__Reason(soap, data),0) || soap_put_SOAP_ENV__Reason(soap, data, "SOAP-ENV:Reason", NULL) || soap_end_send(soap), (soap)->error )
#endif

SOAP_FMAC3 struct SOAP_ENV__Reason * SOAP_FMAC4 soap_get_SOAP_ENV__Reason(struct soap*, struct SOAP_ENV__Reason *, const char*, const char*);

#ifndef soap_read_SOAP_ENV__Reason
#define soap_read_SOAP_ENV__Reason(soap, data) ( soap_begin_recv(soap) || !soap_get_SOAP_ENV__Reason(soap, data, NULL, NULL) || soap_end_recv(soap), (soap)->error )
#endif

SOAP_FMAC1 struct SOAP_ENV__Reason * SOAP_FMAC2 soap_instantiate_SOAP_ENV__Reason(struct soap*, int, const char*, const char*, size_t*);

inline struct SOAP_ENV__Reason * soap_new_SOAP_ENV__Reason(struct soap *soap, int n = -1) { return soap_instantiate_SOAP_ENV__Reason(soap, n, NULL, NULL, NULL); }

inline struct SOAP_ENV__Reason * soap_new_req_SOAP_ENV__Reason(struct soap *soap) { struct SOAP_ENV__Reason *_p = soap_instantiate_SOAP_ENV__Reason(soap, -1, NULL, NULL, NULL); if (_p) { soap_default_SOAP_ENV__Reason(soap, _p); } return _p; }

inline struct SOAP_ENV__Reason * soap_new_set_SOAP_ENV__Reason(struct soap *soap, char *SOAP_ENV__Text) { struct SOAP_ENV__Reason *_p = soap_instantiate_SOAP_ENV__Reason(soap, -1, NULL, NULL, NULL); if (_p) { soap_default_SOAP_ENV__Reason(soap, _p); _p->SOAP_ENV__Text = SOAP_ENV__Text; } return _p; }

inline void soap_delete_SOAP_ENV__Reason(struct soap *soap, struct SOAP_ENV__Reason *p) { soap_delete(soap, p); }

SOAP_FMAC3 void SOAP_FMAC4 soap_copy_SOAP_ENV__Reason(struct soap*, int, int, void*, size_t, const void*, size_t);

#endif

#ifndef WITH_NOGLOBAL

#ifndef SOAP_TYPE_SOAP_ENV__Detail
#define SOAP_TYPE_SOAP_ENV__Detail (120)
#endif
SOAP_FMAC3 void SOAP_FMAC4 soap_default_SOAP_ENV__Detail(struct soap*, struct SOAP_ENV__Detail *);
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_SOAP_ENV__Detail(struct soap*, const struct SOAP_ENV__Detail *);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_SOAP_ENV__Detail(struct soap*, const char*, int, const struct SOAP_ENV__Detail *, const char*);
SOAP_FMAC3 struct SOAP_ENV__Detail * SOAP_FMAC4 soap_in_SOAP_ENV__Detail(struct soap*, const char*, struct SOAP_ENV__Detail *, const char*);

SOAP_FMAC3 int SOAP_FMAC4 soap_put_SOAP_ENV__Detail(struct soap*, const struct SOAP_ENV__Detail *, const char*, const char*);

#ifndef soap_write_SOAP_ENV__Detail
#define soap_write_SOAP_ENV__Detail(soap, data) ( soap_free_temp(soap), soap_begin_send(soap) || (soap_serialize_SOAP_ENV__Detail(soap, data),0) || soap_put_SOAP_ENV__Detail(soap, data, "SOAP-ENV:Detail", NULL) || soap_end_send(soap), (soap)->error )
#endif

SOAP_FMAC3 struct SOAP_ENV__Detail * SOAP_FMAC4 soap_get_SOAP_ENV__Detail(struct soap*, struct SOAP_ENV__Detail *, const char*, const char*);

#ifndef soap_read_SOAP_ENV__Detail
#define soap_read_SOAP_ENV__Detail(soap, data) ( soap_begin_recv(soap) || !soap_get_SOAP_ENV__Detail(soap, data, NULL, NULL) || soap_end_recv(soap), (soap)->error )
#endif

SOAP_FMAC1 struct SOAP_ENV__Detail * SOAP_FMAC2 soap_instantiate_SOAP_ENV__Detail(struct soap*, int, const char*, const char*, size_t*);

inline struct SOAP_ENV__Detail * soap_new_SOAP_ENV__Detail(struct soap *soap, int n = -1) { return soap_instantiate_SOAP_ENV__Detail(soap, n, NULL, NULL, NULL); }

inline struct SOAP_ENV__Detail * soap_new_req_SOAP_ENV__Detail(struct soap *soap, int __type, void *fault) { struct SOAP_ENV__Detail *_p = soap_instantiate_SOAP_ENV__Detail(soap, -1, NULL, NULL, NULL); if (_p) { soap_default_SOAP_ENV__Detail(soap, _p); _p->__type = __type; _p->fault = fault; } return _p; }

inline struct SOAP_ENV__Detail * soap_new_set_SOAP_ENV__Detail(struct soap *soap, char *__any, int __type, void *fault) { struct SOAP_ENV__Detail *_p = soap_instantiate_SOAP_ENV__Detail(soap, -1, NULL, NULL, NULL); if (_p) { soap_default_SOAP_ENV__Detail(soap, _p); _p->__any = __any; _p->__type = __type; _p->fault = fault; } return _p; }

inline void soap_delete_SOAP_ENV__Detail(struct soap *soap, struct SOAP_ENV__Detail *p) { soap_delete(soap, p); }

SOAP_FMAC3 void SOAP_FMAC4 soap_copy_SOAP_ENV__Detail(struct soap*, int, int, void*, size_t, const void*, size_t);

#endif

#ifndef WITH_NOGLOBAL

#ifndef SOAP_TYPE_SOAP_ENV__Code
#define SOAP_TYPE_SOAP_ENV__Code (118)
#endif
SOAP_FMAC3 void SOAP_FMAC4 soap_default_SOAP_ENV__Code(struct soap*, struct SOAP_ENV__Code *);
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_SOAP_ENV__Code(struct soap*, const struct SOAP_ENV__Code *);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_SOAP_ENV__Code(struct soap*, const char*, int, const struct SOAP_ENV__Code *, const char*);
SOAP_FMAC3 struct SOAP_ENV__Code * SOAP_FMAC4 soap_in_SOAP_ENV__Code(struct soap*, const char*, struct SOAP_ENV__Code *, const char*);

SOAP_FMAC3 int SOAP_FMAC4 soap_put_SOAP_ENV__Code(struct soap*, const struct SOAP_ENV__Code *, const char*, const char*);

#ifndef soap_write_SOAP_ENV__Code
#define soap_write_SOAP_ENV__Code(soap, data) ( soap_free_temp(soap), soap_begin_send(soap) || (soap_serialize_SOAP_ENV__Code(soap, data),0) || soap_put_SOAP_ENV__Code(soap, data, "SOAP-ENV:Code", NULL) || soap_end_send(soap), (soap)->error )
#endif

SOAP_FMAC3 struct SOAP_ENV__Code * SOAP_FMAC4 soap_get_SOAP_ENV__Code(struct soap*, struct SOAP_ENV__Code *, const char*, const char*);

#ifndef soap_read_SOAP_ENV__Code
#define soap_read_SOAP_ENV__Code(soap, data) ( soap_begin_recv(soap) || !soap_get_SOAP_ENV__Code(soap, data, NULL, NULL) || soap_end_recv(soap), (soap)->error )
#endif

SOAP_FMAC1 struct SOAP_ENV__Code * SOAP_FMAC2 soap_instantiate_SOAP_ENV__Code(struct soap*, int, const char*, const char*, size_t*);

inline struct SOAP_ENV__Code * soap_new_SOAP_ENV__Code(struct soap *soap, int n = -1) { return soap_instantiate_SOAP_ENV__Code(soap, n, NULL, NULL, NULL); }

inline struct SOAP_ENV__Code * soap_new_req_SOAP_ENV__Code(struct soap *soap) { struct SOAP_ENV__Code *_p = soap_instantiate_SOAP_ENV__Code(soap, -1, NULL, NULL, NULL); if (_p) { soap_default_SOAP_ENV__Code(soap, _p); } return _p; }

inline struct SOAP_ENV__Code * soap_new_set_SOAP_ENV__Code(struct soap *soap, char *SOAP_ENV__Value, struct SOAP_ENV__Code *SOAP_ENV__Subcode) { struct SOAP_ENV__Code *_p = soap_instantiate_SOAP_ENV__Code(soap, -1, NULL, NULL, NULL); if (_p) { soap_default_SOAP_ENV__Code(soap, _p); _p->SOAP_ENV__Value = SOAP_ENV__Value; _p->SOAP_ENV__Subcode = SOAP_ENV__Subcode; } return _p; }

inline void soap_delete_SOAP_ENV__Code(struct soap *soap, struct SOAP_ENV__Code *p) { soap_delete(soap, p); }

SOAP_FMAC3 void SOAP_FMAC4 soap_copy_SOAP_ENV__Code(struct soap*, int, int, void*, size_t, const void*, size_t);

#endif

#ifndef SOAP_TYPE_m__echoVoid
#define SOAP_TYPE_m__echoVoid (117)
#endif
SOAP_FMAC3 void SOAP_FMAC4 soap_default_m__echoVoid(struct soap*, struct m__echoVoid *);
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_m__echoVoid(struct soap*, const struct m__echoVoid *);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_m__echoVoid(struct soap*, const char*, int, const struct m__echoVoid *, const char*);
SOAP_FMAC3 struct m__echoVoid * SOAP_FMAC4 soap_in_m__echoVoid(struct soap*, const char*, struct m__echoVoid *, const char*);

SOAP_FMAC3 int SOAP_FMAC4 soap_put_m__echoVoid(struct soap*, const struct m__echoVoid *, const char*, const char*);

#ifndef soap_write_m__echoVoid
#define soap_write_m__echoVoid(soap, data) ( soap_free_temp(soap), soap_begin_send(soap) || (soap_serialize_m__echoVoid(soap, data),0) || soap_put_m__echoVoid(soap, data, "m:echoVoid", NULL) || soap_end_send(soap), (soap)->error )
#endif

SOAP_FMAC3 struct m__echoVoid * SOAP_FMAC4 soap_get_m__echoVoid(struct soap*, struct m__echoVoid *, const char*, const char*);

#ifndef soap_read_m__echoVoid
#define soap_read_m__echoVoid(soap, data) ( soap_begin_recv(soap) || !soap_get_m__echoVoid(soap, data, NULL, NULL) || soap_end_recv(soap), (soap)->error )
#endif

SOAP_FMAC1 struct m__echoVoid * SOAP_FMAC2 soap_instantiate_m__echoVoid(struct soap*, int, const char*, const char*, size_t*);

inline struct m__echoVoid * soap_new_m__echoVoid(struct soap *soap, int n = -1) { return soap_instantiate_m__echoVoid(soap, n, NULL, NULL, NULL); }

inline struct m__echoVoid * soap_new_req_m__echoVoid(struct soap *soap) { struct m__echoVoid *_p = soap_instantiate_m__echoVoid(soap, -1, NULL, NULL, NULL); if (_p) { soap_default_m__echoVoid(soap, _p); } return _p; }

inline struct m__echoVoid * soap_new_set_m__echoVoid(struct soap *soap) { struct m__echoVoid *_p = soap_instantiate_m__echoVoid(soap, -1, NULL, NULL, NULL); if (_p) { soap_default_m__echoVoid(soap, _p); } return _p; }

inline void soap_delete_m__echoVoid(struct soap *soap, struct m__echoVoid *p) { soap_delete(soap, p); }

SOAP_FMAC3 void SOAP_FMAC4 soap_copy_m__echoVoid(struct soap*, int, int, void*, size_t, const void*, size_t);

#ifndef SOAP_TYPE_m__echoVoidResponse
#define SOAP_TYPE_m__echoVoidResponse (114)
#endif
SOAP_FMAC3 void SOAP_FMAC4 soap_default_m__echoVoidResponse(struct soap*, struct m__echoVoidResponse *);
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_m__echoVoidResponse(struct soap*, const struct m__echoVoidResponse *);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_m__echoVoidResponse(struct soap*, const char*, int, const struct m__echoVoidResponse *, const char*);
SOAP_FMAC3 struct m__echoVoidResponse * SOAP_FMAC4 soap_in_m__echoVoidResponse(struct soap*, const char*, struct m__echoVoidResponse *, const char*);

SOAP_FMAC3 int SOAP_FMAC4 soap_put_m__echoVoidResponse(struct soap*, const struct m__echoVoidResponse *, const char*, const char*);

#ifndef soap_write_m__echoVoidResponse
#define soap_write_m__echoVoidResponse(soap, data) ( soap_free_temp(soap), soap_begin_send(soap) || (soap_serialize_m__echoVoidResponse(soap, data),0) || soap_put_m__echoVoidResponse(soap, data, "m:echoVoidResponse", NULL) || soap_end_send(soap), (soap)->error )
#endif

SOAP_FMAC3 struct m__echoVoidResponse * SOAP_FMAC4 soap_get_m__echoVoidResponse(struct soap*, struct m__echoVoidResponse *, const char*, const char*);

#ifndef soap_read_m__echoVoidResponse
#define soap_read_m__echoVoidResponse(soap, data) ( soap_begin_recv(soap) || !soap_get_m__echoVoidResponse(soap, data, NULL, NULL) || soap_end_recv(soap), (soap)->error )
#endif

SOAP_FMAC1 struct m__echoVoidResponse * SOAP_FMAC2 soap_instantiate_m__echoVoidResponse(struct soap*, int, const char*, const char*, size_t*);

inline struct m__echoVoidResponse * soap_new_m__echoVoidResponse(struct soap *soap, int n = -1) { return soap_instantiate_m__echoVoidResponse(soap, n, NULL, NULL, NULL); }

inline struct m__echoVoidResponse * soap_new_req_m__echoVoidResponse(struct soap *soap) { struct m__echoVoidResponse *_p = soap_instantiate_m__echoVoidResponse(soap, -1, NULL, NULL, NULL); if (_p) { soap_default_m__echoVoidResponse(soap, _p); } return _p; }

inline struct m__echoVoidResponse * soap_new_set_m__echoVoidResponse(struct soap *soap) { struct m__echoVoidResponse *_p = soap_instantiate_m__echoVoidResponse(soap, -1, NULL, NULL, NULL); if (_p) { soap_default_m__echoVoidResponse(soap, _p); } return _p; }

inline void soap_delete_m__echoVoidResponse(struct soap *soap, struct m__echoVoidResponse *p) { soap_delete(soap, p); }

SOAP_FMAC3 void SOAP_FMAC4 soap_copy_m__echoVoidResponse(struct soap*, int, int, void*, size_t, const void*, size_t);

#ifndef WITH_NOGLOBAL

#ifndef SOAP_TYPE_SOAP_ENV__Header
#define SOAP_TYPE_SOAP_ENV__Header (113)
#endif
SOAP_FMAC3 void SOAP_FMAC4 soap_default_SOAP_ENV__Header(struct soap*, struct SOAP_ENV__Header *);
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_SOAP_ENV__Header(struct soap*, const struct SOAP_ENV__Header *);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_SOAP_ENV__Header(struct soap*, const char*, int, const struct SOAP_ENV__Header *, const char*);
SOAP_FMAC3 struct SOAP_ENV__Header * SOAP_FMAC4 soap_in_SOAP_ENV__Header(struct soap*, const char*, struct SOAP_ENV__Header *, const char*);

SOAP_FMAC3 int SOAP_FMAC4 soap_put_SOAP_ENV__Header(struct soap*, const struct SOAP_ENV__Header *, const char*, const char*);

#ifndef soap_write_SOAP_ENV__Header
#define soap_write_SOAP_ENV__Header(soap, data) ( soap_free_temp(soap), soap_begin_send(soap) || (soap_serialize_SOAP_ENV__Header(soap, data),0) || soap_put_SOAP_ENV__Header(soap, data, "SOAP-ENV:Header", NULL) || soap_end_send(soap), (soap)->error )
#endif

SOAP_FMAC3 struct SOAP_ENV__Header * SOAP_FMAC4 soap_get_SOAP_ENV__Header(struct soap*, struct SOAP_ENV__Header *, const char*, const char*);

#ifndef soap_read_SOAP_ENV__Header
#define soap_read_SOAP_ENV__Header(soap, data) ( soap_begin_recv(soap) || !soap_get_SOAP_ENV__Header(soap, data, NULL, NULL) || soap_end_recv(soap), (soap)->error )
#endif

SOAP_FMAC1 struct SOAP_ENV__Header * SOAP_FMAC2 soap_instantiate_SOAP_ENV__Header(struct soap*, int, const char*, const char*, size_t*);

inline struct SOAP_ENV__Header * soap_new_SOAP_ENV__Header(struct soap *soap, int n = -1) { return soap_instantiate_SOAP_ENV__Header(soap, n, NULL, NULL, NULL); }

inline struct SOAP_ENV__Header * soap_new_req_SOAP_ENV__Header(struct soap *soap) { struct SOAP_ENV__Header *_p = soap_instantiate_SOAP_ENV__Header(soap, -1, NULL, NULL, NULL); if (_p) { soap_default_SOAP_ENV__Header(soap, _p); } return _p; }

inline struct SOAP_ENV__Header * soap_new_set_SOAP_ENV__Header(struct soap *soap, char *h__echoMeStringRequest, char *h__echoMeStringRequest_, char *h__echoMeStringResponse, struct s__SOAPStruct *h__echoMeStructRequest, struct s__SOAPStruct *h__echoMeStructRequest_, struct s__SOAPStruct *h__echoMeStructResponse, char *h__someUnknownRequest, char *h__someUnknownRequest_) { struct SOAP_ENV__Header *_p = soap_instantiate_SOAP_ENV__Header(soap, -1, NULL, NULL, NULL); if (_p) { soap_default_SOAP_ENV__Header(soap, _p); _p->h__echoMeStringRequest = h__echoMeStringRequest; _p->h__echoMeStringRequest_ = h__echoMeStringRequest_; _p->h__echoMeStringResponse = h__echoMeStringResponse; _p->h__echoMeStructRequest = h__echoMeStructRequest; _p->h__echoMeStructRequest_ = h__echoMeStructRequest_; _p->h__echoMeStructResponse = h__echoMeStructResponse; _p->h__someUnknownRequest = h__someUnknownRequest; _p->h__someUnknownRequest_ = h__someUnknownRequest_; } return _p; }

inline void soap_delete_SOAP_ENV__Header(struct soap *soap, struct SOAP_ENV__Header *p) { soap_delete(soap, p); }

SOAP_FMAC3 void SOAP_FMAC4 soap_copy_SOAP_ENV__Header(struct soap*, int, int, void*, size_t, const void*, size_t);

#endif

#ifndef SOAP_TYPE_ns__echoNestedArray
#define SOAP_TYPE_ns__echoNestedArray (112)
#endif
SOAP_FMAC3 void SOAP_FMAC4 soap_default_ns__echoNestedArray(struct soap*, struct ns__echoNestedArray *);
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_ns__echoNestedArray(struct soap*, const struct ns__echoNestedArray *);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_ns__echoNestedArray(struct soap*, const char*, int, const struct ns__echoNestedArray *, const char*);
SOAP_FMAC3 struct ns__echoNestedArray * SOAP_FMAC4 soap_in_ns__echoNestedArray(struct soap*, const char*, struct ns__echoNestedArray *, const char*);

SOAP_FMAC3 int SOAP_FMAC4 soap_put_ns__echoNestedArray(struct soap*, const struct ns__echoNestedArray *, const char*, const char*);

#ifndef soap_write_ns__echoNestedArray
#define soap_write_ns__echoNestedArray(soap, data) ( soap_free_temp(soap), soap_begin_send(soap) || (soap_serialize_ns__echoNestedArray(soap, data),0) || soap_put_ns__echoNestedArray(soap, data, "ns:echoNestedArray", NULL) || soap_end_send(soap), (soap)->error )
#endif

SOAP_FMAC3 struct ns__echoNestedArray * SOAP_FMAC4 soap_get_ns__echoNestedArray(struct soap*, struct ns__echoNestedArray *, const char*, const char*);

#ifndef soap_read_ns__echoNestedArray
#define soap_read_ns__echoNestedArray(soap, data) ( soap_begin_recv(soap) || !soap_get_ns__echoNestedArray(soap, data, NULL, NULL) || soap_end_recv(soap), (soap)->error )
#endif

SOAP_FMAC1 struct ns__echoNestedArray * SOAP_FMAC2 soap_instantiate_ns__echoNestedArray(struct soap*, int, const char*, const char*, size_t*);

inline struct ns__echoNestedArray * soap_new_ns__echoNestedArray(struct soap *soap, int n = -1) { return soap_instantiate_ns__echoNestedArray(soap, n, NULL, NULL, NULL); }

inline struct ns__echoNestedArray * soap_new_req_ns__echoNestedArray(struct soap *soap, struct s__SOAPArrayStruct& _inputStruct) { struct ns__echoNestedArray *_p = soap_instantiate_ns__echoNestedArray(soap, -1, NULL, NULL, NULL); if (_p) { soap_default_ns__echoNestedArray(soap, _p); _p->_inputStruct = _inputStruct; } return _p; }

inline struct ns__echoNestedArray * soap_new_set_ns__echoNestedArray(struct soap *soap, struct s__SOAPArrayStruct& _inputStruct) { struct ns__echoNestedArray *_p = soap_instantiate_ns__echoNestedArray(soap, -1, NULL, NULL, NULL); if (_p) { soap_default_ns__echoNestedArray(soap, _p); _p->_inputStruct = _inputStruct; } return _p; }

inline void soap_delete_ns__echoNestedArray(struct soap *soap, struct ns__echoNestedArray *p) { soap_delete(soap, p); }

SOAP_FMAC3 void SOAP_FMAC4 soap_copy_ns__echoNestedArray(struct soap*, int, int, void*, size_t, const void*, size_t);

#ifndef SOAP_TYPE_ns__echoNestedArrayResponse
#define SOAP_TYPE_ns__echoNestedArrayResponse (109)
#endif
SOAP_FMAC3 void SOAP_FMAC4 soap_default_ns__echoNestedArrayResponse(struct soap*, struct ns__echoNestedArrayResponse *);
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_ns__echoNestedArrayResponse(struct soap*, const struct ns__echoNestedArrayResponse *);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_ns__echoNestedArrayResponse(struct soap*, const char*, int, const struct ns__echoNestedArrayResponse *, const char*);
SOAP_FMAC3 struct ns__echoNestedArrayResponse * SOAP_FMAC4 soap_in_ns__echoNestedArrayResponse(struct soap*, const char*, struct ns__echoNestedArrayResponse *, const char*);

SOAP_FMAC3 int SOAP_FMAC4 soap_put_ns__echoNestedArrayResponse(struct soap*, const struct ns__echoNestedArrayResponse *, const char*, const char*);

#ifndef soap_write_ns__echoNestedArrayResponse
#define soap_write_ns__echoNestedArrayResponse(soap, data) ( soap_free_temp(soap), soap_begin_send(soap) || (soap_serialize_ns__echoNestedArrayResponse(soap, data),0) || soap_put_ns__echoNestedArrayResponse(soap, data, "ns:echoNestedArrayResponse", NULL) || soap_end_send(soap), (soap)->error )
#endif

SOAP_FMAC3 struct ns__echoNestedArrayResponse * SOAP_FMAC4 soap_get_ns__echoNestedArrayResponse(struct soap*, struct ns__echoNestedArrayResponse *, const char*, const char*);

#ifndef soap_read_ns__echoNestedArrayResponse
#define soap_read_ns__echoNestedArrayResponse(soap, data) ( soap_begin_recv(soap) || !soap_get_ns__echoNestedArrayResponse(soap, data, NULL, NULL) || soap_end_recv(soap), (soap)->error )
#endif

SOAP_FMAC1 struct ns__echoNestedArrayResponse * SOAP_FMAC2 soap_instantiate_ns__echoNestedArrayResponse(struct soap*, int, const char*, const char*, size_t*);

inline struct ns__echoNestedArrayResponse * soap_new_ns__echoNestedArrayResponse(struct soap *soap, int n = -1) { return soap_instantiate_ns__echoNestedArrayResponse(soap, n, NULL, NULL, NULL); }

inline struct ns__echoNestedArrayResponse * soap_new_req_ns__echoNestedArrayResponse(struct soap *soap, struct s__SOAPArrayStruct& _return) { struct ns__echoNestedArrayResponse *_p = soap_instantiate_ns__echoNestedArrayResponse(soap, -1, NULL, NULL, NULL); if (_p) { soap_default_ns__echoNestedArrayResponse(soap, _p); _p->_return = _return; } return _p; }

inline struct ns__echoNestedArrayResponse * soap_new_set_ns__echoNestedArrayResponse(struct soap *soap, struct s__SOAPArrayStruct& _return) { struct ns__echoNestedArrayResponse *_p = soap_instantiate_ns__echoNestedArrayResponse(soap, -1, NULL, NULL, NULL); if (_p) { soap_default_ns__echoNestedArrayResponse(soap, _p); _p->_return = _return; } return _p; }

inline void soap_delete_ns__echoNestedArrayResponse(struct soap *soap, struct ns__echoNestedArrayResponse *p) { soap_delete(soap, p); }

SOAP_FMAC3 void SOAP_FMAC4 soap_copy_ns__echoNestedArrayResponse(struct soap*, int, int, void*, size_t, const void*, size_t);

#ifndef SOAP_TYPE_s__SOAPArrayStruct
#define SOAP_TYPE_s__SOAPArrayStruct (108)
#endif
SOAP_FMAC3 void SOAP_FMAC4 soap_default_s__SOAPArrayStruct(struct soap*, struct s__SOAPArrayStruct *);
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_s__SOAPArrayStruct(struct soap*, const struct s__SOAPArrayStruct *);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_s__SOAPArrayStruct(struct soap*, const char*, int, const struct s__SOAPArrayStruct *, const char*);
SOAP_FMAC3 struct s__SOAPArrayStruct * SOAP_FMAC4 soap_in_s__SOAPArrayStruct(struct soap*, const char*, struct s__SOAPArrayStruct *, const char*);

SOAP_FMAC3 int SOAP_FMAC4 soap_put_s__SOAPArrayStruct(struct soap*, const struct s__SOAPArrayStruct *, const char*, const char*);

#ifndef soap_write_s__SOAPArrayStruct
#define soap_write_s__SOAPArrayStruct(soap, data) ( soap_free_temp(soap), soap_begin_send(soap) || (soap_serialize_s__SOAPArrayStruct(soap, data),0) || soap_put_s__SOAPArrayStruct(soap, data, "s:SOAPArrayStruct", NULL) || soap_end_send(soap), (soap)->error )
#endif

SOAP_FMAC3 struct s__SOAPArrayStruct * SOAP_FMAC4 soap_get_s__SOAPArrayStruct(struct soap*, struct s__SOAPArrayStruct *, const char*, const char*);

#ifndef soap_read_s__SOAPArrayStruct
#define soap_read_s__SOAPArrayStruct(soap, data) ( soap_begin_recv(soap) || !soap_get_s__SOAPArrayStruct(soap, data, NULL, NULL) || soap_end_recv(soap), (soap)->error )
#endif

SOAP_FMAC1 struct s__SOAPArrayStruct * SOAP_FMAC2 soap_instantiate_s__SOAPArrayStruct(struct soap*, int, const char*, const char*, size_t*);

inline struct s__SOAPArrayStruct * soap_new_s__SOAPArrayStruct(struct soap *soap, int n = -1) { return soap_instantiate_s__SOAPArrayStruct(soap, n, NULL, NULL, NULL); }

inline struct s__SOAPArrayStruct * soap_new_req_s__SOAPArrayStruct(struct soap *soap, struct ArrayOfstring& varArray) { struct s__SOAPArrayStruct *_p = soap_instantiate_s__SOAPArrayStruct(soap, -1, NULL, NULL, NULL); if (_p) { soap_default_s__SOAPArrayStruct(soap, _p); _p->varArray = varArray; } return _p; }

inline struct s__SOAPArrayStruct * soap_new_set_s__SOAPArrayStruct(struct soap *soap, char *varString, long *varInt, float *varFloat, struct ArrayOfstring& varArray) { struct s__SOAPArrayStruct *_p = soap_instantiate_s__SOAPArrayStruct(soap, -1, NULL, NULL, NULL); if (_p) { soap_default_s__SOAPArrayStruct(soap, _p); _p->varString = varString; _p->varInt = varInt; _p->varFloat = varFloat; _p->varArray = varArray; } return _p; }

inline void soap_delete_s__SOAPArrayStruct(struct soap *soap, struct s__SOAPArrayStruct *p) { soap_delete(soap, p); }

SOAP_FMAC3 void SOAP_FMAC4 soap_copy_s__SOAPArrayStruct(struct soap*, int, int, void*, size_t, const void*, size_t);

#ifndef SOAP_TYPE_ns__echoNestedStruct
#define SOAP_TYPE_ns__echoNestedStruct (107)
#endif
SOAP_FMAC3 void SOAP_FMAC4 soap_default_ns__echoNestedStruct(struct soap*, struct ns__echoNestedStruct *);
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_ns__echoNestedStruct(struct soap*, const struct ns__echoNestedStruct *);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_ns__echoNestedStruct(struct soap*, const char*, int, const struct ns__echoNestedStruct *, const char*);
SOAP_FMAC3 struct ns__echoNestedStruct * SOAP_FMAC4 soap_in_ns__echoNestedStruct(struct soap*, const char*, struct ns__echoNestedStruct *, const char*);

SOAP_FMAC3 int SOAP_FMAC4 soap_put_ns__echoNestedStruct(struct soap*, const struct ns__echoNestedStruct *, const char*, const char*);

#ifndef soap_write_ns__echoNestedStruct
#define soap_write_ns__echoNestedStruct(soap, data) ( soap_free_temp(soap), soap_begin_send(soap) || (soap_serialize_ns__echoNestedStruct(soap, data),0) || soap_put_ns__echoNestedStruct(soap, data, "ns:echoNestedStruct", NULL) || soap_end_send(soap), (soap)->error )
#endif

SOAP_FMAC3 struct ns__echoNestedStruct * SOAP_FMAC4 soap_get_ns__echoNestedStruct(struct soap*, struct ns__echoNestedStruct *, const char*, const char*);

#ifndef soap_read_ns__echoNestedStruct
#define soap_read_ns__echoNestedStruct(soap, data) ( soap_begin_recv(soap) || !soap_get_ns__echoNestedStruct(soap, data, NULL, NULL) || soap_end_recv(soap), (soap)->error )
#endif

SOAP_FMAC1 struct ns__echoNestedStruct * SOAP_FMAC2 soap_instantiate_ns__echoNestedStruct(struct soap*, int, const char*, const char*, size_t*);

inline struct ns__echoNestedStruct * soap_new_ns__echoNestedStruct(struct soap *soap, int n = -1) { return soap_instantiate_ns__echoNestedStruct(soap, n, NULL, NULL, NULL); }

inline struct ns__echoNestedStruct * soap_new_req_ns__echoNestedStruct(struct soap *soap, struct s__SOAPStructStruct& _inputStruct) { struct ns__echoNestedStruct *_p = soap_instantiate_ns__echoNestedStruct(soap, -1, NULL, NULL, NULL); if (_p) { soap_default_ns__echoNestedStruct(soap, _p); _p->_inputStruct = _inputStruct; } return _p; }

inline struct ns__echoNestedStruct * soap_new_set_ns__echoNestedStruct(struct soap *soap, struct s__SOAPStructStruct& _inputStruct) { struct ns__echoNestedStruct *_p = soap_instantiate_ns__echoNestedStruct(soap, -1, NULL, NULL, NULL); if (_p) { soap_default_ns__echoNestedStruct(soap, _p); _p->_inputStruct = _inputStruct; } return _p; }

inline void soap_delete_ns__echoNestedStruct(struct soap *soap, struct ns__echoNestedStruct *p) { soap_delete(soap, p); }

SOAP_FMAC3 void SOAP_FMAC4 soap_copy_ns__echoNestedStruct(struct soap*, int, int, void*, size_t, const void*, size_t);

#ifndef SOAP_TYPE_ns__echoNestedStructResponse
#define SOAP_TYPE_ns__echoNestedStructResponse (104)
#endif
SOAP_FMAC3 void SOAP_FMAC4 soap_default_ns__echoNestedStructResponse(struct soap*, struct ns__echoNestedStructResponse *);
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_ns__echoNestedStructResponse(struct soap*, const struct ns__echoNestedStructResponse *);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_ns__echoNestedStructResponse(struct soap*, const char*, int, const struct ns__echoNestedStructResponse *, const char*);
SOAP_FMAC3 struct ns__echoNestedStructResponse * SOAP_FMAC4 soap_in_ns__echoNestedStructResponse(struct soap*, const char*, struct ns__echoNestedStructResponse *, const char*);

SOAP_FMAC3 int SOAP_FMAC4 soap_put_ns__echoNestedStructResponse(struct soap*, const struct ns__echoNestedStructResponse *, const char*, const char*);

#ifndef soap_write_ns__echoNestedStructResponse
#define soap_write_ns__echoNestedStructResponse(soap, data) ( soap_free_temp(soap), soap_begin_send(soap) || (soap_serialize_ns__echoNestedStructResponse(soap, data),0) || soap_put_ns__echoNestedStructResponse(soap, data, "ns:echoNestedStructResponse", NULL) || soap_end_send(soap), (soap)->error )
#endif

SOAP_FMAC3 struct ns__echoNestedStructResponse * SOAP_FMAC4 soap_get_ns__echoNestedStructResponse(struct soap*, struct ns__echoNestedStructResponse *, const char*, const char*);

#ifndef soap_read_ns__echoNestedStructResponse
#define soap_read_ns__echoNestedStructResponse(soap, data) ( soap_begin_recv(soap) || !soap_get_ns__echoNestedStructResponse(soap, data, NULL, NULL) || soap_end_recv(soap), (soap)->error )
#endif

SOAP_FMAC1 struct ns__echoNestedStructResponse * SOAP_FMAC2 soap_instantiate_ns__echoNestedStructResponse(struct soap*, int, const char*, const char*, size_t*);

inline struct ns__echoNestedStructResponse * soap_new_ns__echoNestedStructResponse(struct soap *soap, int n = -1) { return soap_instantiate_ns__echoNestedStructResponse(soap, n, NULL, NULL, NULL); }

inline struct ns__echoNestedStructResponse * soap_new_req_ns__echoNestedStructResponse(struct soap *soap, struct s__SOAPStructStruct& _return) { struct ns__echoNestedStructResponse *_p = soap_instantiate_ns__echoNestedStructResponse(soap, -1, NULL, NULL, NULL); if (_p) { soap_default_ns__echoNestedStructResponse(soap, _p); _p->_return = _return; } return _p; }

inline struct ns__echoNestedStructResponse * soap_new_set_ns__echoNestedStructResponse(struct soap *soap, struct s__SOAPStructStruct& _return) { struct ns__echoNestedStructResponse *_p = soap_instantiate_ns__echoNestedStructResponse(soap, -1, NULL, NULL, NULL); if (_p) { soap_default_ns__echoNestedStructResponse(soap, _p); _p->_return = _return; } return _p; }

inline void soap_delete_ns__echoNestedStructResponse(struct soap *soap, struct ns__echoNestedStructResponse *p) { soap_delete(soap, p); }

SOAP_FMAC3 void SOAP_FMAC4 soap_copy_ns__echoNestedStructResponse(struct soap*, int, int, void*, size_t, const void*, size_t);

#ifndef SOAP_TYPE_s__SOAPStructStruct
#define SOAP_TYPE_s__SOAPStructStruct (103)
#endif
SOAP_FMAC3 void SOAP_FMAC4 soap_default_s__SOAPStructStruct(struct soap*, struct s__SOAPStructStruct *);
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_s__SOAPStructStruct(struct soap*, const struct s__SOAPStructStruct *);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_s__SOAPStructStruct(struct soap*, const char*, int, const struct s__SOAPStructStruct *, const char*);
SOAP_FMAC3 struct s__SOAPStructStruct * SOAP_FMAC4 soap_in_s__SOAPStructStruct(struct soap*, const char*, struct s__SOAPStructStruct *, const char*);

SOAP_FMAC3 int SOAP_FMAC4 soap_put_s__SOAPStructStruct(struct soap*, const struct s__SOAPStructStruct *, const char*, const char*);

#ifndef soap_write_s__SOAPStructStruct
#define soap_write_s__SOAPStructStruct(soap, data) ( soap_free_temp(soap), soap_begin_send(soap) || (soap_serialize_s__SOAPStructStruct(soap, data),0) || soap_put_s__SOAPStructStruct(soap, data, "s:SOAPStructStruct", NULL) || soap_end_send(soap), (soap)->error )
#endif

SOAP_FMAC3 struct s__SOAPStructStruct * SOAP_FMAC4 soap_get_s__SOAPStructStruct(struct soap*, struct s__SOAPStructStruct *, const char*, const char*);

#ifndef soap_read_s__SOAPStructStruct
#define soap_read_s__SOAPStructStruct(soap, data) ( soap_begin_recv(soap) || !soap_get_s__SOAPStructStruct(soap, data, NULL, NULL) || soap_end_recv(soap), (soap)->error )
#endif

SOAP_FMAC1 struct s__SOAPStructStruct * SOAP_FMAC2 soap_instantiate_s__SOAPStructStruct(struct soap*, int, const char*, const char*, size_t*);

inline struct s__SOAPStructStruct * soap_new_s__SOAPStructStruct(struct soap *soap, int n = -1) { return soap_instantiate_s__SOAPStructStruct(soap, n, NULL, NULL, NULL); }

inline struct s__SOAPStructStruct * soap_new_req_s__SOAPStructStruct(struct soap *soap) { struct s__SOAPStructStruct *_p = soap_instantiate_s__SOAPStructStruct(soap, -1, NULL, NULL, NULL); if (_p) { soap_default_s__SOAPStructStruct(soap, _p); } return _p; }

inline struct s__SOAPStructStruct * soap_new_set_s__SOAPStructStruct(struct soap *soap, char *varString, long *varInt, float *varFloat, struct s__SOAPStruct *varStruct) { struct s__SOAPStructStruct *_p = soap_instantiate_s__SOAPStructStruct(soap, -1, NULL, NULL, NULL); if (_p) { soap_default_s__SOAPStructStruct(soap, _p); _p->varString = varString; _p->varInt = varInt; _p->varFloat = varFloat; _p->varStruct = varStruct; } return _p; }

inline void soap_delete_s__SOAPStructStruct(struct soap *soap, struct s__SOAPStructStruct *p) { soap_delete(soap, p); }

SOAP_FMAC3 void SOAP_FMAC4 soap_copy_s__SOAPStructStruct(struct soap*, int, int, void*, size_t, const void*, size_t);

#ifndef SOAP_TYPE_ns__echo2DStringArray
#define SOAP_TYPE_ns__echo2DStringArray (102)
#endif
SOAP_FMAC3 void SOAP_FMAC4 soap_default_ns__echo2DStringArray(struct soap*, struct ns__echo2DStringArray *);
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_ns__echo2DStringArray(struct soap*, const struct ns__echo2DStringArray *);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_ns__echo2DStringArray(struct soap*, const char*, int, const struct ns__echo2DStringArray *, const char*);
SOAP_FMAC3 struct ns__echo2DStringArray * SOAP_FMAC4 soap_in_ns__echo2DStringArray(struct soap*, const char*, struct ns__echo2DStringArray *, const char*);

SOAP_FMAC3 int SOAP_FMAC4 soap_put_ns__echo2DStringArray(struct soap*, const struct ns__echo2DStringArray *, const char*, const char*);

#ifndef soap_write_ns__echo2DStringArray
#define soap_write_ns__echo2DStringArray(soap, data) ( soap_free_temp(soap), soap_begin_send(soap) || (soap_serialize_ns__echo2DStringArray(soap, data),0) || soap_put_ns__echo2DStringArray(soap, data, "ns:echo2DStringArray", NULL) || soap_end_send(soap), (soap)->error )
#endif

SOAP_FMAC3 struct ns__echo2DStringArray * SOAP_FMAC4 soap_get_ns__echo2DStringArray(struct soap*, struct ns__echo2DStringArray *, const char*, const char*);

#ifndef soap_read_ns__echo2DStringArray
#define soap_read_ns__echo2DStringArray(soap, data) ( soap_begin_recv(soap) || !soap_get_ns__echo2DStringArray(soap, data, NULL, NULL) || soap_end_recv(soap), (soap)->error )
#endif

SOAP_FMAC1 struct ns__echo2DStringArray * SOAP_FMAC2 soap_instantiate_ns__echo2DStringArray(struct soap*, int, const char*, const char*, size_t*);

inline struct ns__echo2DStringArray * soap_new_ns__echo2DStringArray(struct soap *soap, int n = -1) { return soap_instantiate_ns__echo2DStringArray(soap, n, NULL, NULL, NULL); }

inline struct ns__echo2DStringArray * soap_new_req_ns__echo2DStringArray(struct soap *soap, struct ArrayOfstring2D& _input2DStringArray) { struct ns__echo2DStringArray *_p = soap_instantiate_ns__echo2DStringArray(soap, -1, NULL, NULL, NULL); if (_p) { soap_default_ns__echo2DStringArray(soap, _p); _p->_input2DStringArray = _input2DStringArray; } return _p; }

inline struct ns__echo2DStringArray * soap_new_set_ns__echo2DStringArray(struct soap *soap, struct ArrayOfstring2D& _input2DStringArray) { struct ns__echo2DStringArray *_p = soap_instantiate_ns__echo2DStringArray(soap, -1, NULL, NULL, NULL); if (_p) { soap_default_ns__echo2DStringArray(soap, _p); _p->_input2DStringArray = _input2DStringArray; } return _p; }

inline void soap_delete_ns__echo2DStringArray(struct soap *soap, struct ns__echo2DStringArray *p) { soap_delete(soap, p); }

SOAP_FMAC3 void SOAP_FMAC4 soap_copy_ns__echo2DStringArray(struct soap*, int, int, void*, size_t, const void*, size_t);

#ifndef SOAP_TYPE_ns__echo2DStringArrayResponse
#define SOAP_TYPE_ns__echo2DStringArrayResponse (101)
#endif
SOAP_FMAC3 void SOAP_FMAC4 soap_default_ns__echo2DStringArrayResponse(struct soap*, struct ns__echo2DStringArrayResponse *);
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_ns__echo2DStringArrayResponse(struct soap*, const struct ns__echo2DStringArrayResponse *);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_ns__echo2DStringArrayResponse(struct soap*, const char*, int, const struct ns__echo2DStringArrayResponse *, const char*);
SOAP_FMAC3 struct ns__echo2DStringArrayResponse * SOAP_FMAC4 soap_in_ns__echo2DStringArrayResponse(struct soap*, const char*, struct ns__echo2DStringArrayResponse *, const char*);

SOAP_FMAC3 int SOAP_FMAC4 soap_put_ns__echo2DStringArrayResponse(struct soap*, const struct ns__echo2DStringArrayResponse *, const char*, const char*);

#ifndef soap_write_ns__echo2DStringArrayResponse
#define soap_write_ns__echo2DStringArrayResponse(soap, data) ( soap_free_temp(soap), soap_begin_send(soap) || (soap_serialize_ns__echo2DStringArrayResponse(soap, data),0) || soap_put_ns__echo2DStringArrayResponse(soap, data, "ns:echo2DStringArrayResponse", NULL) || soap_end_send(soap), (soap)->error )
#endif

SOAP_FMAC3 struct ns__echo2DStringArrayResponse * SOAP_FMAC4 soap_get_ns__echo2DStringArrayResponse(struct soap*, struct ns__echo2DStringArrayResponse *, const char*, const char*);

#ifndef soap_read_ns__echo2DStringArrayResponse
#define soap_read_ns__echo2DStringArrayResponse(soap, data) ( soap_begin_recv(soap) || !soap_get_ns__echo2DStringArrayResponse(soap, data, NULL, NULL) || soap_end_recv(soap), (soap)->error )
#endif

SOAP_FMAC1 struct ns__echo2DStringArrayResponse * SOAP_FMAC2 soap_instantiate_ns__echo2DStringArrayResponse(struct soap*, int, const char*, const char*, size_t*);

inline struct ns__echo2DStringArrayResponse * soap_new_ns__echo2DStringArrayResponse(struct soap *soap, int n = -1) { return soap_instantiate_ns__echo2DStringArrayResponse(soap, n, NULL, NULL, NULL); }

inline struct ns__echo2DStringArrayResponse * soap_new_req_ns__echo2DStringArrayResponse(struct soap *soap, struct ArrayOfstring2D& _return) { struct ns__echo2DStringArrayResponse *_p = soap_instantiate_ns__echo2DStringArrayResponse(soap, -1, NULL, NULL, NULL); if (_p) { soap_default_ns__echo2DStringArrayResponse(soap, _p); _p->_return = _return; } return _p; }

inline struct ns__echo2DStringArrayResponse * soap_new_set_ns__echo2DStringArrayResponse(struct soap *soap, struct ArrayOfstring2D& _return) { struct ns__echo2DStringArrayResponse *_p = soap_instantiate_ns__echo2DStringArrayResponse(soap, -1, NULL, NULL, NULL); if (_p) { soap_default_ns__echo2DStringArrayResponse(soap, _p); _p->_return = _return; } return _p; }

inline void soap_delete_ns__echo2DStringArrayResponse(struct soap *soap, struct ns__echo2DStringArrayResponse *p) { soap_delete(soap, p); }

SOAP_FMAC3 void SOAP_FMAC4 soap_copy_ns__echo2DStringArrayResponse(struct soap*, int, int, void*, size_t, const void*, size_t);

#ifndef SOAP_TYPE_ArrayOfstring2D
#define SOAP_TYPE_ArrayOfstring2D (97)
#endif
SOAP_FMAC3 void SOAP_FMAC4 soap_default_ArrayOfstring2D(struct soap*, struct ArrayOfstring2D *);
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_ArrayOfstring2D(struct soap*, struct ArrayOfstring2D const*);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_ArrayOfstring2D(struct soap*, const char*, int, const struct ArrayOfstring2D *, const char*);
SOAP_FMAC3 struct ArrayOfstring2D * SOAP_FMAC4 soap_in_ArrayOfstring2D(struct soap*, const char*, struct ArrayOfstring2D *, const char*);

SOAP_FMAC3 int SOAP_FMAC4 soap_put_ArrayOfstring2D(struct soap*, const struct ArrayOfstring2D *, const char*, const char*);

#ifndef soap_write_ArrayOfstring2D
#define soap_write_ArrayOfstring2D(soap, data) ( soap_free_temp(soap), soap_begin_send(soap) || (soap_serialize_ArrayOfstring2D(soap, data),0) || soap_put_ArrayOfstring2D(soap, data, "SOAP-ENC:Array", NULL) || soap_end_send(soap), (soap)->error )
#endif

SOAP_FMAC3 struct ArrayOfstring2D * SOAP_FMAC4 soap_get_ArrayOfstring2D(struct soap*, struct ArrayOfstring2D *, const char*, const char*);

#ifndef soap_read_ArrayOfstring2D
#define soap_read_ArrayOfstring2D(soap, data) ( soap_begin_recv(soap) || !soap_get_ArrayOfstring2D(soap, data, NULL, NULL) || soap_end_recv(soap), (soap)->error )
#endif

SOAP_FMAC1 struct ArrayOfstring2D * SOAP_FMAC2 soap_instantiate_ArrayOfstring2D(struct soap*, int, const char*, const char*, size_t*);

inline struct ArrayOfstring2D * soap_new_ArrayOfstring2D(struct soap *soap, int n = -1) { return soap_instantiate_ArrayOfstring2D(soap, n, NULL, NULL, NULL); }

inline struct ArrayOfstring2D * soap_new_req_ArrayOfstring2D(struct soap *soap) { struct ArrayOfstring2D *_p = soap_instantiate_ArrayOfstring2D(soap, -1, NULL, NULL, NULL); if (_p) { soap_default_ArrayOfstring2D(soap, _p); } return _p; }

inline struct ArrayOfstring2D * soap_new_set_ArrayOfstring2D(struct soap *soap, char **__ptr, int __size[2], int __offset[2]) { struct ArrayOfstring2D *_p = soap_instantiate_ArrayOfstring2D(soap, -1, NULL, NULL, NULL); if (_p) { soap_default_ArrayOfstring2D(soap, _p); _p->__ptr = __ptr; memcpy(_p->__size, __size, sizeof(int[2])); memcpy(_p->__offset, __offset, sizeof(int[2])); } return _p; }

inline void soap_delete_ArrayOfstring2D(struct soap *soap, struct ArrayOfstring2D *p) { soap_delete(soap, p); }

SOAP_FMAC3 void SOAP_FMAC4 soap_copy_ArrayOfstring2D(struct soap*, int, int, void*, size_t, const void*, size_t);

#ifndef SOAP_TYPE_ns__echoSimpleTypesAsStruct
#define SOAP_TYPE_ns__echoSimpleTypesAsStruct (96)
#endif
SOAP_FMAC3 void SOAP_FMAC4 soap_default_ns__echoSimpleTypesAsStruct(struct soap*, struct ns__echoSimpleTypesAsStruct *);
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_ns__echoSimpleTypesAsStruct(struct soap*, const struct ns__echoSimpleTypesAsStruct *);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_ns__echoSimpleTypesAsStruct(struct soap*, const char*, int, const struct ns__echoSimpleTypesAsStruct *, const char*);
SOAP_FMAC3 struct ns__echoSimpleTypesAsStruct * SOAP_FMAC4 soap_in_ns__echoSimpleTypesAsStruct(struct soap*, const char*, struct ns__echoSimpleTypesAsStruct *, const char*);

SOAP_FMAC3 int SOAP_FMAC4 soap_put_ns__echoSimpleTypesAsStruct(struct soap*, const struct ns__echoSimpleTypesAsStruct *, const char*, const char*);

#ifndef soap_write_ns__echoSimpleTypesAsStruct
#define soap_write_ns__echoSimpleTypesAsStruct(soap, data) ( soap_free_temp(soap), soap_begin_send(soap) || (soap_serialize_ns__echoSimpleTypesAsStruct(soap, data),0) || soap_put_ns__echoSimpleTypesAsStruct(soap, data, "ns:echoSimpleTypesAsStruct", NULL) || soap_end_send(soap), (soap)->error )
#endif

SOAP_FMAC3 struct ns__echoSimpleTypesAsStruct * SOAP_FMAC4 soap_get_ns__echoSimpleTypesAsStruct(struct soap*, struct ns__echoSimpleTypesAsStruct *, const char*, const char*);

#ifndef soap_read_ns__echoSimpleTypesAsStruct
#define soap_read_ns__echoSimpleTypesAsStruct(soap, data) ( soap_begin_recv(soap) || !soap_get_ns__echoSimpleTypesAsStruct(soap, data, NULL, NULL) || soap_end_recv(soap), (soap)->error )
#endif

SOAP_FMAC1 struct ns__echoSimpleTypesAsStruct * SOAP_FMAC2 soap_instantiate_ns__echoSimpleTypesAsStruct(struct soap*, int, const char*, const char*, size_t*);

inline struct ns__echoSimpleTypesAsStruct * soap_new_ns__echoSimpleTypesAsStruct(struct soap *soap, int n = -1) { return soap_instantiate_ns__echoSimpleTypesAsStruct(soap, n, NULL, NULL, NULL); }

inline struct ns__echoSimpleTypesAsStruct * soap_new_req_ns__echoSimpleTypesAsStruct(struct soap *soap) { struct ns__echoSimpleTypesAsStruct *_p = soap_instantiate_ns__echoSimpleTypesAsStruct(soap, -1, NULL, NULL, NULL); if (_p) { soap_default_ns__echoSimpleTypesAsStruct(soap, _p); } return _p; }

inline struct ns__echoSimpleTypesAsStruct * soap_new_set_ns__echoSimpleTypesAsStruct(struct soap *soap, char *inputString, long *inputInteger, float *inputFloat) { struct ns__echoSimpleTypesAsStruct *_p = soap_instantiate_ns__echoSimpleTypesAsStruct(soap, -1, NULL, NULL, NULL); if (_p) { soap_default_ns__echoSimpleTypesAsStruct(soap, _p); _p->inputString = inputString; _p->inputInteger = inputInteger; _p->inputFloat = inputFloat; } return _p; }

inline void soap_delete_ns__echoSimpleTypesAsStruct(struct soap *soap, struct ns__echoSimpleTypesAsStruct *p) { soap_delete(soap, p); }

SOAP_FMAC3 void SOAP_FMAC4 soap_copy_ns__echoSimpleTypesAsStruct(struct soap*, int, int, void*, size_t, const void*, size_t);

#ifndef SOAP_TYPE_ns__echoSimpleTypesAsStructResponse
#define SOAP_TYPE_ns__echoSimpleTypesAsStructResponse (93)
#endif
SOAP_FMAC3 void SOAP_FMAC4 soap_default_ns__echoSimpleTypesAsStructResponse(struct soap*, struct ns__echoSimpleTypesAsStructResponse *);
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_ns__echoSimpleTypesAsStructResponse(struct soap*, const struct ns__echoSimpleTypesAsStructResponse *);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_ns__echoSimpleTypesAsStructResponse(struct soap*, const char*, int, const struct ns__echoSimpleTypesAsStructResponse *, const char*);
SOAP_FMAC3 struct ns__echoSimpleTypesAsStructResponse * SOAP_FMAC4 soap_in_ns__echoSimpleTypesAsStructResponse(struct soap*, const char*, struct ns__echoSimpleTypesAsStructResponse *, const char*);

SOAP_FMAC3 int SOAP_FMAC4 soap_put_ns__echoSimpleTypesAsStructResponse(struct soap*, const struct ns__echoSimpleTypesAsStructResponse *, const char*, const char*);

#ifndef soap_write_ns__echoSimpleTypesAsStructResponse
#define soap_write_ns__echoSimpleTypesAsStructResponse(soap, data) ( soap_free_temp(soap), soap_begin_send(soap) || (soap_serialize_ns__echoSimpleTypesAsStructResponse(soap, data),0) || soap_put_ns__echoSimpleTypesAsStructResponse(soap, data, "ns:echoSimpleTypesAsStructResponse", NULL) || soap_end_send(soap), (soap)->error )
#endif

SOAP_FMAC3 struct ns__echoSimpleTypesAsStructResponse * SOAP_FMAC4 soap_get_ns__echoSimpleTypesAsStructResponse(struct soap*, struct ns__echoSimpleTypesAsStructResponse *, const char*, const char*);

#ifndef soap_read_ns__echoSimpleTypesAsStructResponse
#define soap_read_ns__echoSimpleTypesAsStructResponse(soap, data) ( soap_begin_recv(soap) || !soap_get_ns__echoSimpleTypesAsStructResponse(soap, data, NULL, NULL) || soap_end_recv(soap), (soap)->error )
#endif

SOAP_FMAC1 struct ns__echoSimpleTypesAsStructResponse * SOAP_FMAC2 soap_instantiate_ns__echoSimpleTypesAsStructResponse(struct soap*, int, const char*, const char*, size_t*);

inline struct ns__echoSimpleTypesAsStructResponse * soap_new_ns__echoSimpleTypesAsStructResponse(struct soap *soap, int n = -1) { return soap_instantiate_ns__echoSimpleTypesAsStructResponse(soap, n, NULL, NULL, NULL); }

inline struct ns__echoSimpleTypesAsStructResponse * soap_new_req_ns__echoSimpleTypesAsStructResponse(struct soap *soap, struct s__SOAPStruct& _return) { struct ns__echoSimpleTypesAsStructResponse *_p = soap_instantiate_ns__echoSimpleTypesAsStructResponse(soap, -1, NULL, NULL, NULL); if (_p) { soap_default_ns__echoSimpleTypesAsStructResponse(soap, _p); _p->_return = _return; } return _p; }

inline struct ns__echoSimpleTypesAsStructResponse * soap_new_set_ns__echoSimpleTypesAsStructResponse(struct soap *soap, struct s__SOAPStruct& _return) { struct ns__echoSimpleTypesAsStructResponse *_p = soap_instantiate_ns__echoSimpleTypesAsStructResponse(soap, -1, NULL, NULL, NULL); if (_p) { soap_default_ns__echoSimpleTypesAsStructResponse(soap, _p); _p->_return = _return; } return _p; }

inline void soap_delete_ns__echoSimpleTypesAsStructResponse(struct soap *soap, struct ns__echoSimpleTypesAsStructResponse *p) { soap_delete(soap, p); }

SOAP_FMAC3 void SOAP_FMAC4 soap_copy_ns__echoSimpleTypesAsStructResponse(struct soap*, int, int, void*, size_t, const void*, size_t);

#ifndef SOAP_TYPE_ns__echoStructAsSimpleTypes
#define SOAP_TYPE_ns__echoStructAsSimpleTypes (92)
#endif
SOAP_FMAC3 void SOAP_FMAC4 soap_default_ns__echoStructAsSimpleTypes(struct soap*, struct ns__echoStructAsSimpleTypes *);
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_ns__echoStructAsSimpleTypes(struct soap*, const struct ns__echoStructAsSimpleTypes *);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_ns__echoStructAsSimpleTypes(struct soap*, const char*, int, const struct ns__echoStructAsSimpleTypes *, const char*);
SOAP_FMAC3 struct ns__echoStructAsSimpleTypes * SOAP_FMAC4 soap_in_ns__echoStructAsSimpleTypes(struct soap*, const char*, struct ns__echoStructAsSimpleTypes *, const char*);

SOAP_FMAC3 int SOAP_FMAC4 soap_put_ns__echoStructAsSimpleTypes(struct soap*, const struct ns__echoStructAsSimpleTypes *, const char*, const char*);

#ifndef soap_write_ns__echoStructAsSimpleTypes
#define soap_write_ns__echoStructAsSimpleTypes(soap, data) ( soap_free_temp(soap), soap_begin_send(soap) || (soap_serialize_ns__echoStructAsSimpleTypes(soap, data),0) || soap_put_ns__echoStructAsSimpleTypes(soap, data, "ns:echoStructAsSimpleTypes", NULL) || soap_end_send(soap), (soap)->error )
#endif

SOAP_FMAC3 struct ns__echoStructAsSimpleTypes * SOAP_FMAC4 soap_get_ns__echoStructAsSimpleTypes(struct soap*, struct ns__echoStructAsSimpleTypes *, const char*, const char*);

#ifndef soap_read_ns__echoStructAsSimpleTypes
#define soap_read_ns__echoStructAsSimpleTypes(soap, data) ( soap_begin_recv(soap) || !soap_get_ns__echoStructAsSimpleTypes(soap, data, NULL, NULL) || soap_end_recv(soap), (soap)->error )
#endif

SOAP_FMAC1 struct ns__echoStructAsSimpleTypes * SOAP_FMAC2 soap_instantiate_ns__echoStructAsSimpleTypes(struct soap*, int, const char*, const char*, size_t*);

inline struct ns__echoStructAsSimpleTypes * soap_new_ns__echoStructAsSimpleTypes(struct soap *soap, int n = -1) { return soap_instantiate_ns__echoStructAsSimpleTypes(soap, n, NULL, NULL, NULL); }

inline struct ns__echoStructAsSimpleTypes * soap_new_req_ns__echoStructAsSimpleTypes(struct soap *soap, struct s__SOAPStruct& _inputStruct) { struct ns__echoStructAsSimpleTypes *_p = soap_instantiate_ns__echoStructAsSimpleTypes(soap, -1, NULL, NULL, NULL); if (_p) { soap_default_ns__echoStructAsSimpleTypes(soap, _p); _p->_inputStruct = _inputStruct; } return _p; }

inline struct ns__echoStructAsSimpleTypes * soap_new_set_ns__echoStructAsSimpleTypes(struct soap *soap, struct s__SOAPStruct& _inputStruct) { struct ns__echoStructAsSimpleTypes *_p = soap_instantiate_ns__echoStructAsSimpleTypes(soap, -1, NULL, NULL, NULL); if (_p) { soap_default_ns__echoStructAsSimpleTypes(soap, _p); _p->_inputStruct = _inputStruct; } return _p; }

inline void soap_delete_ns__echoStructAsSimpleTypes(struct soap *soap, struct ns__echoStructAsSimpleTypes *p) { soap_delete(soap, p); }

SOAP_FMAC3 void SOAP_FMAC4 soap_copy_ns__echoStructAsSimpleTypes(struct soap*, int, int, void*, size_t, const void*, size_t);

#ifndef SOAP_TYPE_ns__echoStructAsSimpleTypesResponse
#define SOAP_TYPE_ns__echoStructAsSimpleTypesResponse (89)
#endif
SOAP_FMAC3 void SOAP_FMAC4 soap_default_ns__echoStructAsSimpleTypesResponse(struct soap*, struct ns__echoStructAsSimpleTypesResponse *);
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_ns__echoStructAsSimpleTypesResponse(struct soap*, const struct ns__echoStructAsSimpleTypesResponse *);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_ns__echoStructAsSimpleTypesResponse(struct soap*, const char*, int, const struct ns__echoStructAsSimpleTypesResponse *, const char*);
SOAP_FMAC3 struct ns__echoStructAsSimpleTypesResponse * SOAP_FMAC4 soap_in_ns__echoStructAsSimpleTypesResponse(struct soap*, const char*, struct ns__echoStructAsSimpleTypesResponse *, const char*);

SOAP_FMAC3 int SOAP_FMAC4 soap_put_ns__echoStructAsSimpleTypesResponse(struct soap*, const struct ns__echoStructAsSimpleTypesResponse *, const char*, const char*);

#ifndef soap_write_ns__echoStructAsSimpleTypesResponse
#define soap_write_ns__echoStructAsSimpleTypesResponse(soap, data) ( soap_free_temp(soap), soap_begin_send(soap) || (soap_serialize_ns__echoStructAsSimpleTypesResponse(soap, data),0) || soap_put_ns__echoStructAsSimpleTypesResponse(soap, data, "ns:echoStructAsSimpleTypesResponse", NULL) || soap_end_send(soap), (soap)->error )
#endif

SOAP_FMAC3 struct ns__echoStructAsSimpleTypesResponse * SOAP_FMAC4 soap_get_ns__echoStructAsSimpleTypesResponse(struct soap*, struct ns__echoStructAsSimpleTypesResponse *, const char*, const char*);

#ifndef soap_read_ns__echoStructAsSimpleTypesResponse
#define soap_read_ns__echoStructAsSimpleTypesResponse(soap, data) ( soap_begin_recv(soap) || !soap_get_ns__echoStructAsSimpleTypesResponse(soap, data, NULL, NULL) || soap_end_recv(soap), (soap)->error )
#endif

SOAP_FMAC1 struct ns__echoStructAsSimpleTypesResponse * SOAP_FMAC2 soap_instantiate_ns__echoStructAsSimpleTypesResponse(struct soap*, int, const char*, const char*, size_t*);

inline struct ns__echoStructAsSimpleTypesResponse * soap_new_ns__echoStructAsSimpleTypesResponse(struct soap *soap, int n = -1) { return soap_instantiate_ns__echoStructAsSimpleTypesResponse(soap, n, NULL, NULL, NULL); }

inline struct ns__echoStructAsSimpleTypesResponse * soap_new_req_ns__echoStructAsSimpleTypesResponse(struct soap *soap) { struct ns__echoStructAsSimpleTypesResponse *_p = soap_instantiate_ns__echoStructAsSimpleTypesResponse(soap, -1, NULL, NULL, NULL); if (_p) { soap_default_ns__echoStructAsSimpleTypesResponse(soap, _p); } return _p; }

inline struct ns__echoStructAsSimpleTypesResponse * soap_new_set_ns__echoStructAsSimpleTypesResponse(struct soap *soap, char *_outputString, long *_outputInteger, float *_outputFloat) { struct ns__echoStructAsSimpleTypesResponse *_p = soap_instantiate_ns__echoStructAsSimpleTypesResponse(soap, -1, NULL, NULL, NULL); if (_p) { soap_default_ns__echoStructAsSimpleTypesResponse(soap, _p); _p->_outputString = _outputString; _p->_outputInteger = _outputInteger; _p->_outputFloat = _outputFloat; } return _p; }

inline void soap_delete_ns__echoStructAsSimpleTypesResponse(struct soap *soap, struct ns__echoStructAsSimpleTypesResponse *p) { soap_delete(soap, p); }

SOAP_FMAC3 void SOAP_FMAC4 soap_copy_ns__echoStructAsSimpleTypesResponse(struct soap*, int, int, void*, size_t, const void*, size_t);

#ifndef SOAP_TYPE_ns__echoBoolean
#define SOAP_TYPE_ns__echoBoolean (88)
#endif
SOAP_FMAC3 void SOAP_FMAC4 soap_default_ns__echoBoolean(struct soap*, struct ns__echoBoolean *);
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_ns__echoBoolean(struct soap*, const struct ns__echoBoolean *);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_ns__echoBoolean(struct soap*, const char*, int, const struct ns__echoBoolean *, const char*);
SOAP_FMAC3 struct ns__echoBoolean * SOAP_FMAC4 soap_in_ns__echoBoolean(struct soap*, const char*, struct ns__echoBoolean *, const char*);

SOAP_FMAC3 int SOAP_FMAC4 soap_put_ns__echoBoolean(struct soap*, const struct ns__echoBoolean *, const char*, const char*);

#ifndef soap_write_ns__echoBoolean
#define soap_write_ns__echoBoolean(soap, data) ( soap_free_temp(soap), soap_begin_send(soap) || (soap_serialize_ns__echoBoolean(soap, data),0) || soap_put_ns__echoBoolean(soap, data, "ns:echoBoolean", NULL) || soap_end_send(soap), (soap)->error )
#endif

SOAP_FMAC3 struct ns__echoBoolean * SOAP_FMAC4 soap_get_ns__echoBoolean(struct soap*, struct ns__echoBoolean *, const char*, const char*);

#ifndef soap_read_ns__echoBoolean
#define soap_read_ns__echoBoolean(soap, data) ( soap_begin_recv(soap) || !soap_get_ns__echoBoolean(soap, data, NULL, NULL) || soap_end_recv(soap), (soap)->error )
#endif

SOAP_FMAC1 struct ns__echoBoolean * SOAP_FMAC2 soap_instantiate_ns__echoBoolean(struct soap*, int, const char*, const char*, size_t*);

inline struct ns__echoBoolean * soap_new_ns__echoBoolean(struct soap *soap, int n = -1) { return soap_instantiate_ns__echoBoolean(soap, n, NULL, NULL, NULL); }

inline struct ns__echoBoolean * soap_new_req_ns__echoBoolean(struct soap *soap, bool inputBoolean) { struct ns__echoBoolean *_p = soap_instantiate_ns__echoBoolean(soap, -1, NULL, NULL, NULL); if (_p) { soap_default_ns__echoBoolean(soap, _p); _p->inputBoolean = inputBoolean; } return _p; }

inline struct ns__echoBoolean * soap_new_set_ns__echoBoolean(struct soap *soap, bool inputBoolean) { struct ns__echoBoolean *_p = soap_instantiate_ns__echoBoolean(soap, -1, NULL, NULL, NULL); if (_p) { soap_default_ns__echoBoolean(soap, _p); _p->inputBoolean = inputBoolean; } return _p; }

inline void soap_delete_ns__echoBoolean(struct soap *soap, struct ns__echoBoolean *p) { soap_delete(soap, p); }

SOAP_FMAC3 void SOAP_FMAC4 soap_copy_ns__echoBoolean(struct soap*, int, int, void*, size_t, const void*, size_t);

#ifndef SOAP_TYPE_ns__echoBooleanResponse
#define SOAP_TYPE_ns__echoBooleanResponse (87)
#endif
SOAP_FMAC3 void SOAP_FMAC4 soap_default_ns__echoBooleanResponse(struct soap*, struct ns__echoBooleanResponse *);
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_ns__echoBooleanResponse(struct soap*, const struct ns__echoBooleanResponse *);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_ns__echoBooleanResponse(struct soap*, const char*, int, const struct ns__echoBooleanResponse *, const char*);
SOAP_FMAC3 struct ns__echoBooleanResponse * SOAP_FMAC4 soap_in_ns__echoBooleanResponse(struct soap*, const char*, struct ns__echoBooleanResponse *, const char*);

SOAP_FMAC3 int SOAP_FMAC4 soap_put_ns__echoBooleanResponse(struct soap*, const struct ns__echoBooleanResponse *, const char*, const char*);

#ifndef soap_write_ns__echoBooleanResponse
#define soap_write_ns__echoBooleanResponse(soap, data) ( soap_free_temp(soap), soap_begin_send(soap) || (soap_serialize_ns__echoBooleanResponse(soap, data),0) || soap_put_ns__echoBooleanResponse(soap, data, "ns:echoBooleanResponse", NULL) || soap_end_send(soap), (soap)->error )
#endif

SOAP_FMAC3 struct ns__echoBooleanResponse * SOAP_FMAC4 soap_get_ns__echoBooleanResponse(struct soap*, struct ns__echoBooleanResponse *, const char*, const char*);

#ifndef soap_read_ns__echoBooleanResponse
#define soap_read_ns__echoBooleanResponse(soap, data) ( soap_begin_recv(soap) || !soap_get_ns__echoBooleanResponse(soap, data, NULL, NULL) || soap_end_recv(soap), (soap)->error )
#endif

SOAP_FMAC1 struct ns__echoBooleanResponse * SOAP_FMAC2 soap_instantiate_ns__echoBooleanResponse(struct soap*, int, const char*, const char*, size_t*);

inline struct ns__echoBooleanResponse * soap_new_ns__echoBooleanResponse(struct soap *soap, int n = -1) { return soap_instantiate_ns__echoBooleanResponse(soap, n, NULL, NULL, NULL); }

inline struct ns__echoBooleanResponse * soap_new_req_ns__echoBooleanResponse(struct soap *soap, bool _return) { struct ns__echoBooleanResponse *_p = soap_instantiate_ns__echoBooleanResponse(soap, -1, NULL, NULL, NULL); if (_p) { soap_default_ns__echoBooleanResponse(soap, _p); _p->_return = _return; } return _p; }

inline struct ns__echoBooleanResponse * soap_new_set_ns__echoBooleanResponse(struct soap *soap, bool _return) { struct ns__echoBooleanResponse *_p = soap_instantiate_ns__echoBooleanResponse(soap, -1, NULL, NULL, NULL); if (_p) { soap_default_ns__echoBooleanResponse(soap, _p); _p->_return = _return; } return _p; }

inline void soap_delete_ns__echoBooleanResponse(struct soap *soap, struct ns__echoBooleanResponse *p) { soap_delete(soap, p); }

SOAP_FMAC3 void SOAP_FMAC4 soap_copy_ns__echoBooleanResponse(struct soap*, int, int, void*, size_t, const void*, size_t);

#ifndef SOAP_TYPE_ns__echoDecimal
#define SOAP_TYPE_ns__echoDecimal (82)
#endif
SOAP_FMAC3 void SOAP_FMAC4 soap_default_ns__echoDecimal(struct soap*, struct ns__echoDecimal *);
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_ns__echoDecimal(struct soap*, const struct ns__echoDecimal *);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_ns__echoDecimal(struct soap*, const char*, int, const struct ns__echoDecimal *, const char*);
SOAP_FMAC3 struct ns__echoDecimal * SOAP_FMAC4 soap_in_ns__echoDecimal(struct soap*, const char*, struct ns__echoDecimal *, const char*);

SOAP_FMAC3 int SOAP_FMAC4 soap_put_ns__echoDecimal(struct soap*, const struct ns__echoDecimal *, const char*, const char*);

#ifndef soap_write_ns__echoDecimal
#define soap_write_ns__echoDecimal(soap, data) ( soap_free_temp(soap), soap_begin_send(soap) || (soap_serialize_ns__echoDecimal(soap, data),0) || soap_put_ns__echoDecimal(soap, data, "ns:echoDecimal", NULL) || soap_end_send(soap), (soap)->error )
#endif

SOAP_FMAC3 struct ns__echoDecimal * SOAP_FMAC4 soap_get_ns__echoDecimal(struct soap*, struct ns__echoDecimal *, const char*, const char*);

#ifndef soap_read_ns__echoDecimal
#define soap_read_ns__echoDecimal(soap, data) ( soap_begin_recv(soap) || !soap_get_ns__echoDecimal(soap, data, NULL, NULL) || soap_end_recv(soap), (soap)->error )
#endif

SOAP_FMAC1 struct ns__echoDecimal * SOAP_FMAC2 soap_instantiate_ns__echoDecimal(struct soap*, int, const char*, const char*, size_t*);

inline struct ns__echoDecimal * soap_new_ns__echoDecimal(struct soap *soap, int n = -1) { return soap_instantiate_ns__echoDecimal(soap, n, NULL, NULL, NULL); }

inline struct ns__echoDecimal * soap_new_req_ns__echoDecimal(struct soap *soap) { struct ns__echoDecimal *_p = soap_instantiate_ns__echoDecimal(soap, -1, NULL, NULL, NULL); if (_p) { soap_default_ns__echoDecimal(soap, _p); } return _p; }

inline struct ns__echoDecimal * soap_new_set_ns__echoDecimal(struct soap *soap, char *inputDecimal) { struct ns__echoDecimal *_p = soap_instantiate_ns__echoDecimal(soap, -1, NULL, NULL, NULL); if (_p) { soap_default_ns__echoDecimal(soap, _p); _p->inputDecimal = inputDecimal; } return _p; }

inline void soap_delete_ns__echoDecimal(struct soap *soap, struct ns__echoDecimal *p) { soap_delete(soap, p); }

SOAP_FMAC3 void SOAP_FMAC4 soap_copy_ns__echoDecimal(struct soap*, int, int, void*, size_t, const void*, size_t);

#ifndef SOAP_TYPE_ns__echoDecimalResponse
#define SOAP_TYPE_ns__echoDecimalResponse (81)
#endif
SOAP_FMAC3 void SOAP_FMAC4 soap_default_ns__echoDecimalResponse(struct soap*, struct ns__echoDecimalResponse *);
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_ns__echoDecimalResponse(struct soap*, const struct ns__echoDecimalResponse *);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_ns__echoDecimalResponse(struct soap*, const char*, int, const struct ns__echoDecimalResponse *, const char*);
SOAP_FMAC3 struct ns__echoDecimalResponse * SOAP_FMAC4 soap_in_ns__echoDecimalResponse(struct soap*, const char*, struct ns__echoDecimalResponse *, const char*);

SOAP_FMAC3 int SOAP_FMAC4 soap_put_ns__echoDecimalResponse(struct soap*, const struct ns__echoDecimalResponse *, const char*, const char*);

#ifndef soap_write_ns__echoDecimalResponse
#define soap_write_ns__echoDecimalResponse(soap, data) ( soap_free_temp(soap), soap_begin_send(soap) || (soap_serialize_ns__echoDecimalResponse(soap, data),0) || soap_put_ns__echoDecimalResponse(soap, data, "ns:echoDecimalResponse", NULL) || soap_end_send(soap), (soap)->error )
#endif

SOAP_FMAC3 struct ns__echoDecimalResponse * SOAP_FMAC4 soap_get_ns__echoDecimalResponse(struct soap*, struct ns__echoDecimalResponse *, const char*, const char*);

#ifndef soap_read_ns__echoDecimalResponse
#define soap_read_ns__echoDecimalResponse(soap, data) ( soap_begin_recv(soap) || !soap_get_ns__echoDecimalResponse(soap, data, NULL, NULL) || soap_end_recv(soap), (soap)->error )
#endif

SOAP_FMAC1 struct ns__echoDecimalResponse * SOAP_FMAC2 soap_instantiate_ns__echoDecimalResponse(struct soap*, int, const char*, const char*, size_t*);

inline struct ns__echoDecimalResponse * soap_new_ns__echoDecimalResponse(struct soap *soap, int n = -1) { return soap_instantiate_ns__echoDecimalResponse(soap, n, NULL, NULL, NULL); }

inline struct ns__echoDecimalResponse * soap_new_req_ns__echoDecimalResponse(struct soap *soap, char *_return) { struct ns__echoDecimalResponse *_p = soap_instantiate_ns__echoDecimalResponse(soap, -1, NULL, NULL, NULL); if (_p) { soap_default_ns__echoDecimalResponse(soap, _p); _p->_return = _return; } return _p; }

inline struct ns__echoDecimalResponse * soap_new_set_ns__echoDecimalResponse(struct soap *soap, char *_return) { struct ns__echoDecimalResponse *_p = soap_instantiate_ns__echoDecimalResponse(soap, -1, NULL, NULL, NULL); if (_p) { soap_default_ns__echoDecimalResponse(soap, _p); _p->_return = _return; } return _p; }

inline void soap_delete_ns__echoDecimalResponse(struct soap *soap, struct ns__echoDecimalResponse *p) { soap_delete(soap, p); }

SOAP_FMAC3 void SOAP_FMAC4 soap_copy_ns__echoDecimalResponse(struct soap*, int, int, void*, size_t, const void*, size_t);

#ifndef SOAP_TYPE_ns__echoHexBinary
#define SOAP_TYPE_ns__echoHexBinary (77)
#endif
SOAP_FMAC3 void SOAP_FMAC4 soap_default_ns__echoHexBinary(struct soap*, struct ns__echoHexBinary *);
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_ns__echoHexBinary(struct soap*, const struct ns__echoHexBinary *);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_ns__echoHexBinary(struct soap*, const char*, int, const struct ns__echoHexBinary *, const char*);
SOAP_FMAC3 struct ns__echoHexBinary * SOAP_FMAC4 soap_in_ns__echoHexBinary(struct soap*, const char*, struct ns__echoHexBinary *, const char*);

SOAP_FMAC3 int SOAP_FMAC4 soap_put_ns__echoHexBinary(struct soap*, const struct ns__echoHexBinary *, const char*, const char*);

#ifndef soap_write_ns__echoHexBinary
#define soap_write_ns__echoHexBinary(soap, data) ( soap_free_temp(soap), soap_begin_send(soap) || (soap_serialize_ns__echoHexBinary(soap, data),0) || soap_put_ns__echoHexBinary(soap, data, "ns:echoHexBinary", NULL) || soap_end_send(soap), (soap)->error )
#endif

SOAP_FMAC3 struct ns__echoHexBinary * SOAP_FMAC4 soap_get_ns__echoHexBinary(struct soap*, struct ns__echoHexBinary *, const char*, const char*);

#ifndef soap_read_ns__echoHexBinary
#define soap_read_ns__echoHexBinary(soap, data) ( soap_begin_recv(soap) || !soap_get_ns__echoHexBinary(soap, data, NULL, NULL) || soap_end_recv(soap), (soap)->error )
#endif

SOAP_FMAC1 struct ns__echoHexBinary * SOAP_FMAC2 soap_instantiate_ns__echoHexBinary(struct soap*, int, const char*, const char*, size_t*);

inline struct ns__echoHexBinary * soap_new_ns__echoHexBinary(struct soap *soap, int n = -1) { return soap_instantiate_ns__echoHexBinary(soap, n, NULL, NULL, NULL); }

inline struct ns__echoHexBinary * soap_new_req_ns__echoHexBinary(struct soap *soap, struct xsd__hexBinary& inputHexBinary) { struct ns__echoHexBinary *_p = soap_instantiate_ns__echoHexBinary(soap, -1, NULL, NULL, NULL); if (_p) { soap_default_ns__echoHexBinary(soap, _p); _p->inputHexBinary = inputHexBinary; } return _p; }

inline struct ns__echoHexBinary * soap_new_set_ns__echoHexBinary(struct soap *soap, struct xsd__hexBinary& inputHexBinary) { struct ns__echoHexBinary *_p = soap_instantiate_ns__echoHexBinary(soap, -1, NULL, NULL, NULL); if (_p) { soap_default_ns__echoHexBinary(soap, _p); _p->inputHexBinary = inputHexBinary; } return _p; }

inline void soap_delete_ns__echoHexBinary(struct soap *soap, struct ns__echoHexBinary *p) { soap_delete(soap, p); }

SOAP_FMAC3 void SOAP_FMAC4 soap_copy_ns__echoHexBinary(struct soap*, int, int, void*, size_t, const void*, size_t);

#ifndef SOAP_TYPE_ns__echoHexBinaryResponse
#define SOAP_TYPE_ns__echoHexBinaryResponse (76)
#endif
SOAP_FMAC3 void SOAP_FMAC4 soap_default_ns__echoHexBinaryResponse(struct soap*, struct ns__echoHexBinaryResponse *);
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_ns__echoHexBinaryResponse(struct soap*, const struct ns__echoHexBinaryResponse *);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_ns__echoHexBinaryResponse(struct soap*, const char*, int, const struct ns__echoHexBinaryResponse *, const char*);
SOAP_FMAC3 struct ns__echoHexBinaryResponse * SOAP_FMAC4 soap_in_ns__echoHexBinaryResponse(struct soap*, const char*, struct ns__echoHexBinaryResponse *, const char*);

SOAP_FMAC3 int SOAP_FMAC4 soap_put_ns__echoHexBinaryResponse(struct soap*, const struct ns__echoHexBinaryResponse *, const char*, const char*);

#ifndef soap_write_ns__echoHexBinaryResponse
#define soap_write_ns__echoHexBinaryResponse(soap, data) ( soap_free_temp(soap), soap_begin_send(soap) || (soap_serialize_ns__echoHexBinaryResponse(soap, data),0) || soap_put_ns__echoHexBinaryResponse(soap, data, "ns:echoHexBinaryResponse", NULL) || soap_end_send(soap), (soap)->error )
#endif

SOAP_FMAC3 struct ns__echoHexBinaryResponse * SOAP_FMAC4 soap_get_ns__echoHexBinaryResponse(struct soap*, struct ns__echoHexBinaryResponse *, const char*, const char*);

#ifndef soap_read_ns__echoHexBinaryResponse
#define soap_read_ns__echoHexBinaryResponse(soap, data) ( soap_begin_recv(soap) || !soap_get_ns__echoHexBinaryResponse(soap, data, NULL, NULL) || soap_end_recv(soap), (soap)->error )
#endif

SOAP_FMAC1 struct ns__echoHexBinaryResponse * SOAP_FMAC2 soap_instantiate_ns__echoHexBinaryResponse(struct soap*, int, const char*, const char*, size_t*);

inline struct ns__echoHexBinaryResponse * soap_new_ns__echoHexBinaryResponse(struct soap *soap, int n = -1) { return soap_instantiate_ns__echoHexBinaryResponse(soap, n, NULL, NULL, NULL); }

inline struct ns__echoHexBinaryResponse * soap_new_req_ns__echoHexBinaryResponse(struct soap *soap, struct xsd__hexBinary& _return) { struct ns__echoHexBinaryResponse *_p = soap_instantiate_ns__echoHexBinaryResponse(soap, -1, NULL, NULL, NULL); if (_p) { soap_default_ns__echoHexBinaryResponse(soap, _p); _p->_return = _return; } return _p; }

inline struct ns__echoHexBinaryResponse * soap_new_set_ns__echoHexBinaryResponse(struct soap *soap, struct xsd__hexBinary& _return) { struct ns__echoHexBinaryResponse *_p = soap_instantiate_ns__echoHexBinaryResponse(soap, -1, NULL, NULL, NULL); if (_p) { soap_default_ns__echoHexBinaryResponse(soap, _p); _p->_return = _return; } return _p; }

inline void soap_delete_ns__echoHexBinaryResponse(struct soap *soap, struct ns__echoHexBinaryResponse *p) { soap_delete(soap, p); }

SOAP_FMAC3 void SOAP_FMAC4 soap_copy_ns__echoHexBinaryResponse(struct soap*, int, int, void*, size_t, const void*, size_t);

#ifndef SOAP_TYPE_xsd__hexBinary
#define SOAP_TYPE_xsd__hexBinary (73)
#endif
SOAP_FMAC3 void SOAP_FMAC4 soap_default_xsd__hexBinary(struct soap*, struct xsd__hexBinary *);
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_xsd__hexBinary(struct soap*, struct xsd__hexBinary const*);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_xsd__hexBinary(struct soap*, const char*, int, const struct xsd__hexBinary *, const char*);
SOAP_FMAC3 struct xsd__hexBinary * SOAP_FMAC4 soap_in_xsd__hexBinary(struct soap*, const char*, struct xsd__hexBinary *, const char*);

SOAP_FMAC3 int SOAP_FMAC4 soap_put_xsd__hexBinary(struct soap*, const struct xsd__hexBinary *, const char*, const char*);

#ifndef soap_write_xsd__hexBinary
#define soap_write_xsd__hexBinary(soap, data) ( soap_free_temp(soap), soap_begin_send(soap) || (soap_serialize_xsd__hexBinary(soap, data),0) || soap_put_xsd__hexBinary(soap, data, "xsd:hexBinary", NULL) || soap_end_send(soap), (soap)->error )
#endif

SOAP_FMAC3 struct xsd__hexBinary * SOAP_FMAC4 soap_get_xsd__hexBinary(struct soap*, struct xsd__hexBinary *, const char*, const char*);

#ifndef soap_read_xsd__hexBinary
#define soap_read_xsd__hexBinary(soap, data) ( soap_begin_recv(soap) || !soap_get_xsd__hexBinary(soap, data, NULL, NULL) || soap_end_recv(soap), (soap)->error )
#endif

SOAP_FMAC1 struct xsd__hexBinary * SOAP_FMAC2 soap_instantiate_xsd__hexBinary(struct soap*, int, const char*, const char*, size_t*);

inline struct xsd__hexBinary * soap_new_xsd__hexBinary(struct soap *soap, int n = -1) { return soap_instantiate_xsd__hexBinary(soap, n, NULL, NULL, NULL); }

inline struct xsd__hexBinary * soap_new_req_xsd__hexBinary(struct soap *soap) { struct xsd__hexBinary *_p = soap_instantiate_xsd__hexBinary(soap, -1, NULL, NULL, NULL); if (_p) { soap_default_xsd__hexBinary(soap, _p); } return _p; }

inline struct xsd__hexBinary * soap_new_set_xsd__hexBinary(struct soap *soap, unsigned char *__ptr, int __size) { struct xsd__hexBinary *_p = soap_instantiate_xsd__hexBinary(soap, -1, NULL, NULL, NULL); if (_p) { soap_default_xsd__hexBinary(soap, _p); _p->__ptr = __ptr; _p->__size = __size; } return _p; }

inline void soap_delete_xsd__hexBinary(struct soap *soap, struct xsd__hexBinary *p) { soap_delete(soap, p); }

SOAP_FMAC3 void SOAP_FMAC4 soap_copy_xsd__hexBinary(struct soap*, int, int, void*, size_t, const void*, size_t);

#ifndef SOAP_TYPE_ns__echoDate
#define SOAP_TYPE_ns__echoDate (72)
#endif
SOAP_FMAC3 void SOAP_FMAC4 soap_default_ns__echoDate(struct soap*, struct ns__echoDate *);
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_ns__echoDate(struct soap*, const struct ns__echoDate *);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_ns__echoDate(struct soap*, const char*, int, const struct ns__echoDate *, const char*);
SOAP_FMAC3 struct ns__echoDate * SOAP_FMAC4 soap_in_ns__echoDate(struct soap*, const char*, struct ns__echoDate *, const char*);

SOAP_FMAC3 int SOAP_FMAC4 soap_put_ns__echoDate(struct soap*, const struct ns__echoDate *, const char*, const char*);

#ifndef soap_write_ns__echoDate
#define soap_write_ns__echoDate(soap, data) ( soap_free_temp(soap), soap_begin_send(soap) || (soap_serialize_ns__echoDate(soap, data),0) || soap_put_ns__echoDate(soap, data, "ns:echoDate", NULL) || soap_end_send(soap), (soap)->error )
#endif

SOAP_FMAC3 struct ns__echoDate * SOAP_FMAC4 soap_get_ns__echoDate(struct soap*, struct ns__echoDate *, const char*, const char*);

#ifndef soap_read_ns__echoDate
#define soap_read_ns__echoDate(soap, data) ( soap_begin_recv(soap) || !soap_get_ns__echoDate(soap, data, NULL, NULL) || soap_end_recv(soap), (soap)->error )
#endif

SOAP_FMAC1 struct ns__echoDate * SOAP_FMAC2 soap_instantiate_ns__echoDate(struct soap*, int, const char*, const char*, size_t*);

inline struct ns__echoDate * soap_new_ns__echoDate(struct soap *soap, int n = -1) { return soap_instantiate_ns__echoDate(soap, n, NULL, NULL, NULL); }

inline struct ns__echoDate * soap_new_req_ns__echoDate(struct soap *soap) { struct ns__echoDate *_p = soap_instantiate_ns__echoDate(soap, -1, NULL, NULL, NULL); if (_p) { soap_default_ns__echoDate(soap, _p); } return _p; }

inline struct ns__echoDate * soap_new_set_ns__echoDate(struct soap *soap, char *inputDate) { struct ns__echoDate *_p = soap_instantiate_ns__echoDate(soap, -1, NULL, NULL, NULL); if (_p) { soap_default_ns__echoDate(soap, _p); _p->inputDate = inputDate; } return _p; }

inline void soap_delete_ns__echoDate(struct soap *soap, struct ns__echoDate *p) { soap_delete(soap, p); }

SOAP_FMAC3 void SOAP_FMAC4 soap_copy_ns__echoDate(struct soap*, int, int, void*, size_t, const void*, size_t);

#ifndef SOAP_TYPE_ns__echoDateResponse
#define SOAP_TYPE_ns__echoDateResponse (71)
#endif
SOAP_FMAC3 void SOAP_FMAC4 soap_default_ns__echoDateResponse(struct soap*, struct ns__echoDateResponse *);
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_ns__echoDateResponse(struct soap*, const struct ns__echoDateResponse *);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_ns__echoDateResponse(struct soap*, const char*, int, const struct ns__echoDateResponse *, const char*);
SOAP_FMAC3 struct ns__echoDateResponse * SOAP_FMAC4 soap_in_ns__echoDateResponse(struct soap*, const char*, struct ns__echoDateResponse *, const char*);

SOAP_FMAC3 int SOAP_FMAC4 soap_put_ns__echoDateResponse(struct soap*, const struct ns__echoDateResponse *, const char*, const char*);

#ifndef soap_write_ns__echoDateResponse
#define soap_write_ns__echoDateResponse(soap, data) ( soap_free_temp(soap), soap_begin_send(soap) || (soap_serialize_ns__echoDateResponse(soap, data),0) || soap_put_ns__echoDateResponse(soap, data, "ns:echoDateResponse", NULL) || soap_end_send(soap), (soap)->error )
#endif

SOAP_FMAC3 struct ns__echoDateResponse * SOAP_FMAC4 soap_get_ns__echoDateResponse(struct soap*, struct ns__echoDateResponse *, const char*, const char*);

#ifndef soap_read_ns__echoDateResponse
#define soap_read_ns__echoDateResponse(soap, data) ( soap_begin_recv(soap) || !soap_get_ns__echoDateResponse(soap, data, NULL, NULL) || soap_end_recv(soap), (soap)->error )
#endif

SOAP_FMAC1 struct ns__echoDateResponse * SOAP_FMAC2 soap_instantiate_ns__echoDateResponse(struct soap*, int, const char*, const char*, size_t*);

inline struct ns__echoDateResponse * soap_new_ns__echoDateResponse(struct soap *soap, int n = -1) { return soap_instantiate_ns__echoDateResponse(soap, n, NULL, NULL, NULL); }

inline struct ns__echoDateResponse * soap_new_req_ns__echoDateResponse(struct soap *soap, char *_return) { struct ns__echoDateResponse *_p = soap_instantiate_ns__echoDateResponse(soap, -1, NULL, NULL, NULL); if (_p) { soap_default_ns__echoDateResponse(soap, _p); _p->_return = _return; } return _p; }

inline struct ns__echoDateResponse * soap_new_set_ns__echoDateResponse(struct soap *soap, char *_return) { struct ns__echoDateResponse *_p = soap_instantiate_ns__echoDateResponse(soap, -1, NULL, NULL, NULL); if (_p) { soap_default_ns__echoDateResponse(soap, _p); _p->_return = _return; } return _p; }

inline void soap_delete_ns__echoDateResponse(struct soap *soap, struct ns__echoDateResponse *p) { soap_delete(soap, p); }

SOAP_FMAC3 void SOAP_FMAC4 soap_copy_ns__echoDateResponse(struct soap*, int, int, void*, size_t, const void*, size_t);

#ifndef SOAP_TYPE_ns__echoBase64
#define SOAP_TYPE_ns__echoBase64 (67)
#endif
SOAP_FMAC3 void SOAP_FMAC4 soap_default_ns__echoBase64(struct soap*, struct ns__echoBase64 *);
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_ns__echoBase64(struct soap*, const struct ns__echoBase64 *);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_ns__echoBase64(struct soap*, const char*, int, const struct ns__echoBase64 *, const char*);
SOAP_FMAC3 struct ns__echoBase64 * SOAP_FMAC4 soap_in_ns__echoBase64(struct soap*, const char*, struct ns__echoBase64 *, const char*);

SOAP_FMAC3 int SOAP_FMAC4 soap_put_ns__echoBase64(struct soap*, const struct ns__echoBase64 *, const char*, const char*);

#ifndef soap_write_ns__echoBase64
#define soap_write_ns__echoBase64(soap, data) ( soap_free_temp(soap), soap_begin_send(soap) || (soap_serialize_ns__echoBase64(soap, data),0) || soap_put_ns__echoBase64(soap, data, "ns:echoBase64", NULL) || soap_end_send(soap), (soap)->error )
#endif

SOAP_FMAC3 struct ns__echoBase64 * SOAP_FMAC4 soap_get_ns__echoBase64(struct soap*, struct ns__echoBase64 *, const char*, const char*);

#ifndef soap_read_ns__echoBase64
#define soap_read_ns__echoBase64(soap, data) ( soap_begin_recv(soap) || !soap_get_ns__echoBase64(soap, data, NULL, NULL) || soap_end_recv(soap), (soap)->error )
#endif

SOAP_FMAC1 struct ns__echoBase64 * SOAP_FMAC2 soap_instantiate_ns__echoBase64(struct soap*, int, const char*, const char*, size_t*);

inline struct ns__echoBase64 * soap_new_ns__echoBase64(struct soap *soap, int n = -1) { return soap_instantiate_ns__echoBase64(soap, n, NULL, NULL, NULL); }

inline struct ns__echoBase64 * soap_new_req_ns__echoBase64(struct soap *soap, struct xsd__base64Binary& inputBase64) { struct ns__echoBase64 *_p = soap_instantiate_ns__echoBase64(soap, -1, NULL, NULL, NULL); if (_p) { soap_default_ns__echoBase64(soap, _p); _p->inputBase64 = inputBase64; } return _p; }

inline struct ns__echoBase64 * soap_new_set_ns__echoBase64(struct soap *soap, struct xsd__base64Binary& inputBase64) { struct ns__echoBase64 *_p = soap_instantiate_ns__echoBase64(soap, -1, NULL, NULL, NULL); if (_p) { soap_default_ns__echoBase64(soap, _p); _p->inputBase64 = inputBase64; } return _p; }

inline void soap_delete_ns__echoBase64(struct soap *soap, struct ns__echoBase64 *p) { soap_delete(soap, p); }

SOAP_FMAC3 void SOAP_FMAC4 soap_copy_ns__echoBase64(struct soap*, int, int, void*, size_t, const void*, size_t);

#ifndef SOAP_TYPE_ns__echoBase64Response
#define SOAP_TYPE_ns__echoBase64Response (66)
#endif
SOAP_FMAC3 void SOAP_FMAC4 soap_default_ns__echoBase64Response(struct soap*, struct ns__echoBase64Response *);
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_ns__echoBase64Response(struct soap*, const struct ns__echoBase64Response *);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_ns__echoBase64Response(struct soap*, const char*, int, const struct ns__echoBase64Response *, const char*);
SOAP_FMAC3 struct ns__echoBase64Response * SOAP_FMAC4 soap_in_ns__echoBase64Response(struct soap*, const char*, struct ns__echoBase64Response *, const char*);

SOAP_FMAC3 int SOAP_FMAC4 soap_put_ns__echoBase64Response(struct soap*, const struct ns__echoBase64Response *, const char*, const char*);

#ifndef soap_write_ns__echoBase64Response
#define soap_write_ns__echoBase64Response(soap, data) ( soap_free_temp(soap), soap_begin_send(soap) || (soap_serialize_ns__echoBase64Response(soap, data),0) || soap_put_ns__echoBase64Response(soap, data, "ns:echoBase64Response", NULL) || soap_end_send(soap), (soap)->error )
#endif

SOAP_FMAC3 struct ns__echoBase64Response * SOAP_FMAC4 soap_get_ns__echoBase64Response(struct soap*, struct ns__echoBase64Response *, const char*, const char*);

#ifndef soap_read_ns__echoBase64Response
#define soap_read_ns__echoBase64Response(soap, data) ( soap_begin_recv(soap) || !soap_get_ns__echoBase64Response(soap, data, NULL, NULL) || soap_end_recv(soap), (soap)->error )
#endif

SOAP_FMAC1 struct ns__echoBase64Response * SOAP_FMAC2 soap_instantiate_ns__echoBase64Response(struct soap*, int, const char*, const char*, size_t*);

inline struct ns__echoBase64Response * soap_new_ns__echoBase64Response(struct soap *soap, int n = -1) { return soap_instantiate_ns__echoBase64Response(soap, n, NULL, NULL, NULL); }

inline struct ns__echoBase64Response * soap_new_req_ns__echoBase64Response(struct soap *soap, struct xsd__base64Binary& _return) { struct ns__echoBase64Response *_p = soap_instantiate_ns__echoBase64Response(soap, -1, NULL, NULL, NULL); if (_p) { soap_default_ns__echoBase64Response(soap, _p); _p->_return = _return; } return _p; }

inline struct ns__echoBase64Response * soap_new_set_ns__echoBase64Response(struct soap *soap, struct xsd__base64Binary& _return) { struct ns__echoBase64Response *_p = soap_instantiate_ns__echoBase64Response(soap, -1, NULL, NULL, NULL); if (_p) { soap_default_ns__echoBase64Response(soap, _p); _p->_return = _return; } return _p; }

inline void soap_delete_ns__echoBase64Response(struct soap *soap, struct ns__echoBase64Response *p) { soap_delete(soap, p); }

SOAP_FMAC3 void SOAP_FMAC4 soap_copy_ns__echoBase64Response(struct soap*, int, int, void*, size_t, const void*, size_t);

#ifndef SOAP_TYPE_xsd__base64Binary
#define SOAP_TYPE_xsd__base64Binary (60)
#endif
SOAP_FMAC3 void SOAP_FMAC4 soap_default_xsd__base64Binary(struct soap*, struct xsd__base64Binary *);
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_xsd__base64Binary(struct soap*, struct xsd__base64Binary const*);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_xsd__base64Binary(struct soap*, const char*, int, const struct xsd__base64Binary *, const char*);
SOAP_FMAC3 struct xsd__base64Binary * SOAP_FMAC4 soap_in_xsd__base64Binary(struct soap*, const char*, struct xsd__base64Binary *, const char*);

SOAP_FMAC3 int SOAP_FMAC4 soap_put_xsd__base64Binary(struct soap*, const struct xsd__base64Binary *, const char*, const char*);

#ifndef soap_write_xsd__base64Binary
#define soap_write_xsd__base64Binary(soap, data) ( soap_free_temp(soap), soap_begin_send(soap) || (soap_serialize_xsd__base64Binary(soap, data),0) || soap_put_xsd__base64Binary(soap, data, "xsd:base64Binary", NULL) || soap_end_send(soap), (soap)->error )
#endif

SOAP_FMAC3 struct xsd__base64Binary * SOAP_FMAC4 soap_get_xsd__base64Binary(struct soap*, struct xsd__base64Binary *, const char*, const char*);

#ifndef soap_read_xsd__base64Binary
#define soap_read_xsd__base64Binary(soap, data) ( soap_begin_recv(soap) || !soap_get_xsd__base64Binary(soap, data, NULL, NULL) || soap_end_recv(soap), (soap)->error )
#endif

SOAP_FMAC1 struct xsd__base64Binary * SOAP_FMAC2 soap_instantiate_xsd__base64Binary(struct soap*, int, const char*, const char*, size_t*);

inline struct xsd__base64Binary * soap_new_xsd__base64Binary(struct soap *soap, int n = -1) { return soap_instantiate_xsd__base64Binary(soap, n, NULL, NULL, NULL); }

inline struct xsd__base64Binary * soap_new_req_xsd__base64Binary(struct soap *soap) { struct xsd__base64Binary *_p = soap_instantiate_xsd__base64Binary(soap, -1, NULL, NULL, NULL); if (_p) { soap_default_xsd__base64Binary(soap, _p); } return _p; }

inline struct xsd__base64Binary * soap_new_set_xsd__base64Binary(struct soap *soap, unsigned char *__ptr, int __size) { struct xsd__base64Binary *_p = soap_instantiate_xsd__base64Binary(soap, -1, NULL, NULL, NULL); if (_p) { soap_default_xsd__base64Binary(soap, _p); _p->__ptr = __ptr; _p->__size = __size; } return _p; }

inline void soap_delete_xsd__base64Binary(struct soap *soap, struct xsd__base64Binary *p) { soap_delete(soap, p); }

SOAP_FMAC3 void SOAP_FMAC4 soap_copy_xsd__base64Binary(struct soap*, int, int, void*, size_t, const void*, size_t);

#ifndef SOAP_TYPE_ns__echoVoid
#define SOAP_TYPE_ns__echoVoid (59)
#endif
SOAP_FMAC3 void SOAP_FMAC4 soap_default_ns__echoVoid(struct soap*, struct ns__echoVoid *);
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_ns__echoVoid(struct soap*, const struct ns__echoVoid *);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_ns__echoVoid(struct soap*, const char*, int, const struct ns__echoVoid *, const char*);
SOAP_FMAC3 struct ns__echoVoid * SOAP_FMAC4 soap_in_ns__echoVoid(struct soap*, const char*, struct ns__echoVoid *, const char*);

SOAP_FMAC3 int SOAP_FMAC4 soap_put_ns__echoVoid(struct soap*, const struct ns__echoVoid *, const char*, const char*);

#ifndef soap_write_ns__echoVoid
#define soap_write_ns__echoVoid(soap, data) ( soap_free_temp(soap), soap_begin_send(soap) || (soap_serialize_ns__echoVoid(soap, data),0) || soap_put_ns__echoVoid(soap, data, "ns:echoVoid", NULL) || soap_end_send(soap), (soap)->error )
#endif

SOAP_FMAC3 struct ns__echoVoid * SOAP_FMAC4 soap_get_ns__echoVoid(struct soap*, struct ns__echoVoid *, const char*, const char*);

#ifndef soap_read_ns__echoVoid
#define soap_read_ns__echoVoid(soap, data) ( soap_begin_recv(soap) || !soap_get_ns__echoVoid(soap, data, NULL, NULL) || soap_end_recv(soap), (soap)->error )
#endif

SOAP_FMAC1 struct ns__echoVoid * SOAP_FMAC2 soap_instantiate_ns__echoVoid(struct soap*, int, const char*, const char*, size_t*);

inline struct ns__echoVoid * soap_new_ns__echoVoid(struct soap *soap, int n = -1) { return soap_instantiate_ns__echoVoid(soap, n, NULL, NULL, NULL); }

inline struct ns__echoVoid * soap_new_req_ns__echoVoid(struct soap *soap) { struct ns__echoVoid *_p = soap_instantiate_ns__echoVoid(soap, -1, NULL, NULL, NULL); if (_p) { soap_default_ns__echoVoid(soap, _p); } return _p; }

inline struct ns__echoVoid * soap_new_set_ns__echoVoid(struct soap *soap) { struct ns__echoVoid *_p = soap_instantiate_ns__echoVoid(soap, -1, NULL, NULL, NULL); if (_p) { soap_default_ns__echoVoid(soap, _p); } return _p; }

inline void soap_delete_ns__echoVoid(struct soap *soap, struct ns__echoVoid *p) { soap_delete(soap, p); }

SOAP_FMAC3 void SOAP_FMAC4 soap_copy_ns__echoVoid(struct soap*, int, int, void*, size_t, const void*, size_t);

#ifndef SOAP_TYPE_ns__echoVoidResponse
#define SOAP_TYPE_ns__echoVoidResponse (56)
#endif
SOAP_FMAC3 void SOAP_FMAC4 soap_default_ns__echoVoidResponse(struct soap*, struct ns__echoVoidResponse *);
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_ns__echoVoidResponse(struct soap*, const struct ns__echoVoidResponse *);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_ns__echoVoidResponse(struct soap*, const char*, int, const struct ns__echoVoidResponse *, const char*);
SOAP_FMAC3 struct ns__echoVoidResponse * SOAP_FMAC4 soap_in_ns__echoVoidResponse(struct soap*, const char*, struct ns__echoVoidResponse *, const char*);

SOAP_FMAC3 int SOAP_FMAC4 soap_put_ns__echoVoidResponse(struct soap*, const struct ns__echoVoidResponse *, const char*, const char*);

#ifndef soap_write_ns__echoVoidResponse
#define soap_write_ns__echoVoidResponse(soap, data) ( soap_free_temp(soap), soap_begin_send(soap) || (soap_serialize_ns__echoVoidResponse(soap, data),0) || soap_put_ns__echoVoidResponse(soap, data, "ns:echoVoidResponse", NULL) || soap_end_send(soap), (soap)->error )
#endif

SOAP_FMAC3 struct ns__echoVoidResponse * SOAP_FMAC4 soap_get_ns__echoVoidResponse(struct soap*, struct ns__echoVoidResponse *, const char*, const char*);

#ifndef soap_read_ns__echoVoidResponse
#define soap_read_ns__echoVoidResponse(soap, data) ( soap_begin_recv(soap) || !soap_get_ns__echoVoidResponse(soap, data, NULL, NULL) || soap_end_recv(soap), (soap)->error )
#endif

SOAP_FMAC1 struct ns__echoVoidResponse * SOAP_FMAC2 soap_instantiate_ns__echoVoidResponse(struct soap*, int, const char*, const char*, size_t*);

inline struct ns__echoVoidResponse * soap_new_ns__echoVoidResponse(struct soap *soap, int n = -1) { return soap_instantiate_ns__echoVoidResponse(soap, n, NULL, NULL, NULL); }

inline struct ns__echoVoidResponse * soap_new_req_ns__echoVoidResponse(struct soap *soap) { struct ns__echoVoidResponse *_p = soap_instantiate_ns__echoVoidResponse(soap, -1, NULL, NULL, NULL); if (_p) { soap_default_ns__echoVoidResponse(soap, _p); } return _p; }

inline struct ns__echoVoidResponse * soap_new_set_ns__echoVoidResponse(struct soap *soap) { struct ns__echoVoidResponse *_p = soap_instantiate_ns__echoVoidResponse(soap, -1, NULL, NULL, NULL); if (_p) { soap_default_ns__echoVoidResponse(soap, _p); } return _p; }

inline void soap_delete_ns__echoVoidResponse(struct soap *soap, struct ns__echoVoidResponse *p) { soap_delete(soap, p); }

SOAP_FMAC3 void SOAP_FMAC4 soap_copy_ns__echoVoidResponse(struct soap*, int, int, void*, size_t, const void*, size_t);

#ifndef SOAP_TYPE_ns__echoStructArray
#define SOAP_TYPE_ns__echoStructArray (55)
#endif
SOAP_FMAC3 void SOAP_FMAC4 soap_default_ns__echoStructArray(struct soap*, struct ns__echoStructArray *);
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_ns__echoStructArray(struct soap*, const struct ns__echoStructArray *);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_ns__echoStructArray(struct soap*, const char*, int, const struct ns__echoStructArray *, const char*);
SOAP_FMAC3 struct ns__echoStructArray * SOAP_FMAC4 soap_in_ns__echoStructArray(struct soap*, const char*, struct ns__echoStructArray *, const char*);

SOAP_FMAC3 int SOAP_FMAC4 soap_put_ns__echoStructArray(struct soap*, const struct ns__echoStructArray *, const char*, const char*);

#ifndef soap_write_ns__echoStructArray
#define soap_write_ns__echoStructArray(soap, data) ( soap_free_temp(soap), soap_begin_send(soap) || (soap_serialize_ns__echoStructArray(soap, data),0) || soap_put_ns__echoStructArray(soap, data, "ns:echoStructArray", NULL) || soap_end_send(soap), (soap)->error )
#endif

SOAP_FMAC3 struct ns__echoStructArray * SOAP_FMAC4 soap_get_ns__echoStructArray(struct soap*, struct ns__echoStructArray *, const char*, const char*);

#ifndef soap_read_ns__echoStructArray
#define soap_read_ns__echoStructArray(soap, data) ( soap_begin_recv(soap) || !soap_get_ns__echoStructArray(soap, data, NULL, NULL) || soap_end_recv(soap), (soap)->error )
#endif

SOAP_FMAC1 struct ns__echoStructArray * SOAP_FMAC2 soap_instantiate_ns__echoStructArray(struct soap*, int, const char*, const char*, size_t*);

inline struct ns__echoStructArray * soap_new_ns__echoStructArray(struct soap *soap, int n = -1) { return soap_instantiate_ns__echoStructArray(soap, n, NULL, NULL, NULL); }

inline struct ns__echoStructArray * soap_new_req_ns__echoStructArray(struct soap *soap, struct ArrayOfSOAPStruct& inputStructArray) { struct ns__echoStructArray *_p = soap_instantiate_ns__echoStructArray(soap, -1, NULL, NULL, NULL); if (_p) { soap_default_ns__echoStructArray(soap, _p); _p->inputStructArray = inputStructArray; } return _p; }

inline struct ns__echoStructArray * soap_new_set_ns__echoStructArray(struct soap *soap, struct ArrayOfSOAPStruct& inputStructArray) { struct ns__echoStructArray *_p = soap_instantiate_ns__echoStructArray(soap, -1, NULL, NULL, NULL); if (_p) { soap_default_ns__echoStructArray(soap, _p); _p->inputStructArray = inputStructArray; } return _p; }

inline void soap_delete_ns__echoStructArray(struct soap *soap, struct ns__echoStructArray *p) { soap_delete(soap, p); }

SOAP_FMAC3 void SOAP_FMAC4 soap_copy_ns__echoStructArray(struct soap*, int, int, void*, size_t, const void*, size_t);

#ifndef SOAP_TYPE_ns__echoStructArrayResponse
#define SOAP_TYPE_ns__echoStructArrayResponse (54)
#endif
SOAP_FMAC3 void SOAP_FMAC4 soap_default_ns__echoStructArrayResponse(struct soap*, struct ns__echoStructArrayResponse *);
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_ns__echoStructArrayResponse(struct soap*, const struct ns__echoStructArrayResponse *);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_ns__echoStructArrayResponse(struct soap*, const char*, int, const struct ns__echoStructArrayResponse *, const char*);
SOAP_FMAC3 struct ns__echoStructArrayResponse * SOAP_FMAC4 soap_in_ns__echoStructArrayResponse(struct soap*, const char*, struct ns__echoStructArrayResponse *, const char*);

SOAP_FMAC3 int SOAP_FMAC4 soap_put_ns__echoStructArrayResponse(struct soap*, const struct ns__echoStructArrayResponse *, const char*, const char*);

#ifndef soap_write_ns__echoStructArrayResponse
#define soap_write_ns__echoStructArrayResponse(soap, data) ( soap_free_temp(soap), soap_begin_send(soap) || (soap_serialize_ns__echoStructArrayResponse(soap, data),0) || soap_put_ns__echoStructArrayResponse(soap, data, "ns:echoStructArrayResponse", NULL) || soap_end_send(soap), (soap)->error )
#endif

SOAP_FMAC3 struct ns__echoStructArrayResponse * SOAP_FMAC4 soap_get_ns__echoStructArrayResponse(struct soap*, struct ns__echoStructArrayResponse *, const char*, const char*);

#ifndef soap_read_ns__echoStructArrayResponse
#define soap_read_ns__echoStructArrayResponse(soap, data) ( soap_begin_recv(soap) || !soap_get_ns__echoStructArrayResponse(soap, data, NULL, NULL) || soap_end_recv(soap), (soap)->error )
#endif

SOAP_FMAC1 struct ns__echoStructArrayResponse * SOAP_FMAC2 soap_instantiate_ns__echoStructArrayResponse(struct soap*, int, const char*, const char*, size_t*);

inline struct ns__echoStructArrayResponse * soap_new_ns__echoStructArrayResponse(struct soap *soap, int n = -1) { return soap_instantiate_ns__echoStructArrayResponse(soap, n, NULL, NULL, NULL); }

inline struct ns__echoStructArrayResponse * soap_new_req_ns__echoStructArrayResponse(struct soap *soap, struct ArrayOfSOAPStruct& _return) { struct ns__echoStructArrayResponse *_p = soap_instantiate_ns__echoStructArrayResponse(soap, -1, NULL, NULL, NULL); if (_p) { soap_default_ns__echoStructArrayResponse(soap, _p); _p->_return = _return; } return _p; }

inline struct ns__echoStructArrayResponse * soap_new_set_ns__echoStructArrayResponse(struct soap *soap, struct ArrayOfSOAPStruct& _return) { struct ns__echoStructArrayResponse *_p = soap_instantiate_ns__echoStructArrayResponse(soap, -1, NULL, NULL, NULL); if (_p) { soap_default_ns__echoStructArrayResponse(soap, _p); _p->_return = _return; } return _p; }

inline void soap_delete_ns__echoStructArrayResponse(struct soap *soap, struct ns__echoStructArrayResponse *p) { soap_delete(soap, p); }

SOAP_FMAC3 void SOAP_FMAC4 soap_copy_ns__echoStructArrayResponse(struct soap*, int, int, void*, size_t, const void*, size_t);

#ifndef SOAP_TYPE_ArrayOfSOAPStruct
#define SOAP_TYPE_ArrayOfSOAPStruct (49)
#endif
SOAP_FMAC3 void SOAP_FMAC4 soap_default_ArrayOfSOAPStruct(struct soap*, struct ArrayOfSOAPStruct *);
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_ArrayOfSOAPStruct(struct soap*, struct ArrayOfSOAPStruct const*);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_ArrayOfSOAPStruct(struct soap*, const char*, int, const struct ArrayOfSOAPStruct *, const char*);
SOAP_FMAC3 struct ArrayOfSOAPStruct * SOAP_FMAC4 soap_in_ArrayOfSOAPStruct(struct soap*, const char*, struct ArrayOfSOAPStruct *, const char*);

SOAP_FMAC3 int SOAP_FMAC4 soap_put_ArrayOfSOAPStruct(struct soap*, const struct ArrayOfSOAPStruct *, const char*, const char*);

#ifndef soap_write_ArrayOfSOAPStruct
#define soap_write_ArrayOfSOAPStruct(soap, data) ( soap_free_temp(soap), soap_begin_send(soap) || (soap_serialize_ArrayOfSOAPStruct(soap, data),0) || soap_put_ArrayOfSOAPStruct(soap, data, "SOAP-ENC:Array", NULL) || soap_end_send(soap), (soap)->error )
#endif

SOAP_FMAC3 struct ArrayOfSOAPStruct * SOAP_FMAC4 soap_get_ArrayOfSOAPStruct(struct soap*, struct ArrayOfSOAPStruct *, const char*, const char*);

#ifndef soap_read_ArrayOfSOAPStruct
#define soap_read_ArrayOfSOAPStruct(soap, data) ( soap_begin_recv(soap) || !soap_get_ArrayOfSOAPStruct(soap, data, NULL, NULL) || soap_end_recv(soap), (soap)->error )
#endif

SOAP_FMAC1 struct ArrayOfSOAPStruct * SOAP_FMAC2 soap_instantiate_ArrayOfSOAPStruct(struct soap*, int, const char*, const char*, size_t*);

inline struct ArrayOfSOAPStruct * soap_new_ArrayOfSOAPStruct(struct soap *soap, int n = -1) { return soap_instantiate_ArrayOfSOAPStruct(soap, n, NULL, NULL, NULL); }

inline struct ArrayOfSOAPStruct * soap_new_req_ArrayOfSOAPStruct(struct soap *soap) { struct ArrayOfSOAPStruct *_p = soap_instantiate_ArrayOfSOAPStruct(soap, -1, NULL, NULL, NULL); if (_p) { soap_default_ArrayOfSOAPStruct(soap, _p); } return _p; }

inline struct ArrayOfSOAPStruct * soap_new_set_ArrayOfSOAPStruct(struct soap *soap, struct s__SOAPStruct **__ptr, int __size, int __offset) { struct ArrayOfSOAPStruct *_p = soap_instantiate_ArrayOfSOAPStruct(soap, -1, NULL, NULL, NULL); if (_p) { soap_default_ArrayOfSOAPStruct(soap, _p); _p->__ptr = __ptr; _p->__size = __size; _p->__offset = __offset; } return _p; }

inline void soap_delete_ArrayOfSOAPStruct(struct soap *soap, struct ArrayOfSOAPStruct *p) { soap_delete(soap, p); }

SOAP_FMAC3 void SOAP_FMAC4 soap_copy_ArrayOfSOAPStruct(struct soap*, int, int, void*, size_t, const void*, size_t);

#ifndef SOAP_TYPE_ns__echoStruct
#define SOAP_TYPE_ns__echoStruct (48)
#endif
SOAP_FMAC3 void SOAP_FMAC4 soap_default_ns__echoStruct(struct soap*, struct ns__echoStruct *);
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_ns__echoStruct(struct soap*, const struct ns__echoStruct *);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_ns__echoStruct(struct soap*, const char*, int, const struct ns__echoStruct *, const char*);
SOAP_FMAC3 struct ns__echoStruct * SOAP_FMAC4 soap_in_ns__echoStruct(struct soap*, const char*, struct ns__echoStruct *, const char*);

SOAP_FMAC3 int SOAP_FMAC4 soap_put_ns__echoStruct(struct soap*, const struct ns__echoStruct *, const char*, const char*);

#ifndef soap_write_ns__echoStruct
#define soap_write_ns__echoStruct(soap, data) ( soap_free_temp(soap), soap_begin_send(soap) || (soap_serialize_ns__echoStruct(soap, data),0) || soap_put_ns__echoStruct(soap, data, "ns:echoStruct", NULL) || soap_end_send(soap), (soap)->error )
#endif

SOAP_FMAC3 struct ns__echoStruct * SOAP_FMAC4 soap_get_ns__echoStruct(struct soap*, struct ns__echoStruct *, const char*, const char*);

#ifndef soap_read_ns__echoStruct
#define soap_read_ns__echoStruct(soap, data) ( soap_begin_recv(soap) || !soap_get_ns__echoStruct(soap, data, NULL, NULL) || soap_end_recv(soap), (soap)->error )
#endif

SOAP_FMAC1 struct ns__echoStruct * SOAP_FMAC2 soap_instantiate_ns__echoStruct(struct soap*, int, const char*, const char*, size_t*);

inline struct ns__echoStruct * soap_new_ns__echoStruct(struct soap *soap, int n = -1) { return soap_instantiate_ns__echoStruct(soap, n, NULL, NULL, NULL); }

inline struct ns__echoStruct * soap_new_req_ns__echoStruct(struct soap *soap, struct s__SOAPStruct& _inputStruct) { struct ns__echoStruct *_p = soap_instantiate_ns__echoStruct(soap, -1, NULL, NULL, NULL); if (_p) { soap_default_ns__echoStruct(soap, _p); _p->_inputStruct = _inputStruct; } return _p; }

inline struct ns__echoStruct * soap_new_set_ns__echoStruct(struct soap *soap, struct s__SOAPStruct& _inputStruct) { struct ns__echoStruct *_p = soap_instantiate_ns__echoStruct(soap, -1, NULL, NULL, NULL); if (_p) { soap_default_ns__echoStruct(soap, _p); _p->_inputStruct = _inputStruct; } return _p; }

inline void soap_delete_ns__echoStruct(struct soap *soap, struct ns__echoStruct *p) { soap_delete(soap, p); }

SOAP_FMAC3 void SOAP_FMAC4 soap_copy_ns__echoStruct(struct soap*, int, int, void*, size_t, const void*, size_t);

#ifndef SOAP_TYPE_ns__echoStructResponse
#define SOAP_TYPE_ns__echoStructResponse (45)
#endif
SOAP_FMAC3 void SOAP_FMAC4 soap_default_ns__echoStructResponse(struct soap*, struct ns__echoStructResponse *);
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_ns__echoStructResponse(struct soap*, const struct ns__echoStructResponse *);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_ns__echoStructResponse(struct soap*, const char*, int, const struct ns__echoStructResponse *, const char*);
SOAP_FMAC3 struct ns__echoStructResponse * SOAP_FMAC4 soap_in_ns__echoStructResponse(struct soap*, const char*, struct ns__echoStructResponse *, const char*);

SOAP_FMAC3 int SOAP_FMAC4 soap_put_ns__echoStructResponse(struct soap*, const struct ns__echoStructResponse *, const char*, const char*);

#ifndef soap_write_ns__echoStructResponse
#define soap_write_ns__echoStructResponse(soap, data) ( soap_free_temp(soap), soap_begin_send(soap) || (soap_serialize_ns__echoStructResponse(soap, data),0) || soap_put_ns__echoStructResponse(soap, data, "ns:echoStructResponse", NULL) || soap_end_send(soap), (soap)->error )
#endif

SOAP_FMAC3 struct ns__echoStructResponse * SOAP_FMAC4 soap_get_ns__echoStructResponse(struct soap*, struct ns__echoStructResponse *, const char*, const char*);

#ifndef soap_read_ns__echoStructResponse
#define soap_read_ns__echoStructResponse(soap, data) ( soap_begin_recv(soap) || !soap_get_ns__echoStructResponse(soap, data, NULL, NULL) || soap_end_recv(soap), (soap)->error )
#endif

SOAP_FMAC1 struct ns__echoStructResponse * SOAP_FMAC2 soap_instantiate_ns__echoStructResponse(struct soap*, int, const char*, const char*, size_t*);

inline struct ns__echoStructResponse * soap_new_ns__echoStructResponse(struct soap *soap, int n = -1) { return soap_instantiate_ns__echoStructResponse(soap, n, NULL, NULL, NULL); }

inline struct ns__echoStructResponse * soap_new_req_ns__echoStructResponse(struct soap *soap, struct s__SOAPStruct& _return) { struct ns__echoStructResponse *_p = soap_instantiate_ns__echoStructResponse(soap, -1, NULL, NULL, NULL); if (_p) { soap_default_ns__echoStructResponse(soap, _p); _p->_return = _return; } return _p; }

inline struct ns__echoStructResponse * soap_new_set_ns__echoStructResponse(struct soap *soap, struct s__SOAPStruct& _return) { struct ns__echoStructResponse *_p = soap_instantiate_ns__echoStructResponse(soap, -1, NULL, NULL, NULL); if (_p) { soap_default_ns__echoStructResponse(soap, _p); _p->_return = _return; } return _p; }

inline void soap_delete_ns__echoStructResponse(struct soap *soap, struct ns__echoStructResponse *p) { soap_delete(soap, p); }

SOAP_FMAC3 void SOAP_FMAC4 soap_copy_ns__echoStructResponse(struct soap*, int, int, void*, size_t, const void*, size_t);

#ifndef SOAP_TYPE_s__SOAPStruct
#define SOAP_TYPE_s__SOAPStruct (44)
#endif
SOAP_FMAC3 void SOAP_FMAC4 soap_default_s__SOAPStruct(struct soap*, struct s__SOAPStruct *);
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_s__SOAPStruct(struct soap*, const struct s__SOAPStruct *);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_s__SOAPStruct(struct soap*, const char*, int, const struct s__SOAPStruct *, const char*);
SOAP_FMAC3 struct s__SOAPStruct * SOAP_FMAC4 soap_in_s__SOAPStruct(struct soap*, const char*, struct s__SOAPStruct *, const char*);

SOAP_FMAC3 int SOAP_FMAC4 soap_put_s__SOAPStruct(struct soap*, const struct s__SOAPStruct *, const char*, const char*);

#ifndef soap_write_s__SOAPStruct
#define soap_write_s__SOAPStruct(soap, data) ( soap_free_temp(soap), soap_begin_send(soap) || (soap_serialize_s__SOAPStruct(soap, data),0) || soap_put_s__SOAPStruct(soap, data, "s:SOAPStruct", NULL) || soap_end_send(soap), (soap)->error )
#endif

SOAP_FMAC3 struct s__SOAPStruct * SOAP_FMAC4 soap_get_s__SOAPStruct(struct soap*, struct s__SOAPStruct *, const char*, const char*);

#ifndef soap_read_s__SOAPStruct
#define soap_read_s__SOAPStruct(soap, data) ( soap_begin_recv(soap) || !soap_get_s__SOAPStruct(soap, data, NULL, NULL) || soap_end_recv(soap), (soap)->error )
#endif

SOAP_FMAC1 struct s__SOAPStruct * SOAP_FMAC2 soap_instantiate_s__SOAPStruct(struct soap*, int, const char*, const char*, size_t*);

inline struct s__SOAPStruct * soap_new_s__SOAPStruct(struct soap *soap, int n = -1) { return soap_instantiate_s__SOAPStruct(soap, n, NULL, NULL, NULL); }

inline struct s__SOAPStruct * soap_new_req_s__SOAPStruct(struct soap *soap) { struct s__SOAPStruct *_p = soap_instantiate_s__SOAPStruct(soap, -1, NULL, NULL, NULL); if (_p) { soap_default_s__SOAPStruct(soap, _p); } return _p; }

inline struct s__SOAPStruct * soap_new_set_s__SOAPStruct(struct soap *soap, char *varString, long *varInt, float *varFloat) { struct s__SOAPStruct *_p = soap_instantiate_s__SOAPStruct(soap, -1, NULL, NULL, NULL); if (_p) { soap_default_s__SOAPStruct(soap, _p); _p->varString = varString; _p->varInt = varInt; _p->varFloat = varFloat; } return _p; }

inline void soap_delete_s__SOAPStruct(struct soap *soap, struct s__SOAPStruct *p) { soap_delete(soap, p); }

SOAP_FMAC3 void SOAP_FMAC4 soap_copy_s__SOAPStruct(struct soap*, int, int, void*, size_t, const void*, size_t);

#ifndef SOAP_TYPE_ns__echoFloatArray
#define SOAP_TYPE_ns__echoFloatArray (43)
#endif
SOAP_FMAC3 void SOAP_FMAC4 soap_default_ns__echoFloatArray(struct soap*, struct ns__echoFloatArray *);
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_ns__echoFloatArray(struct soap*, const struct ns__echoFloatArray *);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_ns__echoFloatArray(struct soap*, const char*, int, const struct ns__echoFloatArray *, const char*);
SOAP_FMAC3 struct ns__echoFloatArray * SOAP_FMAC4 soap_in_ns__echoFloatArray(struct soap*, const char*, struct ns__echoFloatArray *, const char*);

SOAP_FMAC3 int SOAP_FMAC4 soap_put_ns__echoFloatArray(struct soap*, const struct ns__echoFloatArray *, const char*, const char*);

#ifndef soap_write_ns__echoFloatArray
#define soap_write_ns__echoFloatArray(soap, data) ( soap_free_temp(soap), soap_begin_send(soap) || (soap_serialize_ns__echoFloatArray(soap, data),0) || soap_put_ns__echoFloatArray(soap, data, "ns:echoFloatArray", NULL) || soap_end_send(soap), (soap)->error )
#endif

SOAP_FMAC3 struct ns__echoFloatArray * SOAP_FMAC4 soap_get_ns__echoFloatArray(struct soap*, struct ns__echoFloatArray *, const char*, const char*);

#ifndef soap_read_ns__echoFloatArray
#define soap_read_ns__echoFloatArray(soap, data) ( soap_begin_recv(soap) || !soap_get_ns__echoFloatArray(soap, data, NULL, NULL) || soap_end_recv(soap), (soap)->error )
#endif

SOAP_FMAC1 struct ns__echoFloatArray * SOAP_FMAC2 soap_instantiate_ns__echoFloatArray(struct soap*, int, const char*, const char*, size_t*);

inline struct ns__echoFloatArray * soap_new_ns__echoFloatArray(struct soap *soap, int n = -1) { return soap_instantiate_ns__echoFloatArray(soap, n, NULL, NULL, NULL); }

inline struct ns__echoFloatArray * soap_new_req_ns__echoFloatArray(struct soap *soap, struct ArrayOffloat& inputFloatArray) { struct ns__echoFloatArray *_p = soap_instantiate_ns__echoFloatArray(soap, -1, NULL, NULL, NULL); if (_p) { soap_default_ns__echoFloatArray(soap, _p); _p->inputFloatArray = inputFloatArray; } return _p; }

inline struct ns__echoFloatArray * soap_new_set_ns__echoFloatArray(struct soap *soap, struct ArrayOffloat& inputFloatArray) { struct ns__echoFloatArray *_p = soap_instantiate_ns__echoFloatArray(soap, -1, NULL, NULL, NULL); if (_p) { soap_default_ns__echoFloatArray(soap, _p); _p->inputFloatArray = inputFloatArray; } return _p; }

inline void soap_delete_ns__echoFloatArray(struct soap *soap, struct ns__echoFloatArray *p) { soap_delete(soap, p); }

SOAP_FMAC3 void SOAP_FMAC4 soap_copy_ns__echoFloatArray(struct soap*, int, int, void*, size_t, const void*, size_t);

#ifndef SOAP_TYPE_ns__echoFloatArrayResponse
#define SOAP_TYPE_ns__echoFloatArrayResponse (42)
#endif
SOAP_FMAC3 void SOAP_FMAC4 soap_default_ns__echoFloatArrayResponse(struct soap*, struct ns__echoFloatArrayResponse *);
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_ns__echoFloatArrayResponse(struct soap*, const struct ns__echoFloatArrayResponse *);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_ns__echoFloatArrayResponse(struct soap*, const char*, int, const struct ns__echoFloatArrayResponse *, const char*);
SOAP_FMAC3 struct ns__echoFloatArrayResponse * SOAP_FMAC4 soap_in_ns__echoFloatArrayResponse(struct soap*, const char*, struct ns__echoFloatArrayResponse *, const char*);

SOAP_FMAC3 int SOAP_FMAC4 soap_put_ns__echoFloatArrayResponse(struct soap*, const struct ns__echoFloatArrayResponse *, const char*, const char*);

#ifndef soap_write_ns__echoFloatArrayResponse
#define soap_write_ns__echoFloatArrayResponse(soap, data) ( soap_free_temp(soap), soap_begin_send(soap) || (soap_serialize_ns__echoFloatArrayResponse(soap, data),0) || soap_put_ns__echoFloatArrayResponse(soap, data, "ns:echoFloatArrayResponse", NULL) || soap_end_send(soap), (soap)->error )
#endif

SOAP_FMAC3 struct ns__echoFloatArrayResponse * SOAP_FMAC4 soap_get_ns__echoFloatArrayResponse(struct soap*, struct ns__echoFloatArrayResponse *, const char*, const char*);

#ifndef soap_read_ns__echoFloatArrayResponse
#define soap_read_ns__echoFloatArrayResponse(soap, data) ( soap_begin_recv(soap) || !soap_get_ns__echoFloatArrayResponse(soap, data, NULL, NULL) || soap_end_recv(soap), (soap)->error )
#endif

SOAP_FMAC1 struct ns__echoFloatArrayResponse * SOAP_FMAC2 soap_instantiate_ns__echoFloatArrayResponse(struct soap*, int, const char*, const char*, size_t*);

inline struct ns__echoFloatArrayResponse * soap_new_ns__echoFloatArrayResponse(struct soap *soap, int n = -1) { return soap_instantiate_ns__echoFloatArrayResponse(soap, n, NULL, NULL, NULL); }

inline struct ns__echoFloatArrayResponse * soap_new_req_ns__echoFloatArrayResponse(struct soap *soap, struct ArrayOffloat& _return) { struct ns__echoFloatArrayResponse *_p = soap_instantiate_ns__echoFloatArrayResponse(soap, -1, NULL, NULL, NULL); if (_p) { soap_default_ns__echoFloatArrayResponse(soap, _p); _p->_return = _return; } return _p; }

inline struct ns__echoFloatArrayResponse * soap_new_set_ns__echoFloatArrayResponse(struct soap *soap, struct ArrayOffloat& _return) { struct ns__echoFloatArrayResponse *_p = soap_instantiate_ns__echoFloatArrayResponse(soap, -1, NULL, NULL, NULL); if (_p) { soap_default_ns__echoFloatArrayResponse(soap, _p); _p->_return = _return; } return _p; }

inline void soap_delete_ns__echoFloatArrayResponse(struct soap *soap, struct ns__echoFloatArrayResponse *p) { soap_delete(soap, p); }

SOAP_FMAC3 void SOAP_FMAC4 soap_copy_ns__echoFloatArrayResponse(struct soap*, int, int, void*, size_t, const void*, size_t);

#ifndef SOAP_TYPE_ArrayOffloat
#define SOAP_TYPE_ArrayOffloat (37)
#endif
SOAP_FMAC3 void SOAP_FMAC4 soap_default_ArrayOffloat(struct soap*, struct ArrayOffloat *);
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_ArrayOffloat(struct soap*, struct ArrayOffloat const*);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_ArrayOffloat(struct soap*, const char*, int, const struct ArrayOffloat *, const char*);
SOAP_FMAC3 struct ArrayOffloat * SOAP_FMAC4 soap_in_ArrayOffloat(struct soap*, const char*, struct ArrayOffloat *, const char*);

SOAP_FMAC3 int SOAP_FMAC4 soap_put_ArrayOffloat(struct soap*, const struct ArrayOffloat *, const char*, const char*);

#ifndef soap_write_ArrayOffloat
#define soap_write_ArrayOffloat(soap, data) ( soap_free_temp(soap), soap_begin_send(soap) || (soap_serialize_ArrayOffloat(soap, data),0) || soap_put_ArrayOffloat(soap, data, "SOAP-ENC:Array", NULL) || soap_end_send(soap), (soap)->error )
#endif

SOAP_FMAC3 struct ArrayOffloat * SOAP_FMAC4 soap_get_ArrayOffloat(struct soap*, struct ArrayOffloat *, const char*, const char*);

#ifndef soap_read_ArrayOffloat
#define soap_read_ArrayOffloat(soap, data) ( soap_begin_recv(soap) || !soap_get_ArrayOffloat(soap, data, NULL, NULL) || soap_end_recv(soap), (soap)->error )
#endif

SOAP_FMAC1 struct ArrayOffloat * SOAP_FMAC2 soap_instantiate_ArrayOffloat(struct soap*, int, const char*, const char*, size_t*);

inline struct ArrayOffloat * soap_new_ArrayOffloat(struct soap *soap, int n = -1) { return soap_instantiate_ArrayOffloat(soap, n, NULL, NULL, NULL); }

inline struct ArrayOffloat * soap_new_req_ArrayOffloat(struct soap *soap) { struct ArrayOffloat *_p = soap_instantiate_ArrayOffloat(soap, -1, NULL, NULL, NULL); if (_p) { soap_default_ArrayOffloat(soap, _p); } return _p; }

inline struct ArrayOffloat * soap_new_set_ArrayOffloat(struct soap *soap, float **__ptr, int __size, int __offset) { struct ArrayOffloat *_p = soap_instantiate_ArrayOffloat(soap, -1, NULL, NULL, NULL); if (_p) { soap_default_ArrayOffloat(soap, _p); _p->__ptr = __ptr; _p->__size = __size; _p->__offset = __offset; } return _p; }

inline void soap_delete_ArrayOffloat(struct soap *soap, struct ArrayOffloat *p) { soap_delete(soap, p); }

SOAP_FMAC3 void SOAP_FMAC4 soap_copy_ArrayOffloat(struct soap*, int, int, void*, size_t, const void*, size_t);

#ifndef SOAP_TYPE_ns__echoFloat
#define SOAP_TYPE_ns__echoFloat (36)
#endif
SOAP_FMAC3 void SOAP_FMAC4 soap_default_ns__echoFloat(struct soap*, struct ns__echoFloat *);
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_ns__echoFloat(struct soap*, const struct ns__echoFloat *);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_ns__echoFloat(struct soap*, const char*, int, const struct ns__echoFloat *, const char*);
SOAP_FMAC3 struct ns__echoFloat * SOAP_FMAC4 soap_in_ns__echoFloat(struct soap*, const char*, struct ns__echoFloat *, const char*);

SOAP_FMAC3 int SOAP_FMAC4 soap_put_ns__echoFloat(struct soap*, const struct ns__echoFloat *, const char*, const char*);

#ifndef soap_write_ns__echoFloat
#define soap_write_ns__echoFloat(soap, data) ( soap_free_temp(soap), soap_begin_send(soap) || (soap_serialize_ns__echoFloat(soap, data),0) || soap_put_ns__echoFloat(soap, data, "ns:echoFloat", NULL) || soap_end_send(soap), (soap)->error )
#endif

SOAP_FMAC3 struct ns__echoFloat * SOAP_FMAC4 soap_get_ns__echoFloat(struct soap*, struct ns__echoFloat *, const char*, const char*);

#ifndef soap_read_ns__echoFloat
#define soap_read_ns__echoFloat(soap, data) ( soap_begin_recv(soap) || !soap_get_ns__echoFloat(soap, data, NULL, NULL) || soap_end_recv(soap), (soap)->error )
#endif

SOAP_FMAC1 struct ns__echoFloat * SOAP_FMAC2 soap_instantiate_ns__echoFloat(struct soap*, int, const char*, const char*, size_t*);

inline struct ns__echoFloat * soap_new_ns__echoFloat(struct soap *soap, int n = -1) { return soap_instantiate_ns__echoFloat(soap, n, NULL, NULL, NULL); }

inline struct ns__echoFloat * soap_new_req_ns__echoFloat(struct soap *soap, float inputFloat) { struct ns__echoFloat *_p = soap_instantiate_ns__echoFloat(soap, -1, NULL, NULL, NULL); if (_p) { soap_default_ns__echoFloat(soap, _p); _p->inputFloat = inputFloat; } return _p; }

inline struct ns__echoFloat * soap_new_set_ns__echoFloat(struct soap *soap, float inputFloat) { struct ns__echoFloat *_p = soap_instantiate_ns__echoFloat(soap, -1, NULL, NULL, NULL); if (_p) { soap_default_ns__echoFloat(soap, _p); _p->inputFloat = inputFloat; } return _p; }

inline void soap_delete_ns__echoFloat(struct soap *soap, struct ns__echoFloat *p) { soap_delete(soap, p); }

SOAP_FMAC3 void SOAP_FMAC4 soap_copy_ns__echoFloat(struct soap*, int, int, void*, size_t, const void*, size_t);

#ifndef SOAP_TYPE_ns__echoFloatResponse
#define SOAP_TYPE_ns__echoFloatResponse (35)
#endif
SOAP_FMAC3 void SOAP_FMAC4 soap_default_ns__echoFloatResponse(struct soap*, struct ns__echoFloatResponse *);
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_ns__echoFloatResponse(struct soap*, const struct ns__echoFloatResponse *);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_ns__echoFloatResponse(struct soap*, const char*, int, const struct ns__echoFloatResponse *, const char*);
SOAP_FMAC3 struct ns__echoFloatResponse * SOAP_FMAC4 soap_in_ns__echoFloatResponse(struct soap*, const char*, struct ns__echoFloatResponse *, const char*);

SOAP_FMAC3 int SOAP_FMAC4 soap_put_ns__echoFloatResponse(struct soap*, const struct ns__echoFloatResponse *, const char*, const char*);

#ifndef soap_write_ns__echoFloatResponse
#define soap_write_ns__echoFloatResponse(soap, data) ( soap_free_temp(soap), soap_begin_send(soap) || (soap_serialize_ns__echoFloatResponse(soap, data),0) || soap_put_ns__echoFloatResponse(soap, data, "ns:echoFloatResponse", NULL) || soap_end_send(soap), (soap)->error )
#endif

SOAP_FMAC3 struct ns__echoFloatResponse * SOAP_FMAC4 soap_get_ns__echoFloatResponse(struct soap*, struct ns__echoFloatResponse *, const char*, const char*);

#ifndef soap_read_ns__echoFloatResponse
#define soap_read_ns__echoFloatResponse(soap, data) ( soap_begin_recv(soap) || !soap_get_ns__echoFloatResponse(soap, data, NULL, NULL) || soap_end_recv(soap), (soap)->error )
#endif

SOAP_FMAC1 struct ns__echoFloatResponse * SOAP_FMAC2 soap_instantiate_ns__echoFloatResponse(struct soap*, int, const char*, const char*, size_t*);

inline struct ns__echoFloatResponse * soap_new_ns__echoFloatResponse(struct soap *soap, int n = -1) { return soap_instantiate_ns__echoFloatResponse(soap, n, NULL, NULL, NULL); }

inline struct ns__echoFloatResponse * soap_new_req_ns__echoFloatResponse(struct soap *soap, float _return) { struct ns__echoFloatResponse *_p = soap_instantiate_ns__echoFloatResponse(soap, -1, NULL, NULL, NULL); if (_p) { soap_default_ns__echoFloatResponse(soap, _p); _p->_return = _return; } return _p; }

inline struct ns__echoFloatResponse * soap_new_set_ns__echoFloatResponse(struct soap *soap, float _return) { struct ns__echoFloatResponse *_p = soap_instantiate_ns__echoFloatResponse(soap, -1, NULL, NULL, NULL); if (_p) { soap_default_ns__echoFloatResponse(soap, _p); _p->_return = _return; } return _p; }

inline void soap_delete_ns__echoFloatResponse(struct soap *soap, struct ns__echoFloatResponse *p) { soap_delete(soap, p); }

SOAP_FMAC3 void SOAP_FMAC4 soap_copy_ns__echoFloatResponse(struct soap*, int, int, void*, size_t, const void*, size_t);

#ifndef SOAP_TYPE_ns__echoIntegerArray
#define SOAP_TYPE_ns__echoIntegerArray (30)
#endif
SOAP_FMAC3 void SOAP_FMAC4 soap_default_ns__echoIntegerArray(struct soap*, struct ns__echoIntegerArray *);
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_ns__echoIntegerArray(struct soap*, const struct ns__echoIntegerArray *);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_ns__echoIntegerArray(struct soap*, const char*, int, const struct ns__echoIntegerArray *, const char*);
SOAP_FMAC3 struct ns__echoIntegerArray * SOAP_FMAC4 soap_in_ns__echoIntegerArray(struct soap*, const char*, struct ns__echoIntegerArray *, const char*);

SOAP_FMAC3 int SOAP_FMAC4 soap_put_ns__echoIntegerArray(struct soap*, const struct ns__echoIntegerArray *, const char*, const char*);

#ifndef soap_write_ns__echoIntegerArray
#define soap_write_ns__echoIntegerArray(soap, data) ( soap_free_temp(soap), soap_begin_send(soap) || (soap_serialize_ns__echoIntegerArray(soap, data),0) || soap_put_ns__echoIntegerArray(soap, data, "ns:echoIntegerArray", NULL) || soap_end_send(soap), (soap)->error )
#endif

SOAP_FMAC3 struct ns__echoIntegerArray * SOAP_FMAC4 soap_get_ns__echoIntegerArray(struct soap*, struct ns__echoIntegerArray *, const char*, const char*);

#ifndef soap_read_ns__echoIntegerArray
#define soap_read_ns__echoIntegerArray(soap, data) ( soap_begin_recv(soap) || !soap_get_ns__echoIntegerArray(soap, data, NULL, NULL) || soap_end_recv(soap), (soap)->error )
#endif

SOAP_FMAC1 struct ns__echoIntegerArray * SOAP_FMAC2 soap_instantiate_ns__echoIntegerArray(struct soap*, int, const char*, const char*, size_t*);

inline struct ns__echoIntegerArray * soap_new_ns__echoIntegerArray(struct soap *soap, int n = -1) { return soap_instantiate_ns__echoIntegerArray(soap, n, NULL, NULL, NULL); }

inline struct ns__echoIntegerArray * soap_new_req_ns__echoIntegerArray(struct soap *soap, struct ArrayOfint& inputIntegerArray) { struct ns__echoIntegerArray *_p = soap_instantiate_ns__echoIntegerArray(soap, -1, NULL, NULL, NULL); if (_p) { soap_default_ns__echoIntegerArray(soap, _p); _p->inputIntegerArray = inputIntegerArray; } return _p; }

inline struct ns__echoIntegerArray * soap_new_set_ns__echoIntegerArray(struct soap *soap, struct ArrayOfint& inputIntegerArray) { struct ns__echoIntegerArray *_p = soap_instantiate_ns__echoIntegerArray(soap, -1, NULL, NULL, NULL); if (_p) { soap_default_ns__echoIntegerArray(soap, _p); _p->inputIntegerArray = inputIntegerArray; } return _p; }

inline void soap_delete_ns__echoIntegerArray(struct soap *soap, struct ns__echoIntegerArray *p) { soap_delete(soap, p); }

SOAP_FMAC3 void SOAP_FMAC4 soap_copy_ns__echoIntegerArray(struct soap*, int, int, void*, size_t, const void*, size_t);

#ifndef SOAP_TYPE_ns__echoIntegerArrayResponse
#define SOAP_TYPE_ns__echoIntegerArrayResponse (29)
#endif
SOAP_FMAC3 void SOAP_FMAC4 soap_default_ns__echoIntegerArrayResponse(struct soap*, struct ns__echoIntegerArrayResponse *);
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_ns__echoIntegerArrayResponse(struct soap*, const struct ns__echoIntegerArrayResponse *);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_ns__echoIntegerArrayResponse(struct soap*, const char*, int, const struct ns__echoIntegerArrayResponse *, const char*);
SOAP_FMAC3 struct ns__echoIntegerArrayResponse * SOAP_FMAC4 soap_in_ns__echoIntegerArrayResponse(struct soap*, const char*, struct ns__echoIntegerArrayResponse *, const char*);

SOAP_FMAC3 int SOAP_FMAC4 soap_put_ns__echoIntegerArrayResponse(struct soap*, const struct ns__echoIntegerArrayResponse *, const char*, const char*);

#ifndef soap_write_ns__echoIntegerArrayResponse
#define soap_write_ns__echoIntegerArrayResponse(soap, data) ( soap_free_temp(soap), soap_begin_send(soap) || (soap_serialize_ns__echoIntegerArrayResponse(soap, data),0) || soap_put_ns__echoIntegerArrayResponse(soap, data, "ns:echoIntegerArrayResponse", NULL) || soap_end_send(soap), (soap)->error )
#endif

SOAP_FMAC3 struct ns__echoIntegerArrayResponse * SOAP_FMAC4 soap_get_ns__echoIntegerArrayResponse(struct soap*, struct ns__echoIntegerArrayResponse *, const char*, const char*);

#ifndef soap_read_ns__echoIntegerArrayResponse
#define soap_read_ns__echoIntegerArrayResponse(soap, data) ( soap_begin_recv(soap) || !soap_get_ns__echoIntegerArrayResponse(soap, data, NULL, NULL) || soap_end_recv(soap), (soap)->error )
#endif

SOAP_FMAC1 struct ns__echoIntegerArrayResponse * SOAP_FMAC2 soap_instantiate_ns__echoIntegerArrayResponse(struct soap*, int, const char*, const char*, size_t*);

inline struct ns__echoIntegerArrayResponse * soap_new_ns__echoIntegerArrayResponse(struct soap *soap, int n = -1) { return soap_instantiate_ns__echoIntegerArrayResponse(soap, n, NULL, NULL, NULL); }

inline struct ns__echoIntegerArrayResponse * soap_new_req_ns__echoIntegerArrayResponse(struct soap *soap, struct ArrayOfint& _return) { struct ns__echoIntegerArrayResponse *_p = soap_instantiate_ns__echoIntegerArrayResponse(soap, -1, NULL, NULL, NULL); if (_p) { soap_default_ns__echoIntegerArrayResponse(soap, _p); _p->_return = _return; } return _p; }

inline struct ns__echoIntegerArrayResponse * soap_new_set_ns__echoIntegerArrayResponse(struct soap *soap, struct ArrayOfint& _return) { struct ns__echoIntegerArrayResponse *_p = soap_instantiate_ns__echoIntegerArrayResponse(soap, -1, NULL, NULL, NULL); if (_p) { soap_default_ns__echoIntegerArrayResponse(soap, _p); _p->_return = _return; } return _p; }

inline void soap_delete_ns__echoIntegerArrayResponse(struct soap *soap, struct ns__echoIntegerArrayResponse *p) { soap_delete(soap, p); }

SOAP_FMAC3 void SOAP_FMAC4 soap_copy_ns__echoIntegerArrayResponse(struct soap*, int, int, void*, size_t, const void*, size_t);

#ifndef SOAP_TYPE_ArrayOfint
#define SOAP_TYPE_ArrayOfint (24)
#endif
SOAP_FMAC3 void SOAP_FMAC4 soap_default_ArrayOfint(struct soap*, struct ArrayOfint *);
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_ArrayOfint(struct soap*, struct ArrayOfint const*);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_ArrayOfint(struct soap*, const char*, int, const struct ArrayOfint *, const char*);
SOAP_FMAC3 struct ArrayOfint * SOAP_FMAC4 soap_in_ArrayOfint(struct soap*, const char*, struct ArrayOfint *, const char*);

SOAP_FMAC3 int SOAP_FMAC4 soap_put_ArrayOfint(struct soap*, const struct ArrayOfint *, const char*, const char*);

#ifndef soap_write_ArrayOfint
#define soap_write_ArrayOfint(soap, data) ( soap_free_temp(soap), soap_begin_send(soap) || (soap_serialize_ArrayOfint(soap, data),0) || soap_put_ArrayOfint(soap, data, "SOAP-ENC:Array", NULL) || soap_end_send(soap), (soap)->error )
#endif

SOAP_FMAC3 struct ArrayOfint * SOAP_FMAC4 soap_get_ArrayOfint(struct soap*, struct ArrayOfint *, const char*, const char*);

#ifndef soap_read_ArrayOfint
#define soap_read_ArrayOfint(soap, data) ( soap_begin_recv(soap) || !soap_get_ArrayOfint(soap, data, NULL, NULL) || soap_end_recv(soap), (soap)->error )
#endif

SOAP_FMAC1 struct ArrayOfint * SOAP_FMAC2 soap_instantiate_ArrayOfint(struct soap*, int, const char*, const char*, size_t*);

inline struct ArrayOfint * soap_new_ArrayOfint(struct soap *soap, int n = -1) { return soap_instantiate_ArrayOfint(soap, n, NULL, NULL, NULL); }

inline struct ArrayOfint * soap_new_req_ArrayOfint(struct soap *soap) { struct ArrayOfint *_p = soap_instantiate_ArrayOfint(soap, -1, NULL, NULL, NULL); if (_p) { soap_default_ArrayOfint(soap, _p); } return _p; }

inline struct ArrayOfint * soap_new_set_ArrayOfint(struct soap *soap, long **__ptr, int __size, int __offset) { struct ArrayOfint *_p = soap_instantiate_ArrayOfint(soap, -1, NULL, NULL, NULL); if (_p) { soap_default_ArrayOfint(soap, _p); _p->__ptr = __ptr; _p->__size = __size; _p->__offset = __offset; } return _p; }

inline void soap_delete_ArrayOfint(struct soap *soap, struct ArrayOfint *p) { soap_delete(soap, p); }

SOAP_FMAC3 void SOAP_FMAC4 soap_copy_ArrayOfint(struct soap*, int, int, void*, size_t, const void*, size_t);

#ifndef SOAP_TYPE_ns__echoInteger
#define SOAP_TYPE_ns__echoInteger (23)
#endif
SOAP_FMAC3 void SOAP_FMAC4 soap_default_ns__echoInteger(struct soap*, struct ns__echoInteger *);
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_ns__echoInteger(struct soap*, const struct ns__echoInteger *);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_ns__echoInteger(struct soap*, const char*, int, const struct ns__echoInteger *, const char*);
SOAP_FMAC3 struct ns__echoInteger * SOAP_FMAC4 soap_in_ns__echoInteger(struct soap*, const char*, struct ns__echoInteger *, const char*);

SOAP_FMAC3 int SOAP_FMAC4 soap_put_ns__echoInteger(struct soap*, const struct ns__echoInteger *, const char*, const char*);

#ifndef soap_write_ns__echoInteger
#define soap_write_ns__echoInteger(soap, data) ( soap_free_temp(soap), soap_begin_send(soap) || (soap_serialize_ns__echoInteger(soap, data),0) || soap_put_ns__echoInteger(soap, data, "ns:echoInteger", NULL) || soap_end_send(soap), (soap)->error )
#endif

SOAP_FMAC3 struct ns__echoInteger * SOAP_FMAC4 soap_get_ns__echoInteger(struct soap*, struct ns__echoInteger *, const char*, const char*);

#ifndef soap_read_ns__echoInteger
#define soap_read_ns__echoInteger(soap, data) ( soap_begin_recv(soap) || !soap_get_ns__echoInteger(soap, data, NULL, NULL) || soap_end_recv(soap), (soap)->error )
#endif

SOAP_FMAC1 struct ns__echoInteger * SOAP_FMAC2 soap_instantiate_ns__echoInteger(struct soap*, int, const char*, const char*, size_t*);

inline struct ns__echoInteger * soap_new_ns__echoInteger(struct soap *soap, int n = -1) { return soap_instantiate_ns__echoInteger(soap, n, NULL, NULL, NULL); }

inline struct ns__echoInteger * soap_new_req_ns__echoInteger(struct soap *soap, long inputInteger) { struct ns__echoInteger *_p = soap_instantiate_ns__echoInteger(soap, -1, NULL, NULL, NULL); if (_p) { soap_default_ns__echoInteger(soap, _p); _p->inputInteger = inputInteger; } return _p; }

inline struct ns__echoInteger * soap_new_set_ns__echoInteger(struct soap *soap, long inputInteger) { struct ns__echoInteger *_p = soap_instantiate_ns__echoInteger(soap, -1, NULL, NULL, NULL); if (_p) { soap_default_ns__echoInteger(soap, _p); _p->inputInteger = inputInteger; } return _p; }

inline void soap_delete_ns__echoInteger(struct soap *soap, struct ns__echoInteger *p) { soap_delete(soap, p); }

SOAP_FMAC3 void SOAP_FMAC4 soap_copy_ns__echoInteger(struct soap*, int, int, void*, size_t, const void*, size_t);

#ifndef SOAP_TYPE_ns__echoIntegerResponse
#define SOAP_TYPE_ns__echoIntegerResponse (22)
#endif
SOAP_FMAC3 void SOAP_FMAC4 soap_default_ns__echoIntegerResponse(struct soap*, struct ns__echoIntegerResponse *);
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_ns__echoIntegerResponse(struct soap*, const struct ns__echoIntegerResponse *);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_ns__echoIntegerResponse(struct soap*, const char*, int, const struct ns__echoIntegerResponse *, const char*);
SOAP_FMAC3 struct ns__echoIntegerResponse * SOAP_FMAC4 soap_in_ns__echoIntegerResponse(struct soap*, const char*, struct ns__echoIntegerResponse *, const char*);

SOAP_FMAC3 int SOAP_FMAC4 soap_put_ns__echoIntegerResponse(struct soap*, const struct ns__echoIntegerResponse *, const char*, const char*);

#ifndef soap_write_ns__echoIntegerResponse
#define soap_write_ns__echoIntegerResponse(soap, data) ( soap_free_temp(soap), soap_begin_send(soap) || (soap_serialize_ns__echoIntegerResponse(soap, data),0) || soap_put_ns__echoIntegerResponse(soap, data, "ns:echoIntegerResponse", NULL) || soap_end_send(soap), (soap)->error )
#endif

SOAP_FMAC3 struct ns__echoIntegerResponse * SOAP_FMAC4 soap_get_ns__echoIntegerResponse(struct soap*, struct ns__echoIntegerResponse *, const char*, const char*);

#ifndef soap_read_ns__echoIntegerResponse
#define soap_read_ns__echoIntegerResponse(soap, data) ( soap_begin_recv(soap) || !soap_get_ns__echoIntegerResponse(soap, data, NULL, NULL) || soap_end_recv(soap), (soap)->error )
#endif

SOAP_FMAC1 struct ns__echoIntegerResponse * SOAP_FMAC2 soap_instantiate_ns__echoIntegerResponse(struct soap*, int, const char*, const char*, size_t*);

inline struct ns__echoIntegerResponse * soap_new_ns__echoIntegerResponse(struct soap *soap, int n = -1) { return soap_instantiate_ns__echoIntegerResponse(soap, n, NULL, NULL, NULL); }

inline struct ns__echoIntegerResponse * soap_new_req_ns__echoIntegerResponse(struct soap *soap, long _return) { struct ns__echoIntegerResponse *_p = soap_instantiate_ns__echoIntegerResponse(soap, -1, NULL, NULL, NULL); if (_p) { soap_default_ns__echoIntegerResponse(soap, _p); _p->_return = _return; } return _p; }

inline struct ns__echoIntegerResponse * soap_new_set_ns__echoIntegerResponse(struct soap *soap, long _return) { struct ns__echoIntegerResponse *_p = soap_instantiate_ns__echoIntegerResponse(soap, -1, NULL, NULL, NULL); if (_p) { soap_default_ns__echoIntegerResponse(soap, _p); _p->_return = _return; } return _p; }

inline void soap_delete_ns__echoIntegerResponse(struct soap *soap, struct ns__echoIntegerResponse *p) { soap_delete(soap, p); }

SOAP_FMAC3 void SOAP_FMAC4 soap_copy_ns__echoIntegerResponse(struct soap*, int, int, void*, size_t, const void*, size_t);

#ifndef SOAP_TYPE_ns__echoStringArray
#define SOAP_TYPE_ns__echoStringArray (17)
#endif
SOAP_FMAC3 void SOAP_FMAC4 soap_default_ns__echoStringArray(struct soap*, struct ns__echoStringArray *);
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_ns__echoStringArray(struct soap*, const struct ns__echoStringArray *);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_ns__echoStringArray(struct soap*, const char*, int, const struct ns__echoStringArray *, const char*);
SOAP_FMAC3 struct ns__echoStringArray * SOAP_FMAC4 soap_in_ns__echoStringArray(struct soap*, const char*, struct ns__echoStringArray *, const char*);

SOAP_FMAC3 int SOAP_FMAC4 soap_put_ns__echoStringArray(struct soap*, const struct ns__echoStringArray *, const char*, const char*);

#ifndef soap_write_ns__echoStringArray
#define soap_write_ns__echoStringArray(soap, data) ( soap_free_temp(soap), soap_begin_send(soap) || (soap_serialize_ns__echoStringArray(soap, data),0) || soap_put_ns__echoStringArray(soap, data, "ns:echoStringArray", NULL) || soap_end_send(soap), (soap)->error )
#endif

SOAP_FMAC3 struct ns__echoStringArray * SOAP_FMAC4 soap_get_ns__echoStringArray(struct soap*, struct ns__echoStringArray *, const char*, const char*);

#ifndef soap_read_ns__echoStringArray
#define soap_read_ns__echoStringArray(soap, data) ( soap_begin_recv(soap) || !soap_get_ns__echoStringArray(soap, data, NULL, NULL) || soap_end_recv(soap), (soap)->error )
#endif

SOAP_FMAC1 struct ns__echoStringArray * SOAP_FMAC2 soap_instantiate_ns__echoStringArray(struct soap*, int, const char*, const char*, size_t*);

inline struct ns__echoStringArray * soap_new_ns__echoStringArray(struct soap *soap, int n = -1) { return soap_instantiate_ns__echoStringArray(soap, n, NULL, NULL, NULL); }

inline struct ns__echoStringArray * soap_new_req_ns__echoStringArray(struct soap *soap, struct ArrayOfstring& inputStringArray) { struct ns__echoStringArray *_p = soap_instantiate_ns__echoStringArray(soap, -1, NULL, NULL, NULL); if (_p) { soap_default_ns__echoStringArray(soap, _p); _p->inputStringArray = inputStringArray; } return _p; }

inline struct ns__echoStringArray * soap_new_set_ns__echoStringArray(struct soap *soap, struct ArrayOfstring& inputStringArray) { struct ns__echoStringArray *_p = soap_instantiate_ns__echoStringArray(soap, -1, NULL, NULL, NULL); if (_p) { soap_default_ns__echoStringArray(soap, _p); _p->inputStringArray = inputStringArray; } return _p; }

inline void soap_delete_ns__echoStringArray(struct soap *soap, struct ns__echoStringArray *p) { soap_delete(soap, p); }

SOAP_FMAC3 void SOAP_FMAC4 soap_copy_ns__echoStringArray(struct soap*, int, int, void*, size_t, const void*, size_t);

#ifndef SOAP_TYPE_ns__echoStringArrayResponse
#define SOAP_TYPE_ns__echoStringArrayResponse (16)
#endif
SOAP_FMAC3 void SOAP_FMAC4 soap_default_ns__echoStringArrayResponse(struct soap*, struct ns__echoStringArrayResponse *);
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_ns__echoStringArrayResponse(struct soap*, const struct ns__echoStringArrayResponse *);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_ns__echoStringArrayResponse(struct soap*, const char*, int, const struct ns__echoStringArrayResponse *, const char*);
SOAP_FMAC3 struct ns__echoStringArrayResponse * SOAP_FMAC4 soap_in_ns__echoStringArrayResponse(struct soap*, const char*, struct ns__echoStringArrayResponse *, const char*);

SOAP_FMAC3 int SOAP_FMAC4 soap_put_ns__echoStringArrayResponse(struct soap*, const struct ns__echoStringArrayResponse *, const char*, const char*);

#ifndef soap_write_ns__echoStringArrayResponse
#define soap_write_ns__echoStringArrayResponse(soap, data) ( soap_free_temp(soap), soap_begin_send(soap) || (soap_serialize_ns__echoStringArrayResponse(soap, data),0) || soap_put_ns__echoStringArrayResponse(soap, data, "ns:echoStringArrayResponse", NULL) || soap_end_send(soap), (soap)->error )
#endif

SOAP_FMAC3 struct ns__echoStringArrayResponse * SOAP_FMAC4 soap_get_ns__echoStringArrayResponse(struct soap*, struct ns__echoStringArrayResponse *, const char*, const char*);

#ifndef soap_read_ns__echoStringArrayResponse
#define soap_read_ns__echoStringArrayResponse(soap, data) ( soap_begin_recv(soap) || !soap_get_ns__echoStringArrayResponse(soap, data, NULL, NULL) || soap_end_recv(soap), (soap)->error )
#endif

SOAP_FMAC1 struct ns__echoStringArrayResponse * SOAP_FMAC2 soap_instantiate_ns__echoStringArrayResponse(struct soap*, int, const char*, const char*, size_t*);

inline struct ns__echoStringArrayResponse * soap_new_ns__echoStringArrayResponse(struct soap *soap, int n = -1) { return soap_instantiate_ns__echoStringArrayResponse(soap, n, NULL, NULL, NULL); }

inline struct ns__echoStringArrayResponse * soap_new_req_ns__echoStringArrayResponse(struct soap *soap, struct ArrayOfstring& _return) { struct ns__echoStringArrayResponse *_p = soap_instantiate_ns__echoStringArrayResponse(soap, -1, NULL, NULL, NULL); if (_p) { soap_default_ns__echoStringArrayResponse(soap, _p); _p->_return = _return; } return _p; }

inline struct ns__echoStringArrayResponse * soap_new_set_ns__echoStringArrayResponse(struct soap *soap, struct ArrayOfstring& _return) { struct ns__echoStringArrayResponse *_p = soap_instantiate_ns__echoStringArrayResponse(soap, -1, NULL, NULL, NULL); if (_p) { soap_default_ns__echoStringArrayResponse(soap, _p); _p->_return = _return; } return _p; }

inline void soap_delete_ns__echoStringArrayResponse(struct soap *soap, struct ns__echoStringArrayResponse *p) { soap_delete(soap, p); }

SOAP_FMAC3 void SOAP_FMAC4 soap_copy_ns__echoStringArrayResponse(struct soap*, int, int, void*, size_t, const void*, size_t);

#ifndef SOAP_TYPE_ArrayOfstring
#define SOAP_TYPE_ArrayOfstring (12)
#endif
SOAP_FMAC3 void SOAP_FMAC4 soap_default_ArrayOfstring(struct soap*, struct ArrayOfstring *);
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_ArrayOfstring(struct soap*, struct ArrayOfstring const*);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_ArrayOfstring(struct soap*, const char*, int, const struct ArrayOfstring *, const char*);
SOAP_FMAC3 struct ArrayOfstring * SOAP_FMAC4 soap_in_ArrayOfstring(struct soap*, const char*, struct ArrayOfstring *, const char*);

SOAP_FMAC3 int SOAP_FMAC4 soap_put_ArrayOfstring(struct soap*, const struct ArrayOfstring *, const char*, const char*);

#ifndef soap_write_ArrayOfstring
#define soap_write_ArrayOfstring(soap, data) ( soap_free_temp(soap), soap_begin_send(soap) || (soap_serialize_ArrayOfstring(soap, data),0) || soap_put_ArrayOfstring(soap, data, "SOAP-ENC:Array", NULL) || soap_end_send(soap), (soap)->error )
#endif

SOAP_FMAC3 struct ArrayOfstring * SOAP_FMAC4 soap_get_ArrayOfstring(struct soap*, struct ArrayOfstring *, const char*, const char*);

#ifndef soap_read_ArrayOfstring
#define soap_read_ArrayOfstring(soap, data) ( soap_begin_recv(soap) || !soap_get_ArrayOfstring(soap, data, NULL, NULL) || soap_end_recv(soap), (soap)->error )
#endif

SOAP_FMAC1 struct ArrayOfstring * SOAP_FMAC2 soap_instantiate_ArrayOfstring(struct soap*, int, const char*, const char*, size_t*);

inline struct ArrayOfstring * soap_new_ArrayOfstring(struct soap *soap, int n = -1) { return soap_instantiate_ArrayOfstring(soap, n, NULL, NULL, NULL); }

inline struct ArrayOfstring * soap_new_req_ArrayOfstring(struct soap *soap) { struct ArrayOfstring *_p = soap_instantiate_ArrayOfstring(soap, -1, NULL, NULL, NULL); if (_p) { soap_default_ArrayOfstring(soap, _p); } return _p; }

inline struct ArrayOfstring * soap_new_set_ArrayOfstring(struct soap *soap, char **__ptr, int __size, int __offset) { struct ArrayOfstring *_p = soap_instantiate_ArrayOfstring(soap, -1, NULL, NULL, NULL); if (_p) { soap_default_ArrayOfstring(soap, _p); _p->__ptr = __ptr; _p->__size = __size; _p->__offset = __offset; } return _p; }

inline void soap_delete_ArrayOfstring(struct soap *soap, struct ArrayOfstring *p) { soap_delete(soap, p); }

SOAP_FMAC3 void SOAP_FMAC4 soap_copy_ArrayOfstring(struct soap*, int, int, void*, size_t, const void*, size_t);

#ifndef SOAP_TYPE_ns__echoString
#define SOAP_TYPE_ns__echoString (11)
#endif
SOAP_FMAC3 void SOAP_FMAC4 soap_default_ns__echoString(struct soap*, struct ns__echoString *);
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_ns__echoString(struct soap*, const struct ns__echoString *);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_ns__echoString(struct soap*, const char*, int, const struct ns__echoString *, const char*);
SOAP_FMAC3 struct ns__echoString * SOAP_FMAC4 soap_in_ns__echoString(struct soap*, const char*, struct ns__echoString *, const char*);

SOAP_FMAC3 int SOAP_FMAC4 soap_put_ns__echoString(struct soap*, const struct ns__echoString *, const char*, const char*);

#ifndef soap_write_ns__echoString
#define soap_write_ns__echoString(soap, data) ( soap_free_temp(soap), soap_begin_send(soap) || (soap_serialize_ns__echoString(soap, data),0) || soap_put_ns__echoString(soap, data, "ns:echoString", NULL) || soap_end_send(soap), (soap)->error )
#endif

SOAP_FMAC3 struct ns__echoString * SOAP_FMAC4 soap_get_ns__echoString(struct soap*, struct ns__echoString *, const char*, const char*);

#ifndef soap_read_ns__echoString
#define soap_read_ns__echoString(soap, data) ( soap_begin_recv(soap) || !soap_get_ns__echoString(soap, data, NULL, NULL) || soap_end_recv(soap), (soap)->error )
#endif

SOAP_FMAC1 struct ns__echoString * SOAP_FMAC2 soap_instantiate_ns__echoString(struct soap*, int, const char*, const char*, size_t*);

inline struct ns__echoString * soap_new_ns__echoString(struct soap *soap, int n = -1) { return soap_instantiate_ns__echoString(soap, n, NULL, NULL, NULL); }

inline struct ns__echoString * soap_new_req_ns__echoString(struct soap *soap) { struct ns__echoString *_p = soap_instantiate_ns__echoString(soap, -1, NULL, NULL, NULL); if (_p) { soap_default_ns__echoString(soap, _p); } return _p; }

inline struct ns__echoString * soap_new_set_ns__echoString(struct soap *soap, char *inputString) { struct ns__echoString *_p = soap_instantiate_ns__echoString(soap, -1, NULL, NULL, NULL); if (_p) { soap_default_ns__echoString(soap, _p); _p->inputString = inputString; } return _p; }

inline void soap_delete_ns__echoString(struct soap *soap, struct ns__echoString *p) { soap_delete(soap, p); }

SOAP_FMAC3 void SOAP_FMAC4 soap_copy_ns__echoString(struct soap*, int, int, void*, size_t, const void*, size_t);

#ifndef SOAP_TYPE_ns__echoStringResponse
#define SOAP_TYPE_ns__echoStringResponse (10)
#endif
SOAP_FMAC3 void SOAP_FMAC4 soap_default_ns__echoStringResponse(struct soap*, struct ns__echoStringResponse *);
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_ns__echoStringResponse(struct soap*, const struct ns__echoStringResponse *);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_ns__echoStringResponse(struct soap*, const char*, int, const struct ns__echoStringResponse *, const char*);
SOAP_FMAC3 struct ns__echoStringResponse * SOAP_FMAC4 soap_in_ns__echoStringResponse(struct soap*, const char*, struct ns__echoStringResponse *, const char*);

SOAP_FMAC3 int SOAP_FMAC4 soap_put_ns__echoStringResponse(struct soap*, const struct ns__echoStringResponse *, const char*, const char*);

#ifndef soap_write_ns__echoStringResponse
#define soap_write_ns__echoStringResponse(soap, data) ( soap_free_temp(soap), soap_begin_send(soap) || (soap_serialize_ns__echoStringResponse(soap, data),0) || soap_put_ns__echoStringResponse(soap, data, "ns:echoStringResponse", NULL) || soap_end_send(soap), (soap)->error )
#endif

SOAP_FMAC3 struct ns__echoStringResponse * SOAP_FMAC4 soap_get_ns__echoStringResponse(struct soap*, struct ns__echoStringResponse *, const char*, const char*);

#ifndef soap_read_ns__echoStringResponse
#define soap_read_ns__echoStringResponse(soap, data) ( soap_begin_recv(soap) || !soap_get_ns__echoStringResponse(soap, data, NULL, NULL) || soap_end_recv(soap), (soap)->error )
#endif

SOAP_FMAC1 struct ns__echoStringResponse * SOAP_FMAC2 soap_instantiate_ns__echoStringResponse(struct soap*, int, const char*, const char*, size_t*);

inline struct ns__echoStringResponse * soap_new_ns__echoStringResponse(struct soap *soap, int n = -1) { return soap_instantiate_ns__echoStringResponse(soap, n, NULL, NULL, NULL); }

inline struct ns__echoStringResponse * soap_new_req_ns__echoStringResponse(struct soap *soap, char *_return) { struct ns__echoStringResponse *_p = soap_instantiate_ns__echoStringResponse(soap, -1, NULL, NULL, NULL); if (_p) { soap_default_ns__echoStringResponse(soap, _p); _p->_return = _return; } return _p; }

inline struct ns__echoStringResponse * soap_new_set_ns__echoStringResponse(struct soap *soap, char *_return) { struct ns__echoStringResponse *_p = soap_instantiate_ns__echoStringResponse(soap, -1, NULL, NULL, NULL); if (_p) { soap_default_ns__echoStringResponse(soap, _p); _p->_return = _return; } return _p; }

inline void soap_delete_ns__echoStringResponse(struct soap *soap, struct ns__echoStringResponse *p) { soap_delete(soap, p); }

SOAP_FMAC3 void SOAP_FMAC4 soap_copy_ns__echoStringResponse(struct soap*, int, int, void*, size_t, const void*, size_t);

#ifndef WITH_NOGLOBAL

#ifndef SOAP_TYPE_PointerToSOAP_ENV__Reason
#define SOAP_TYPE_PointerToSOAP_ENV__Reason (126)
#endif
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_PointerToSOAP_ENV__Reason(struct soap*, struct SOAP_ENV__Reason *const*);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_PointerToSOAP_ENV__Reason(struct soap*, const char *, int, struct SOAP_ENV__Reason *const*, const char *);
SOAP_FMAC3 struct SOAP_ENV__Reason ** SOAP_FMAC4 soap_in_PointerToSOAP_ENV__Reason(struct soap*, const char*, struct SOAP_ENV__Reason **, const char*);
SOAP_FMAC3 int SOAP_FMAC4 soap_put_PointerToSOAP_ENV__Reason(struct soap*, struct SOAP_ENV__Reason *const*, const char*, const char*);

#ifndef soap_write_PointerToSOAP_ENV__Reason
#define soap_write_PointerToSOAP_ENV__Reason(soap, data) ( soap_free_temp(soap), soap_begin_send(soap) || (soap_serialize_PointerToSOAP_ENV__Reason(soap, data),0) || soap_put_PointerToSOAP_ENV__Reason(soap, data, "SOAP-ENV:Reason", NULL) || soap_end_send(soap), (soap)->error )
#endif

SOAP_FMAC3 struct SOAP_ENV__Reason ** SOAP_FMAC4 soap_get_PointerToSOAP_ENV__Reason(struct soap*, struct SOAP_ENV__Reason **, const char*, const char*);

#ifndef soap_read_PointerToSOAP_ENV__Reason
#define soap_read_PointerToSOAP_ENV__Reason(soap, data) ( soap_begin_recv(soap) || !soap_get_PointerToSOAP_ENV__Reason(soap, data, NULL, NULL) || soap_end_recv(soap), (soap)->error )
#endif


#endif

#ifndef WITH_NOGLOBAL

#ifndef SOAP_TYPE_PointerToSOAP_ENV__Detail
#define SOAP_TYPE_PointerToSOAP_ENV__Detail (125)
#endif
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_PointerToSOAP_ENV__Detail(struct soap*, struct SOAP_ENV__Detail *const*);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_PointerToSOAP_ENV__Detail(struct soap*, const char *, int, struct SOAP_ENV__Detail *const*, const char *);
SOAP_FMAC3 struct SOAP_ENV__Detail ** SOAP_FMAC4 soap_in_PointerToSOAP_ENV__Detail(struct soap*, const char*, struct SOAP_ENV__Detail **, const char*);
SOAP_FMAC3 int SOAP_FMAC4 soap_put_PointerToSOAP_ENV__Detail(struct soap*, struct SOAP_ENV__Detail *const*, const char*, const char*);

#ifndef soap_write_PointerToSOAP_ENV__Detail
#define soap_write_PointerToSOAP_ENV__Detail(soap, data) ( soap_free_temp(soap), soap_begin_send(soap) || (soap_serialize_PointerToSOAP_ENV__Detail(soap, data),0) || soap_put_PointerToSOAP_ENV__Detail(soap, data, "SOAP-ENV:Detail", NULL) || soap_end_send(soap), (soap)->error )
#endif

SOAP_FMAC3 struct SOAP_ENV__Detail ** SOAP_FMAC4 soap_get_PointerToSOAP_ENV__Detail(struct soap*, struct SOAP_ENV__Detail **, const char*, const char*);

#ifndef soap_read_PointerToSOAP_ENV__Detail
#define soap_read_PointerToSOAP_ENV__Detail(soap, data) ( soap_begin_recv(soap) || !soap_get_PointerToSOAP_ENV__Detail(soap, data, NULL, NULL) || soap_end_recv(soap), (soap)->error )
#endif


#endif

#ifndef WITH_NOGLOBAL

#ifndef SOAP_TYPE_PointerToSOAP_ENV__Code
#define SOAP_TYPE_PointerToSOAP_ENV__Code (119)
#endif
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_PointerToSOAP_ENV__Code(struct soap*, struct SOAP_ENV__Code *const*);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_PointerToSOAP_ENV__Code(struct soap*, const char *, int, struct SOAP_ENV__Code *const*, const char *);
SOAP_FMAC3 struct SOAP_ENV__Code ** SOAP_FMAC4 soap_in_PointerToSOAP_ENV__Code(struct soap*, const char*, struct SOAP_ENV__Code **, const char*);
SOAP_FMAC3 int SOAP_FMAC4 soap_put_PointerToSOAP_ENV__Code(struct soap*, struct SOAP_ENV__Code *const*, const char*, const char*);

#ifndef soap_write_PointerToSOAP_ENV__Code
#define soap_write_PointerToSOAP_ENV__Code(soap, data) ( soap_free_temp(soap), soap_begin_send(soap) || (soap_serialize_PointerToSOAP_ENV__Code(soap, data),0) || soap_put_PointerToSOAP_ENV__Code(soap, data, "SOAP-ENV:Code", NULL) || soap_end_send(soap), (soap)->error )
#endif

SOAP_FMAC3 struct SOAP_ENV__Code ** SOAP_FMAC4 soap_get_PointerToSOAP_ENV__Code(struct soap*, struct SOAP_ENV__Code **, const char*, const char*);

#ifndef soap_read_PointerToSOAP_ENV__Code
#define soap_read_PointerToSOAP_ENV__Code(soap, data) ( soap_begin_recv(soap) || !soap_get_PointerToSOAP_ENV__Code(soap, data, NULL, NULL) || soap_end_recv(soap), (soap)->error )
#endif


#endif

#ifndef SOAP_TYPE_xsd__decimal
#define SOAP_TYPE_xsd__decimal (78)
#endif

#define soap_default_xsd__decimal(soap, a) soap_default_string(soap, a)

SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_xsd__decimal(struct soap*, char *const*);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_xsd__decimal(struct soap*, const char*, int, char*const*, const char*);
SOAP_FMAC3 char * * SOAP_FMAC4 soap_in_xsd__decimal(struct soap*, const char*, char **, const char*);
SOAP_FMAC3 int SOAP_FMAC4 soap_put_xsd__decimal(struct soap*, char *const*, const char*, const char*);

#ifndef soap_write_xsd__decimal
#define soap_write_xsd__decimal(soap, data) ( soap_free_temp(soap), soap_begin_send(soap) || (soap_serialize_xsd__decimal(soap, data),0) || soap_put_xsd__decimal(soap, data, "byte", NULL) || soap_end_send(soap), (soap)->error )
#endif

SOAP_FMAC3 char ** SOAP_FMAC4 soap_get_xsd__decimal(struct soap*, char **, const char*, const char*);

#ifndef soap_read_xsd__decimal
#define soap_read_xsd__decimal(soap, data) ( soap_begin_recv(soap) || !soap_get_xsd__decimal(soap, data, NULL, NULL) || soap_end_recv(soap), (soap)->error )
#endif


#ifndef SOAP_TYPE_xsd__dateTime
#define SOAP_TYPE_xsd__dateTime (68)
#endif

#define soap_default_xsd__dateTime(soap, a) soap_default_string(soap, a)

SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_xsd__dateTime(struct soap*, char *const*);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_xsd__dateTime(struct soap*, const char*, int, char*const*, const char*);
SOAP_FMAC3 char * * SOAP_FMAC4 soap_in_xsd__dateTime(struct soap*, const char*, char **, const char*);
SOAP_FMAC3 int SOAP_FMAC4 soap_put_xsd__dateTime(struct soap*, char *const*, const char*, const char*);

#ifndef soap_write_xsd__dateTime
#define soap_write_xsd__dateTime(soap, data) ( soap_free_temp(soap), soap_begin_send(soap) || (soap_serialize_xsd__dateTime(soap, data),0) || soap_put_xsd__dateTime(soap, data, "byte", NULL) || soap_end_send(soap), (soap)->error )
#endif

SOAP_FMAC3 char ** SOAP_FMAC4 soap_get_xsd__dateTime(struct soap*, char **, const char*, const char*);

#ifndef soap_read_xsd__dateTime
#define soap_read_xsd__dateTime(soap, data) ( soap_begin_recv(soap) || !soap_get_xsd__dateTime(soap, data, NULL, NULL) || soap_end_recv(soap), (soap)->error )
#endif


#ifndef SOAP_TYPE_PointerTounsignedByte
#define SOAP_TYPE_PointerTounsignedByte (63)
#endif
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_PointerTounsignedByte(struct soap*, unsigned char *const*);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_PointerTounsignedByte(struct soap*, const char *, int, unsigned char *const*, const char *);
SOAP_FMAC3 unsigned char ** SOAP_FMAC4 soap_in_PointerTounsignedByte(struct soap*, const char*, unsigned char **, const char*);
SOAP_FMAC3 int SOAP_FMAC4 soap_put_PointerTounsignedByte(struct soap*, unsigned char *const*, const char*, const char*);

#ifndef soap_write_PointerTounsignedByte
#define soap_write_PointerTounsignedByte(soap, data) ( soap_free_temp(soap), soap_begin_send(soap) || (soap_serialize_PointerTounsignedByte(soap, data),0) || soap_put_PointerTounsignedByte(soap, data, "unsignedByte", NULL) || soap_end_send(soap), (soap)->error )
#endif

SOAP_FMAC3 unsigned char ** SOAP_FMAC4 soap_get_PointerTounsignedByte(struct soap*, unsigned char **, const char*, const char*);

#ifndef soap_read_PointerTounsignedByte
#define soap_read_PointerTounsignedByte(soap, data) ( soap_begin_recv(soap) || !soap_get_PointerTounsignedByte(soap, data, NULL, NULL) || soap_end_recv(soap), (soap)->error )
#endif


#ifndef SOAP_TYPE_PointerToPointerTos__SOAPStruct
#define SOAP_TYPE_PointerToPointerTos__SOAPStruct (51)
#endif
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_PointerToPointerTos__SOAPStruct(struct soap*, struct s__SOAPStruct **const*);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_PointerToPointerTos__SOAPStruct(struct soap*, const char *, int, struct s__SOAPStruct **const*, const char *);
SOAP_FMAC3 struct s__SOAPStruct *** SOAP_FMAC4 soap_in_PointerToPointerTos__SOAPStruct(struct soap*, const char*, struct s__SOAPStruct ***, const char*);
SOAP_FMAC3 int SOAP_FMAC4 soap_put_PointerToPointerTos__SOAPStruct(struct soap*, struct s__SOAPStruct **const*, const char*, const char*);

#ifndef soap_write_PointerToPointerTos__SOAPStruct
#define soap_write_PointerToPointerTos__SOAPStruct(soap, data) ( soap_free_temp(soap), soap_begin_send(soap) || (soap_serialize_PointerToPointerTos__SOAPStruct(soap, data),0) || soap_put_PointerToPointerTos__SOAPStruct(soap, data, "s:SOAPStruct", NULL) || soap_end_send(soap), (soap)->error )
#endif

SOAP_FMAC3 struct s__SOAPStruct *** SOAP_FMAC4 soap_get_PointerToPointerTos__SOAPStruct(struct soap*, struct s__SOAPStruct ***, const char*, const char*);

#ifndef soap_read_PointerToPointerTos__SOAPStruct
#define soap_read_PointerToPointerTos__SOAPStruct(soap, data) ( soap_begin_recv(soap) || !soap_get_PointerToPointerTos__SOAPStruct(soap, data, NULL, NULL) || soap_end_recv(soap), (soap)->error )
#endif


#ifndef SOAP_TYPE_PointerTos__SOAPStruct
#define SOAP_TYPE_PointerTos__SOAPStruct (50)
#endif
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_PointerTos__SOAPStruct(struct soap*, struct s__SOAPStruct *const*);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_PointerTos__SOAPStruct(struct soap*, const char *, int, struct s__SOAPStruct *const*, const char *);
SOAP_FMAC3 struct s__SOAPStruct ** SOAP_FMAC4 soap_in_PointerTos__SOAPStruct(struct soap*, const char*, struct s__SOAPStruct **, const char*);
SOAP_FMAC3 int SOAP_FMAC4 soap_put_PointerTos__SOAPStruct(struct soap*, struct s__SOAPStruct *const*, const char*, const char*);

#ifndef soap_write_PointerTos__SOAPStruct
#define soap_write_PointerTos__SOAPStruct(soap, data) ( soap_free_temp(soap), soap_begin_send(soap) || (soap_serialize_PointerTos__SOAPStruct(soap, data),0) || soap_put_PointerTos__SOAPStruct(soap, data, "s:SOAPStruct", NULL) || soap_end_send(soap), (soap)->error )
#endif

SOAP_FMAC3 struct s__SOAPStruct ** SOAP_FMAC4 soap_get_PointerTos__SOAPStruct(struct soap*, struct s__SOAPStruct **, const char*, const char*);

#ifndef soap_read_PointerTos__SOAPStruct
#define soap_read_PointerTos__SOAPStruct(soap, data) ( soap_begin_recv(soap) || !soap_get_PointerTos__SOAPStruct(soap, data, NULL, NULL) || soap_end_recv(soap), (soap)->error )
#endif


#ifndef SOAP_TYPE_PointerToPointerToxsd__float
#define SOAP_TYPE_PointerToPointerToxsd__float (39)
#endif
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_PointerToPointerToxsd__float(struct soap*, float **const*);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_PointerToPointerToxsd__float(struct soap*, const char *, int, float **const*, const char *);
SOAP_FMAC3 float *** SOAP_FMAC4 soap_in_PointerToPointerToxsd__float(struct soap*, const char*, float ***, const char*);
SOAP_FMAC3 int SOAP_FMAC4 soap_put_PointerToPointerToxsd__float(struct soap*, float **const*, const char*, const char*);

#ifndef soap_write_PointerToPointerToxsd__float
#define soap_write_PointerToPointerToxsd__float(soap, data) ( soap_free_temp(soap), soap_begin_send(soap) || (soap_serialize_PointerToPointerToxsd__float(soap, data),0) || soap_put_PointerToPointerToxsd__float(soap, data, "xsd:float", NULL) || soap_end_send(soap), (soap)->error )
#endif

SOAP_FMAC3 float *** SOAP_FMAC4 soap_get_PointerToPointerToxsd__float(struct soap*, float ***, const char*, const char*);

#ifndef soap_read_PointerToPointerToxsd__float
#define soap_read_PointerToPointerToxsd__float(soap, data) ( soap_begin_recv(soap) || !soap_get_PointerToPointerToxsd__float(soap, data, NULL, NULL) || soap_end_recv(soap), (soap)->error )
#endif


#ifndef SOAP_TYPE_PointerToxsd__float
#define SOAP_TYPE_PointerToxsd__float (38)
#endif
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_PointerToxsd__float(struct soap*, float *const*);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_PointerToxsd__float(struct soap*, const char *, int, float *const*, const char *);
SOAP_FMAC3 float ** SOAP_FMAC4 soap_in_PointerToxsd__float(struct soap*, const char*, float **, const char*);
SOAP_FMAC3 int SOAP_FMAC4 soap_put_PointerToxsd__float(struct soap*, float *const*, const char*, const char*);

#ifndef soap_write_PointerToxsd__float
#define soap_write_PointerToxsd__float(soap, data) ( soap_free_temp(soap), soap_begin_send(soap) || (soap_serialize_PointerToxsd__float(soap, data),0) || soap_put_PointerToxsd__float(soap, data, "xsd:float", NULL) || soap_end_send(soap), (soap)->error )
#endif

SOAP_FMAC3 float ** SOAP_FMAC4 soap_get_PointerToxsd__float(struct soap*, float **, const char*, const char*);

#ifndef soap_read_PointerToxsd__float
#define soap_read_PointerToxsd__float(soap, data) ( soap_begin_recv(soap) || !soap_get_PointerToxsd__float(soap, data, NULL, NULL) || soap_end_recv(soap), (soap)->error )
#endif


#ifndef SOAP_TYPE_PointerToPointerToxsd__int
#define SOAP_TYPE_PointerToPointerToxsd__int (26)
#endif
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_PointerToPointerToxsd__int(struct soap*, long **const*);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_PointerToPointerToxsd__int(struct soap*, const char *, int, long **const*, const char *);
SOAP_FMAC3 long *** SOAP_FMAC4 soap_in_PointerToPointerToxsd__int(struct soap*, const char*, long ***, const char*);
SOAP_FMAC3 int SOAP_FMAC4 soap_put_PointerToPointerToxsd__int(struct soap*, long **const*, const char*, const char*);

#ifndef soap_write_PointerToPointerToxsd__int
#define soap_write_PointerToPointerToxsd__int(soap, data) ( soap_free_temp(soap), soap_begin_send(soap) || (soap_serialize_PointerToPointerToxsd__int(soap, data),0) || soap_put_PointerToPointerToxsd__int(soap, data, "xsd:int", NULL) || soap_end_send(soap), (soap)->error )
#endif

SOAP_FMAC3 long *** SOAP_FMAC4 soap_get_PointerToPointerToxsd__int(struct soap*, long ***, const char*, const char*);

#ifndef soap_read_PointerToPointerToxsd__int
#define soap_read_PointerToPointerToxsd__int(soap, data) ( soap_begin_recv(soap) || !soap_get_PointerToPointerToxsd__int(soap, data, NULL, NULL) || soap_end_recv(soap), (soap)->error )
#endif


#ifndef SOAP_TYPE_PointerToxsd__int
#define SOAP_TYPE_PointerToxsd__int (25)
#endif
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_PointerToxsd__int(struct soap*, long *const*);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_PointerToxsd__int(struct soap*, const char *, int, long *const*, const char *);
SOAP_FMAC3 long ** SOAP_FMAC4 soap_in_PointerToxsd__int(struct soap*, const char*, long **, const char*);
SOAP_FMAC3 int SOAP_FMAC4 soap_put_PointerToxsd__int(struct soap*, long *const*, const char*, const char*);

#ifndef soap_write_PointerToxsd__int
#define soap_write_PointerToxsd__int(soap, data) ( soap_free_temp(soap), soap_begin_send(soap) || (soap_serialize_PointerToxsd__int(soap, data),0) || soap_put_PointerToxsd__int(soap, data, "xsd:int", NULL) || soap_end_send(soap), (soap)->error )
#endif

SOAP_FMAC3 long ** SOAP_FMAC4 soap_get_PointerToxsd__int(struct soap*, long **, const char*, const char*);

#ifndef soap_read_PointerToxsd__int
#define soap_read_PointerToxsd__int(soap, data) ( soap_begin_recv(soap) || !soap_get_PointerToxsd__int(soap, data, NULL, NULL) || soap_end_recv(soap), (soap)->error )
#endif


#ifndef SOAP_TYPE_PointerToxsd__string
#define SOAP_TYPE_PointerToxsd__string (13)
#endif
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_PointerToxsd__string(struct soap*, char **const*);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_PointerToxsd__string(struct soap*, const char *, int, char **const*, const char *);
SOAP_FMAC3 char *** SOAP_FMAC4 soap_in_PointerToxsd__string(struct soap*, const char*, char ***, const char*);
SOAP_FMAC3 int SOAP_FMAC4 soap_put_PointerToxsd__string(struct soap*, char **const*, const char*, const char*);

#ifndef soap_write_PointerToxsd__string
#define soap_write_PointerToxsd__string(soap, data) ( soap_free_temp(soap), soap_begin_send(soap) || (soap_serialize_PointerToxsd__string(soap, data),0) || soap_put_PointerToxsd__string(soap, data, "byte", NULL) || soap_end_send(soap), (soap)->error )
#endif

SOAP_FMAC3 char *** SOAP_FMAC4 soap_get_PointerToxsd__string(struct soap*, char ***, const char*, const char*);

#ifndef soap_read_PointerToxsd__string
#define soap_read_PointerToxsd__string(soap, data) ( soap_begin_recv(soap) || !soap_get_PointerToxsd__string(soap, data, NULL, NULL) || soap_end_recv(soap), (soap)->error )
#endif


#ifndef SOAP_TYPE_xsd__string
#define SOAP_TYPE_xsd__string (7)
#endif

#define soap_default_xsd__string(soap, a) soap_default_string(soap, a)

SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_xsd__string(struct soap*, char *const*);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_xsd__string(struct soap*, const char*, int, char*const*, const char*);
SOAP_FMAC3 char * * SOAP_FMAC4 soap_in_xsd__string(struct soap*, const char*, char **, const char*);
SOAP_FMAC3 int SOAP_FMAC4 soap_put_xsd__string(struct soap*, char *const*, const char*, const char*);

#ifndef soap_write_xsd__string
#define soap_write_xsd__string(soap, data) ( soap_free_temp(soap), soap_begin_send(soap) || (soap_serialize_xsd__string(soap, data),0) || soap_put_xsd__string(soap, data, "byte", NULL) || soap_end_send(soap), (soap)->error )
#endif

SOAP_FMAC3 char ** SOAP_FMAC4 soap_get_xsd__string(struct soap*, char **, const char*, const char*);

#ifndef soap_read_xsd__string
#define soap_read_xsd__string(soap, data) ( soap_begin_recv(soap) || !soap_get_xsd__string(soap, data, NULL, NULL) || soap_end_recv(soap), (soap)->error )
#endif


#ifndef SOAP_TYPE__QName
#define SOAP_TYPE__QName (5)
#endif

#define soap_default__QName(soap, a) soap_default_string(soap, a)

SOAP_FMAC3 void SOAP_FMAC4 soap_serialize__QName(struct soap*, char *const*);
SOAP_FMAC3 int SOAP_FMAC4 soap_out__QName(struct soap*, const char*, int, char*const*, const char*);
SOAP_FMAC3 char * * SOAP_FMAC4 soap_in__QName(struct soap*, const char*, char **, const char*);
SOAP_FMAC3 int SOAP_FMAC4 soap_put__QName(struct soap*, char *const*, const char*, const char*);

#ifndef soap_write__QName
#define soap_write__QName(soap, data) ( soap_free_temp(soap), soap_begin_send(soap) || (soap_serialize__QName(soap, data),0) || soap_put__QName(soap, data, "byte", NULL) || soap_end_send(soap), (soap)->error )
#endif

SOAP_FMAC3 char ** SOAP_FMAC4 soap_get__QName(struct soap*, char **, const char*, const char*);

#ifndef soap_read__QName
#define soap_read__QName(soap, data) ( soap_begin_recv(soap) || !soap_get__QName(soap, data, NULL, NULL) || soap_end_recv(soap), (soap)->error )
#endif


#ifndef SOAP_TYPE_string
#define SOAP_TYPE_string (4)
#endif
SOAP_FMAC3 void SOAP_FMAC4 soap_default_string(struct soap*, char **);
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_string(struct soap*, char *const*);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_string(struct soap*, const char*, int, char*const*, const char*);
SOAP_FMAC3 char * * SOAP_FMAC4 soap_in_string(struct soap*, const char*, char **, const char*);
SOAP_FMAC3 int SOAP_FMAC4 soap_put_string(struct soap*, char *const*, const char*, const char*);

#ifndef soap_write_string
#define soap_write_string(soap, data) ( soap_free_temp(soap), soap_begin_send(soap) || (soap_serialize_string(soap, data),0) || soap_put_string(soap, data, "byte", NULL) || soap_end_send(soap), (soap)->error )
#endif

SOAP_FMAC3 char ** SOAP_FMAC4 soap_get_string(struct soap*, char **, const char*, const char*);

#ifndef soap_read_string
#define soap_read_string(soap, data) ( soap_begin_recv(soap) || !soap_get_string(soap, data, NULL, NULL) || soap_end_recv(soap), (soap)->error )
#endif


#ifndef SOAP_TYPE_Array2Ofint
#define SOAP_TYPE_Array2Ofint (98)
#endif
SOAP_FMAC3 void SOAP_FMAC4 soap_default_Array2Ofint(struct soap*, int[2]);
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_Array2Ofint(struct soap*, int const[2]);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_Array2Ofint(struct soap*, const char*, int, int const[2], const char*);
SOAP_FMAC3 int * SOAP_FMAC4 soap_in_Array2Ofint(struct soap*, const char*, int[2], const char*);

SOAP_FMAC3 int SOAP_FMAC4 soap_put_Array2Ofint(struct soap*, int const[2], const char*, const char*);

#ifndef soap_write_Array2Ofint
#define soap_write_Array2Ofint(soap, data) ( soap_free_temp(soap), soap_begin_send(soap) || (soap_serialize_Array2Ofint(soap, data),0) || soap_put_Array2Ofint(soap, data, "SOAP-ENC:Array", NULL) || soap_end_send(soap), (soap)->error )
#endif

SOAP_FMAC3 int * SOAP_FMAC4 soap_get_Array2Ofint(struct soap*, int[2], const char*, const char*);

#ifndef soap_read_Array2Ofint
#define soap_read_Array2Ofint(soap, data) ( soap_begin_recv(soap) || !soap_get_Array2Ofint(soap, data, NULL, NULL) || soap_end_recv(soap), (soap)->error )
#endif


#endif

/* End of soapH.h */
