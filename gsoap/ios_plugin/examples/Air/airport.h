/* airport.h
   Generated by wsdl2h 2.8.33 from http://www.webservicex.net/airport.asmx?WSDL and typemap.dat
   2016-08-17 14:07:57 GMT

   DO NOT INCLUDE THIS FILE DIRECTLY INTO YOUR PROJECT BUILDS
   USE THE soapcpp2-GENERATED SOURCE CODE FILES FOR YOUR PROJECT BUILDS

gSOAP XML Web services tools
Copyright (C) 2000-2016, Robert van Engelen, Genivia Inc. All Rights Reserved.
This program is released under the GPL with the additional exemption that
compiling, linking, and/or using OpenSSL is allowed.
--------------------------------------------------------------------------------
A commercial use license is available from Genivia Inc., contact@genivia.com
--------------------------------------------------------------------------------
*/

/** @page page_notes Notes

@note HINTS:
 - Run soapcpp2 on airport.h to generate the SOAP/XML processing logic.
   Use soapcpp2 -I to specify paths for #import
   To build with STL, 'stl.h' is imported from 'import' dir in package.
   Use soapcpp2 -j to generate improved proxy and server classes.
   Use soapcpp2 -r to generate a report.
 - Use wsdl2h -c and -s to generate pure C code or C++ code without STL.
 - Use 'typemap.dat' to control namespace bindings and type mappings.
   It is strongly recommended to customize the names of the namespace prefixes
   generated by wsdl2h. To do so, modify the prefix bindings in the Namespaces
   section below and add the modified lines to 'typemap.dat' to rerun wsdl2h.
 - Run Doxygen (www.doxygen.org) on this file to generate documentation.
 - Use wsdl2h -R to generate REST operations.
 - Use wsdl2h -nname to use name as the base namespace prefix instead of 'ns'.
 - Use wsdl2h -Nname for service prefix and produce multiple service bindings
 - Use wsdl2h -d to enable DOM support for xsd:anyType.
 - Use wsdl2h -g to auto-generate readers and writers for root elements.
 - Use wsdl2h -b to auto-generate bi-directional operations (duplex ops).
 - Use wsdl2h -U to map XML names to C++ Unicode identifiers instead of _xNNNN.
 - Use wsdl2h -u to disable the generation of unions.
 - Struct/class members serialized as XML attributes are annotated with a '@'.
 - Struct/class members that have a special role are annotated with a '$'.

@warning
   DO NOT INCLUDE THIS ANNOTATED FILE DIRECTLY IN YOUR PROJECT SOURCE CODE.
   USE THE FILES GENERATED BY soapcpp2 FOR YOUR PROJECT'S SOURCE CODE:
   THE soapStub.h FILE CONTAINS THIS CONTENT WITHOUT ANNOTATIONS.

@copyright LICENSE:
@verbatim
--------------------------------------------------------------------------------
gSOAP XML Web services tools
Copyright (C) 2000-2016, Robert van Engelen, Genivia Inc. All Rights Reserved.
The wsdl2h tool and its generated software are released under the GPL.
This software is released under the GPL with the additional exemption that
compiling, linking, and/or using OpenSSL is allowed.
--------------------------------------------------------------------------------
GPL license.

This program is free software; you can redistribute it and/or modify it under
the terms of the GNU General Public License as published by the Free Software
Foundation; either version 2 of the License, or (at your option) any later
version.

This program is distributed in the hope that it will be useful, but WITHOUT ANY
WARRANTY; without even the implied warranty of MERCHANTABILITY or FITNESS FOR A
PARTICULAR PURPOSE. See the GNU General Public License for more details.

You should have received a copy of the GNU General Public License along with
this program; if not, write to the Free Software Foundation, Inc., 59 Temple
Place, Suite 330, Boston, MA 02111-1307 USA

Author contact information:
engelen@genivia.com / engelen@acm.org

This program is released under the GPL with the additional exemption that
compiling, linking, and/or using OpenSSL is allowed.
--------------------------------------------------------------------------------
A commercial-use license is available from Genivia, Inc., contact@genivia.com
--------------------------------------------------------------------------------
@endverbatim

*/


//gsoapopt c++,w

/******************************************************************************\
 *                                                                            *
 * Definitions                                                                *
 *   http://www.webserviceX.NET                                               *
 *                                                                            *
\******************************************************************************/


/******************************************************************************\
 *                                                                            *
 * $CONTAINER                                                                 *
 *   std::vector                                                              *
 *                                                                            *
\******************************************************************************/

template <class T> class std::vector;

/******************************************************************************\
 *                                                                            *
 * Import                                                                     *
 *                                                                            *
\******************************************************************************/

#import "dom.h"
#import "stl.h"	// enable STL containers when used (option -s removes STL dependency)

/******************************************************************************\
 *                                                                            *
 * Schema Namespaces                                                          *
 *                                                                            *
\******************************************************************************/


/* NOTE:

It is strongly recommended to customize the names of the namespace prefixes
generated by wsdl2h. To do so, modify the prefix bindings below and add the
modified lines to typemap.dat to rerun wsdl2h:

ns1 = "http://www.webserviceX.NET"

*/

#define SOAP_NAMESPACE_OF_ns1	"http://www.webserviceX.NET"
//gsoap ns1   schema namespace:	http://www.webserviceX.NET
//gsoap ns1   schema elementForm:	qualified
//gsoap ns1   schema attributeForm:	unqualified

/******************************************************************************\
 *                                                                            *
 * Built-in Schema Types and Top-Level Elements and Attributes                *
 *                                                                            *
\******************************************************************************/


/******************************************************************************\
 *                                                                            *
 * Forward Declarations                                                       *
 *                                                                            *
\******************************************************************************/


//  Forward declaration of class _ns1__getAirportInformationByISOCountryCode.
class _ns1__getAirportInformationByISOCountryCode;

//  Forward declaration of class _ns1__getAirportInformationByISOCountryCodeResponse.
class _ns1__getAirportInformationByISOCountryCodeResponse;

//  Forward declaration of class _ns1__getAirportInformationByCityOrAirportName.
class _ns1__getAirportInformationByCityOrAirportName;

//  Forward declaration of class _ns1__getAirportInformationByCityOrAirportNameResponse.
class _ns1__getAirportInformationByCityOrAirportNameResponse;

//  Forward declaration of class _ns1__GetAirportInformationByCountry.
class _ns1__GetAirportInformationByCountry;

//  Forward declaration of class _ns1__GetAirportInformationByCountryResponse.
class _ns1__GetAirportInformationByCountryResponse;

//  Forward declaration of class _ns1__getAirportInformationByAirportCode.
class _ns1__getAirportInformationByAirportCode;

//  Forward declaration of class _ns1__getAirportInformationByAirportCodeResponse.
class _ns1__getAirportInformationByAirportCodeResponse;


/******************************************************************************\
 *                                                                            *
 * Schema Types and Top-Level Elements and Attributes                         *
 *   http://www.webserviceX.NET                                               *
 *                                                                            *
\******************************************************************************/


/******************************************************************************\
 *                                                                            *
 * Schema Complex Types and Top-Level Elements                                *
 *   http://www.webserviceX.NET                                               *
 *                                                                            *
\******************************************************************************/

/// @brief Top-level root element "http://www.webserviceX.NET":getAirportInformationByISOCountryCode
/// @brief "http://www.webserviceX.NET":getAirportInformationByISOCountryCode is a complexType.
///
/// class _ns1__getAirportInformationByISOCountryCode operations:
/// - _ns1__getAirportInformationByISOCountryCode* soap_new__ns1__getAirportInformationByISOCountryCode(soap*) allocate
/// - _ns1__getAirportInformationByISOCountryCode* soap_new__ns1__getAirportInformationByISOCountryCode(soap*, int num) allocate array
/// - _ns1__getAirportInformationByISOCountryCode* soap_new_req__ns1__getAirportInformationByISOCountryCode(soap*, ...) allocate, set required members
/// - _ns1__getAirportInformationByISOCountryCode* soap_new_set__ns1__getAirportInformationByISOCountryCode(soap*, ...) allocate, set all public members
/// - _ns1__getAirportInformationByISOCountryCode::soap_default(soap*) reset members to default
/// - int soap_read__ns1__getAirportInformationByISOCountryCode(soap*, _ns1__getAirportInformationByISOCountryCode*) deserialize from a stream
/// - int soap_write__ns1__getAirportInformationByISOCountryCode(soap*, _ns1__getAirportInformationByISOCountryCode*) serialize to a stream
/// - _ns1__getAirportInformationByISOCountryCode* _ns1__getAirportInformationByISOCountryCode::soap_dup(soap*) returns deep copy of _ns1__getAirportInformationByISOCountryCode, copies the (cyclic) graph structure when a context is provided, or (cycle-pruned) tree structure with soap_set_mode(soap, SOAP_XML_TREE) (use soapcpp2 -Ec)
/// - _ns1__getAirportInformationByISOCountryCode::soap_del() deep deletes _ns1__getAirportInformationByISOCountryCode data members, use only after _ns1__getAirportInformationByISOCountryCode::soap_dup(NULL) (use soapcpp2 -Ed)
class _ns1__getAirportInformationByISOCountryCode
{ public:
/// Element "CountryAbbrviation" of XSD type xs:string.
    std::string*                         CountryAbbrviation             0;	///< Optional element.
/// A handle to the soap struct context that manages this instance when instantiated by a context or NULL otherwise (automatically set).
    struct soap                         *soap                          ;
};

/// @brief Top-level root element "http://www.webserviceX.NET":getAirportInformationByISOCountryCodeResponse
/// @brief "http://www.webserviceX.NET":getAirportInformationByISOCountryCodeResponse is a complexType.
///
/// class _ns1__getAirportInformationByISOCountryCodeResponse operations:
/// - _ns1__getAirportInformationByISOCountryCodeResponse* soap_new__ns1__getAirportInformationByISOCountryCodeResponse(soap*) allocate
/// - _ns1__getAirportInformationByISOCountryCodeResponse* soap_new__ns1__getAirportInformationByISOCountryCodeResponse(soap*, int num) allocate array
/// - _ns1__getAirportInformationByISOCountryCodeResponse* soap_new_req__ns1__getAirportInformationByISOCountryCodeResponse(soap*, ...) allocate, set required members
/// - _ns1__getAirportInformationByISOCountryCodeResponse* soap_new_set__ns1__getAirportInformationByISOCountryCodeResponse(soap*, ...) allocate, set all public members
/// - _ns1__getAirportInformationByISOCountryCodeResponse::soap_default(soap*) reset members to default
/// - int soap_read__ns1__getAirportInformationByISOCountryCodeResponse(soap*, _ns1__getAirportInformationByISOCountryCodeResponse*) deserialize from a stream
/// - int soap_write__ns1__getAirportInformationByISOCountryCodeResponse(soap*, _ns1__getAirportInformationByISOCountryCodeResponse*) serialize to a stream
/// - _ns1__getAirportInformationByISOCountryCodeResponse* _ns1__getAirportInformationByISOCountryCodeResponse::soap_dup(soap*) returns deep copy of _ns1__getAirportInformationByISOCountryCodeResponse, copies the (cyclic) graph structure when a context is provided, or (cycle-pruned) tree structure with soap_set_mode(soap, SOAP_XML_TREE) (use soapcpp2 -Ec)
/// - _ns1__getAirportInformationByISOCountryCodeResponse::soap_del() deep deletes _ns1__getAirportInformationByISOCountryCodeResponse data members, use only after _ns1__getAirportInformationByISOCountryCodeResponse::soap_dup(NULL) (use soapcpp2 -Ed)
class _ns1__getAirportInformationByISOCountryCodeResponse
{ public:
/// Element "getAirportInformationByISOCountryCodeResult" of XSD type xs:string.
    std::string*                         getAirportInformationByISOCountryCodeResult 0;	///< Optional element.
/// A handle to the soap struct context that manages this instance when instantiated by a context or NULL otherwise (automatically set).
    struct soap                         *soap                          ;
};

/// @brief Top-level root element "http://www.webserviceX.NET":getAirportInformationByCityOrAirportName
/// @brief "http://www.webserviceX.NET":getAirportInformationByCityOrAirportName is a complexType.
///
/// class _ns1__getAirportInformationByCityOrAirportName operations:
/// - _ns1__getAirportInformationByCityOrAirportName* soap_new__ns1__getAirportInformationByCityOrAirportName(soap*) allocate
/// - _ns1__getAirportInformationByCityOrAirportName* soap_new__ns1__getAirportInformationByCityOrAirportName(soap*, int num) allocate array
/// - _ns1__getAirportInformationByCityOrAirportName* soap_new_req__ns1__getAirportInformationByCityOrAirportName(soap*, ...) allocate, set required members
/// - _ns1__getAirportInformationByCityOrAirportName* soap_new_set__ns1__getAirportInformationByCityOrAirportName(soap*, ...) allocate, set all public members
/// - _ns1__getAirportInformationByCityOrAirportName::soap_default(soap*) reset members to default
/// - int soap_read__ns1__getAirportInformationByCityOrAirportName(soap*, _ns1__getAirportInformationByCityOrAirportName*) deserialize from a stream
/// - int soap_write__ns1__getAirportInformationByCityOrAirportName(soap*, _ns1__getAirportInformationByCityOrAirportName*) serialize to a stream
/// - _ns1__getAirportInformationByCityOrAirportName* _ns1__getAirportInformationByCityOrAirportName::soap_dup(soap*) returns deep copy of _ns1__getAirportInformationByCityOrAirportName, copies the (cyclic) graph structure when a context is provided, or (cycle-pruned) tree structure with soap_set_mode(soap, SOAP_XML_TREE) (use soapcpp2 -Ec)
/// - _ns1__getAirportInformationByCityOrAirportName::soap_del() deep deletes _ns1__getAirportInformationByCityOrAirportName data members, use only after _ns1__getAirportInformationByCityOrAirportName::soap_dup(NULL) (use soapcpp2 -Ed)
class _ns1__getAirportInformationByCityOrAirportName
{ public:
/// Element "cityOrAirportName" of XSD type xs:string.
    std::string*                         cityOrAirportName              0;	///< Optional element.
/// A handle to the soap struct context that manages this instance when instantiated by a context or NULL otherwise (automatically set).
    struct soap                         *soap                          ;
};

/// @brief Top-level root element "http://www.webserviceX.NET":getAirportInformationByCityOrAirportNameResponse
/// @brief "http://www.webserviceX.NET":getAirportInformationByCityOrAirportNameResponse is a complexType.
///
/// class _ns1__getAirportInformationByCityOrAirportNameResponse operations:
/// - _ns1__getAirportInformationByCityOrAirportNameResponse* soap_new__ns1__getAirportInformationByCityOrAirportNameResponse(soap*) allocate
/// - _ns1__getAirportInformationByCityOrAirportNameResponse* soap_new__ns1__getAirportInformationByCityOrAirportNameResponse(soap*, int num) allocate array
/// - _ns1__getAirportInformationByCityOrAirportNameResponse* soap_new_req__ns1__getAirportInformationByCityOrAirportNameResponse(soap*, ...) allocate, set required members
/// - _ns1__getAirportInformationByCityOrAirportNameResponse* soap_new_set__ns1__getAirportInformationByCityOrAirportNameResponse(soap*, ...) allocate, set all public members
/// - _ns1__getAirportInformationByCityOrAirportNameResponse::soap_default(soap*) reset members to default
/// - int soap_read__ns1__getAirportInformationByCityOrAirportNameResponse(soap*, _ns1__getAirportInformationByCityOrAirportNameResponse*) deserialize from a stream
/// - int soap_write__ns1__getAirportInformationByCityOrAirportNameResponse(soap*, _ns1__getAirportInformationByCityOrAirportNameResponse*) serialize to a stream
/// - _ns1__getAirportInformationByCityOrAirportNameResponse* _ns1__getAirportInformationByCityOrAirportNameResponse::soap_dup(soap*) returns deep copy of _ns1__getAirportInformationByCityOrAirportNameResponse, copies the (cyclic) graph structure when a context is provided, or (cycle-pruned) tree structure with soap_set_mode(soap, SOAP_XML_TREE) (use soapcpp2 -Ec)
/// - _ns1__getAirportInformationByCityOrAirportNameResponse::soap_del() deep deletes _ns1__getAirportInformationByCityOrAirportNameResponse data members, use only after _ns1__getAirportInformationByCityOrAirportNameResponse::soap_dup(NULL) (use soapcpp2 -Ed)
class _ns1__getAirportInformationByCityOrAirportNameResponse
{ public:
/// Element "getAirportInformationByCityOrAirportNameResult" of XSD type xs:string.
    std::string*                         getAirportInformationByCityOrAirportNameResult 0;	///< Optional element.
/// A handle to the soap struct context that manages this instance when instantiated by a context or NULL otherwise (automatically set).
    struct soap                         *soap                          ;
};

/// @brief Top-level root element "http://www.webserviceX.NET":GetAirportInformationByCountry
/// @brief "http://www.webserviceX.NET":GetAirportInformationByCountry is a complexType.
///
/// class _ns1__GetAirportInformationByCountry operations:
/// - _ns1__GetAirportInformationByCountry* soap_new__ns1__GetAirportInformationByCountry(soap*) allocate
/// - _ns1__GetAirportInformationByCountry* soap_new__ns1__GetAirportInformationByCountry(soap*, int num) allocate array
/// - _ns1__GetAirportInformationByCountry* soap_new_req__ns1__GetAirportInformationByCountry(soap*, ...) allocate, set required members
/// - _ns1__GetAirportInformationByCountry* soap_new_set__ns1__GetAirportInformationByCountry(soap*, ...) allocate, set all public members
/// - _ns1__GetAirportInformationByCountry::soap_default(soap*) reset members to default
/// - int soap_read__ns1__GetAirportInformationByCountry(soap*, _ns1__GetAirportInformationByCountry*) deserialize from a stream
/// - int soap_write__ns1__GetAirportInformationByCountry(soap*, _ns1__GetAirportInformationByCountry*) serialize to a stream
/// - _ns1__GetAirportInformationByCountry* _ns1__GetAirportInformationByCountry::soap_dup(soap*) returns deep copy of _ns1__GetAirportInformationByCountry, copies the (cyclic) graph structure when a context is provided, or (cycle-pruned) tree structure with soap_set_mode(soap, SOAP_XML_TREE) (use soapcpp2 -Ec)
/// - _ns1__GetAirportInformationByCountry::soap_del() deep deletes _ns1__GetAirportInformationByCountry data members, use only after _ns1__GetAirportInformationByCountry::soap_dup(NULL) (use soapcpp2 -Ed)
class _ns1__GetAirportInformationByCountry
{ public:
/// Element "country" of XSD type xs:string.
    std::string*                         country                        0;	///< Optional element.
/// A handle to the soap struct context that manages this instance when instantiated by a context or NULL otherwise (automatically set).
    struct soap                         *soap                          ;
};

/// @brief Top-level root element "http://www.webserviceX.NET":GetAirportInformationByCountryResponse
/// @brief "http://www.webserviceX.NET":GetAirportInformationByCountryResponse is a complexType.
///
/// class _ns1__GetAirportInformationByCountryResponse operations:
/// - _ns1__GetAirportInformationByCountryResponse* soap_new__ns1__GetAirportInformationByCountryResponse(soap*) allocate
/// - _ns1__GetAirportInformationByCountryResponse* soap_new__ns1__GetAirportInformationByCountryResponse(soap*, int num) allocate array
/// - _ns1__GetAirportInformationByCountryResponse* soap_new_req__ns1__GetAirportInformationByCountryResponse(soap*, ...) allocate, set required members
/// - _ns1__GetAirportInformationByCountryResponse* soap_new_set__ns1__GetAirportInformationByCountryResponse(soap*, ...) allocate, set all public members
/// - _ns1__GetAirportInformationByCountryResponse::soap_default(soap*) reset members to default
/// - int soap_read__ns1__GetAirportInformationByCountryResponse(soap*, _ns1__GetAirportInformationByCountryResponse*) deserialize from a stream
/// - int soap_write__ns1__GetAirportInformationByCountryResponse(soap*, _ns1__GetAirportInformationByCountryResponse*) serialize to a stream
/// - _ns1__GetAirportInformationByCountryResponse* _ns1__GetAirportInformationByCountryResponse::soap_dup(soap*) returns deep copy of _ns1__GetAirportInformationByCountryResponse, copies the (cyclic) graph structure when a context is provided, or (cycle-pruned) tree structure with soap_set_mode(soap, SOAP_XML_TREE) (use soapcpp2 -Ec)
/// - _ns1__GetAirportInformationByCountryResponse::soap_del() deep deletes _ns1__GetAirportInformationByCountryResponse data members, use only after _ns1__GetAirportInformationByCountryResponse::soap_dup(NULL) (use soapcpp2 -Ed)
class _ns1__GetAirportInformationByCountryResponse
{ public:
/// Element "GetAirportInformationByCountryResult" of XSD type xs:string.
    std::string*                         GetAirportInformationByCountryResult 0;	///< Optional element.
/// A handle to the soap struct context that manages this instance when instantiated by a context or NULL otherwise (automatically set).
    struct soap                         *soap                          ;
};

/// @brief Top-level root element "http://www.webserviceX.NET":getAirportInformationByAirportCode
/// @brief "http://www.webserviceX.NET":getAirportInformationByAirportCode is a complexType.
///
/// class _ns1__getAirportInformationByAirportCode operations:
/// - _ns1__getAirportInformationByAirportCode* soap_new__ns1__getAirportInformationByAirportCode(soap*) allocate
/// - _ns1__getAirportInformationByAirportCode* soap_new__ns1__getAirportInformationByAirportCode(soap*, int num) allocate array
/// - _ns1__getAirportInformationByAirportCode* soap_new_req__ns1__getAirportInformationByAirportCode(soap*, ...) allocate, set required members
/// - _ns1__getAirportInformationByAirportCode* soap_new_set__ns1__getAirportInformationByAirportCode(soap*, ...) allocate, set all public members
/// - _ns1__getAirportInformationByAirportCode::soap_default(soap*) reset members to default
/// - int soap_read__ns1__getAirportInformationByAirportCode(soap*, _ns1__getAirportInformationByAirportCode*) deserialize from a stream
/// - int soap_write__ns1__getAirportInformationByAirportCode(soap*, _ns1__getAirportInformationByAirportCode*) serialize to a stream
/// - _ns1__getAirportInformationByAirportCode* _ns1__getAirportInformationByAirportCode::soap_dup(soap*) returns deep copy of _ns1__getAirportInformationByAirportCode, copies the (cyclic) graph structure when a context is provided, or (cycle-pruned) tree structure with soap_set_mode(soap, SOAP_XML_TREE) (use soapcpp2 -Ec)
/// - _ns1__getAirportInformationByAirportCode::soap_del() deep deletes _ns1__getAirportInformationByAirportCode data members, use only after _ns1__getAirportInformationByAirportCode::soap_dup(NULL) (use soapcpp2 -Ed)
class _ns1__getAirportInformationByAirportCode
{ public:
/// Element "airportCode" of XSD type xs:string.
    std::string*                         airportCode                    0;	///< Optional element.
/// A handle to the soap struct context that manages this instance when instantiated by a context or NULL otherwise (automatically set).
    struct soap                         *soap                          ;
};

/// @brief Top-level root element "http://www.webserviceX.NET":getAirportInformationByAirportCodeResponse
/// @brief "http://www.webserviceX.NET":getAirportInformationByAirportCodeResponse is a complexType.
///
/// class _ns1__getAirportInformationByAirportCodeResponse operations:
/// - _ns1__getAirportInformationByAirportCodeResponse* soap_new__ns1__getAirportInformationByAirportCodeResponse(soap*) allocate
/// - _ns1__getAirportInformationByAirportCodeResponse* soap_new__ns1__getAirportInformationByAirportCodeResponse(soap*, int num) allocate array
/// - _ns1__getAirportInformationByAirportCodeResponse* soap_new_req__ns1__getAirportInformationByAirportCodeResponse(soap*, ...) allocate, set required members
/// - _ns1__getAirportInformationByAirportCodeResponse* soap_new_set__ns1__getAirportInformationByAirportCodeResponse(soap*, ...) allocate, set all public members
/// - _ns1__getAirportInformationByAirportCodeResponse::soap_default(soap*) reset members to default
/// - int soap_read__ns1__getAirportInformationByAirportCodeResponse(soap*, _ns1__getAirportInformationByAirportCodeResponse*) deserialize from a stream
/// - int soap_write__ns1__getAirportInformationByAirportCodeResponse(soap*, _ns1__getAirportInformationByAirportCodeResponse*) serialize to a stream
/// - _ns1__getAirportInformationByAirportCodeResponse* _ns1__getAirportInformationByAirportCodeResponse::soap_dup(soap*) returns deep copy of _ns1__getAirportInformationByAirportCodeResponse, copies the (cyclic) graph structure when a context is provided, or (cycle-pruned) tree structure with soap_set_mode(soap, SOAP_XML_TREE) (use soapcpp2 -Ec)
/// - _ns1__getAirportInformationByAirportCodeResponse::soap_del() deep deletes _ns1__getAirportInformationByAirportCodeResponse data members, use only after _ns1__getAirportInformationByAirportCodeResponse::soap_dup(NULL) (use soapcpp2 -Ed)
class _ns1__getAirportInformationByAirportCodeResponse
{ public:
/// Element "getAirportInformationByAirportCodeResult" of XSD type xs:string.
    std::string*                         getAirportInformationByAirportCodeResult 0;	///< Optional element.
/// A handle to the soap struct context that manages this instance when instantiated by a context or NULL otherwise (automatically set).
    struct soap                         *soap                          ;
};


/******************************************************************************\
 *                                                                            *
 * Additional Top-Level Elements                                              *
 *   http://www.webserviceX.NET                                               *
 *                                                                            *
\******************************************************************************/

/// @brief Top-level root element "http://www.webserviceX.NET":string of XSD type xs:string.
/// @note Use wsdl2h option -g to auto-generate a top-level root element declaration and processing code.


/******************************************************************************\
 *                                                                            *
 * Additional Top-Level Attributes                                            *
 *   http://www.webserviceX.NET                                               *
 *                                                                            *
\******************************************************************************/


/******************************************************************************\
 *                                                                            *
 * Services                                                                   *
 *                                                                            *
\******************************************************************************/

// This service supports SOAP 1.2 namespaces:
#import "soap12.h"

//gsoap ns1  service name:	airportSoap 
//gsoap ns1  service type:	airportSoap 
//gsoap ns1  service port:	http://www.webservicex.net/airport.asmx 
//gsoap ns1  service namespace:	http://www.webserviceX.NET 
//gsoap ns1  service transport:	http://schemas.xmlsoap.org/soap/http 

/** @mainpage Service Definitions

@section Service_bindings Service Bindings

  - @ref airportSoap

@section Service_more More Information

  - @ref page_notes "Notes"

  - @ref page_XMLDataBinding "XML Data Binding"

  - @ref SOAP_ENV__Header "SOAP Header Content" (when applicable)

  - @ref SOAP_ENV__Detail "SOAP Fault Detail Content" (when applicable)


*/

/**

@page airportSoap Binding "airportSoap"

@section airportSoap_operations Operations of Binding "airportSoap"

  - @ref __ns1__getAirportInformationByISOCountryCode

  - @ref __ns1__getAirportInformationByCityOrAirportName

  - @ref __ns1__GetAirportInformationByCountry

  - @ref __ns1__getAirportInformationByAirportCode

  - @ref __ns1__getAirportInformationByISOCountryCode_

  - @ref __ns1__getAirportInformationByCityOrAirportName_

  - @ref __ns1__GetAirportInformationByCountry_

  - @ref __ns1__getAirportInformationByAirportCode_

@section airportSoap_ports Default endpoints of Binding "airportSoap"

  - http://www.webservicex.net/airport.asmx

@note Multiple service bindings collected as one, use wsdl2h option -Nname to produce a separate service for each binding


*/

/******************************************************************************\
 *                                                                            *
 * Service Binding                                                            *
 *   airportSoap                                                              *
 *                                                                            *
\******************************************************************************/


/******************************************************************************\
 *                                                                            *
 * Service Operation                                                          *
 *   __ns1__getAirportInformationByISOCountryCode                             *
 *                                                                            *
\******************************************************************************/


/** Operation "__ns1__getAirportInformationByISOCountryCode" of service binding "airportSoap".
Get Airport Code, CityOrAirport Name, Country, Country Abbrv, CountryCode,GMT Offset
Runway Length in Feet, Runway Elevation in Feet,Latitude in Degree,Latitude in
Minute Latitude in Second,Latitude in N/S, Longitude in Degree, Longitude in Minute,
Longitude in Seconds and longitude E/W by ISO country code 

  - SOAP document/literal style messaging

  - Default endpoints:
    - http://www.webservicex.net/airport.asmx

  - Default SOAP action or REST location path:
    - "http://www.webserviceX.NET/getAirportInformationByISOCountryCode"

  - Addressing input action: "http://www.webserviceX.NET/getAirportInformationByISOCountryCode"

  - Addressing output action: "http://www.webserviceX.NET/getAirportInformationByISOCountryCodeResponse"

C stub function (defined in soapClient.c[pp] generated by soapcpp2):
@code
  int soap_call___ns1__getAirportInformationByISOCountryCode(
    struct soap *soap,
    NULL, // char *endpoint = NULL selects default endpoint for this operation
    NULL, // char *action = NULL selects default action for this operation
    // input parameters:
    _ns1__getAirportInformationByISOCountryCode* ns1__getAirportInformationByISOCountryCode,
    // output parameters:
    _ns1__getAirportInformationByISOCountryCodeResponse&ns1__getAirportInformationByISOCountryCodeResponse
  );
@endcode

C server function (called from the service dispatcher defined in soapServer.c[pp]):
@code
  int __ns1__getAirportInformationByISOCountryCode(
    struct soap *soap,
    // input parameters:
    _ns1__getAirportInformationByISOCountryCode* ns1__getAirportInformationByISOCountryCode,
    // output parameters:
    _ns1__getAirportInformationByISOCountryCodeResponse&ns1__getAirportInformationByISOCountryCodeResponse
  );
@endcode

C++ proxy class (defined in soapairportSoapProxy.h generated with soapcpp2):
@code
  class airportSoapProxy;
@endcode
Important: use soapcpp2 option '-j' (or '-i') to generate improved and easy-to-use proxy classes;

C++ service class (defined in soapairportSoapService.h generated with soapcpp2):
@code
  class airportSoapService;
@endcode
Important: use soapcpp2 option '-j' (or '-i') to generate improved and easy-to-use service classes;

*/

//gsoap ns1  service method-protocol:	getAirportInformationByISOCountryCode SOAP
//gsoap ns1  service method-style:	getAirportInformationByISOCountryCode document
//gsoap ns1  service method-encoding:	getAirportInformationByISOCountryCode literal
//gsoap ns1  service method-input-action:	getAirportInformationByISOCountryCode http://www.webserviceX.NET/getAirportInformationByISOCountryCode
//gsoap ns1  service method-output-action:	getAirportInformationByISOCountryCode http://www.webserviceX.NET/getAirportInformationByISOCountryCodeResponse
int __ns1__getAirportInformationByISOCountryCode(
    _ns1__getAirportInformationByISOCountryCode* ns1__getAirportInformationByISOCountryCode,	///< Input parameter
    _ns1__getAirportInformationByISOCountryCodeResponse&ns1__getAirportInformationByISOCountryCodeResponse	///< Output parameter
);

/******************************************************************************\
 *                                                                            *
 * Service Operation                                                          *
 *   __ns1__getAirportInformationByCityOrAirportName                          *
 *                                                                            *
\******************************************************************************/


/** Operation "__ns1__getAirportInformationByCityOrAirportName" of service binding "airportSoap".
Get Airport Code, CityOrAirport Name, Country, Country Abbrv, CountryCode,GMT Offset
Runway Length in Feet, Runway Elevation in Feet,Latitude in Degree,Latitude in
Minute Latitude in Second,Latitude in N/S, Longitude in Degree, Longitude in Minute,
Longitude in Seconds and longitude E/W by city or airport name 

  - SOAP document/literal style messaging

  - Default endpoints:
    - http://www.webservicex.net/airport.asmx

  - Default SOAP action or REST location path:
    - "http://www.webserviceX.NET/getAirportInformationByCityOrAirportName"

  - Addressing input action: "http://www.webserviceX.NET/getAirportInformationByCityOrAirportName"

  - Addressing output action: "http://www.webserviceX.NET/getAirportInformationByCityOrAirportNameResponse"

C stub function (defined in soapClient.c[pp] generated by soapcpp2):
@code
  int soap_call___ns1__getAirportInformationByCityOrAirportName(
    struct soap *soap,
    NULL, // char *endpoint = NULL selects default endpoint for this operation
    NULL, // char *action = NULL selects default action for this operation
    // input parameters:
    _ns1__getAirportInformationByCityOrAirportName* ns1__getAirportInformationByCityOrAirportName,
    // output parameters:
    _ns1__getAirportInformationByCityOrAirportNameResponse&ns1__getAirportInformationByCityOrAirportNameResponse
  );
@endcode

C server function (called from the service dispatcher defined in soapServer.c[pp]):
@code
  int __ns1__getAirportInformationByCityOrAirportName(
    struct soap *soap,
    // input parameters:
    _ns1__getAirportInformationByCityOrAirportName* ns1__getAirportInformationByCityOrAirportName,
    // output parameters:
    _ns1__getAirportInformationByCityOrAirportNameResponse&ns1__getAirportInformationByCityOrAirportNameResponse
  );
@endcode

C++ proxy class (defined in soapairportSoapProxy.h generated with soapcpp2):
@code
  class airportSoapProxy;
@endcode
Important: use soapcpp2 option '-j' (or '-i') to generate improved and easy-to-use proxy classes;

C++ service class (defined in soapairportSoapService.h generated with soapcpp2):
@code
  class airportSoapService;
@endcode
Important: use soapcpp2 option '-j' (or '-i') to generate improved and easy-to-use service classes;

*/

//gsoap ns1  service method-protocol:	getAirportInformationByCityOrAirportName SOAP
//gsoap ns1  service method-style:	getAirportInformationByCityOrAirportName document
//gsoap ns1  service method-encoding:	getAirportInformationByCityOrAirportName literal
//gsoap ns1  service method-input-action:	getAirportInformationByCityOrAirportName http://www.webserviceX.NET/getAirportInformationByCityOrAirportName
//gsoap ns1  service method-output-action:	getAirportInformationByCityOrAirportName http://www.webserviceX.NET/getAirportInformationByCityOrAirportNameResponse
int __ns1__getAirportInformationByCityOrAirportName(
    _ns1__getAirportInformationByCityOrAirportName* ns1__getAirportInformationByCityOrAirportName,	///< Input parameter
    _ns1__getAirportInformationByCityOrAirportNameResponse&ns1__getAirportInformationByCityOrAirportNameResponse	///< Output parameter
);

/******************************************************************************\
 *                                                                            *
 * Service Operation                                                          *
 *   __ns1__GetAirportInformationByCountry                                    *
 *                                                                            *
\******************************************************************************/


/** Operation "__ns1__GetAirportInformationByCountry" of service binding "airportSoap".
Get Airport Code, CityOrAirport Name, Country, Country Abbrv, CountryCode,GMT Offset
Runway Length in Feet, Runway Elevation in Feet,Latitude in Degree,Latitude in
Minute Latitude in Second,Latitude in N/S, Longitude in Degree, Longitude in Minute,
Longitude in Seconds and longitude E/W by country name 

  - SOAP document/literal style messaging

  - Default endpoints:
    - http://www.webservicex.net/airport.asmx

  - Default SOAP action or REST location path:
    - "http://www.webserviceX.NET/GetAirportInformationByCountry"

  - Addressing input action: "http://www.webserviceX.NET/GetAirportInformationByCountry"

  - Addressing output action: "http://www.webserviceX.NET/GetAirportInformationByCountryResponse"

C stub function (defined in soapClient.c[pp] generated by soapcpp2):
@code
  int soap_call___ns1__GetAirportInformationByCountry(
    struct soap *soap,
    NULL, // char *endpoint = NULL selects default endpoint for this operation
    NULL, // char *action = NULL selects default action for this operation
    // input parameters:
    _ns1__GetAirportInformationByCountry* ns1__GetAirportInformationByCountry,
    // output parameters:
    _ns1__GetAirportInformationByCountryResponse&ns1__GetAirportInformationByCountryResponse
  );
@endcode

C server function (called from the service dispatcher defined in soapServer.c[pp]):
@code
  int __ns1__GetAirportInformationByCountry(
    struct soap *soap,
    // input parameters:
    _ns1__GetAirportInformationByCountry* ns1__GetAirportInformationByCountry,
    // output parameters:
    _ns1__GetAirportInformationByCountryResponse&ns1__GetAirportInformationByCountryResponse
  );
@endcode

C++ proxy class (defined in soapairportSoapProxy.h generated with soapcpp2):
@code
  class airportSoapProxy;
@endcode
Important: use soapcpp2 option '-j' (or '-i') to generate improved and easy-to-use proxy classes;

C++ service class (defined in soapairportSoapService.h generated with soapcpp2):
@code
  class airportSoapService;
@endcode
Important: use soapcpp2 option '-j' (or '-i') to generate improved and easy-to-use service classes;

*/

//gsoap ns1  service method-protocol:	GetAirportInformationByCountry SOAP
//gsoap ns1  service method-style:	GetAirportInformationByCountry document
//gsoap ns1  service method-encoding:	GetAirportInformationByCountry literal
//gsoap ns1  service method-input-action:	GetAirportInformationByCountry http://www.webserviceX.NET/GetAirportInformationByCountry
//gsoap ns1  service method-output-action:	GetAirportInformationByCountry http://www.webserviceX.NET/GetAirportInformationByCountryResponse
int __ns1__GetAirportInformationByCountry(
    _ns1__GetAirportInformationByCountry* ns1__GetAirportInformationByCountry,	///< Input parameter
    _ns1__GetAirportInformationByCountryResponse&ns1__GetAirportInformationByCountryResponse	///< Output parameter
);

/******************************************************************************\
 *                                                                            *
 * Service Operation                                                          *
 *   __ns1__getAirportInformationByAirportCode                                *
 *                                                                            *
\******************************************************************************/


/** Operation "__ns1__getAirportInformationByAirportCode" of service binding "airportSoap".
Get Airport Code, CityOrAirport Name, Country, Country Abbrv, CountryCode,GMT Offset
Runway Length in Feet, Runway Elevation in Feet,Latitude in Degree,Latitude in
Minute Latitude in Second,Latitude in N/S, Longitude in Degree, Longitude in Minute,
Longitude in Seconds and longitude E/W by airport code 

  - SOAP document/literal style messaging

  - Default endpoints:
    - http://www.webservicex.net/airport.asmx

  - Default SOAP action or REST location path:
    - "http://www.webserviceX.NET/getAirportInformationByAirportCode"

  - Addressing input action: "http://www.webserviceX.NET/getAirportInformationByAirportCode"

  - Addressing output action: "http://www.webserviceX.NET/getAirportInformationByAirportCodeResponse"

C stub function (defined in soapClient.c[pp] generated by soapcpp2):
@code
  int soap_call___ns1__getAirportInformationByAirportCode(
    struct soap *soap,
    NULL, // char *endpoint = NULL selects default endpoint for this operation
    NULL, // char *action = NULL selects default action for this operation
    // input parameters:
    _ns1__getAirportInformationByAirportCode* ns1__getAirportInformationByAirportCode,
    // output parameters:
    _ns1__getAirportInformationByAirportCodeResponse&ns1__getAirportInformationByAirportCodeResponse
  );
@endcode

C server function (called from the service dispatcher defined in soapServer.c[pp]):
@code
  int __ns1__getAirportInformationByAirportCode(
    struct soap *soap,
    // input parameters:
    _ns1__getAirportInformationByAirportCode* ns1__getAirportInformationByAirportCode,
    // output parameters:
    _ns1__getAirportInformationByAirportCodeResponse&ns1__getAirportInformationByAirportCodeResponse
  );
@endcode

C++ proxy class (defined in soapairportSoapProxy.h generated with soapcpp2):
@code
  class airportSoapProxy;
@endcode
Important: use soapcpp2 option '-j' (or '-i') to generate improved and easy-to-use proxy classes;

C++ service class (defined in soapairportSoapService.h generated with soapcpp2):
@code
  class airportSoapService;
@endcode
Important: use soapcpp2 option '-j' (or '-i') to generate improved and easy-to-use service classes;

*/

//gsoap ns1  service method-protocol:	getAirportInformationByAirportCode SOAP
//gsoap ns1  service method-style:	getAirportInformationByAirportCode document
//gsoap ns1  service method-encoding:	getAirportInformationByAirportCode literal
//gsoap ns1  service method-input-action:	getAirportInformationByAirportCode http://www.webserviceX.NET/getAirportInformationByAirportCode
//gsoap ns1  service method-output-action:	getAirportInformationByAirportCode http://www.webserviceX.NET/getAirportInformationByAirportCodeResponse
int __ns1__getAirportInformationByAirportCode(
    _ns1__getAirportInformationByAirportCode* ns1__getAirportInformationByAirportCode,	///< Input parameter
    _ns1__getAirportInformationByAirportCodeResponse&ns1__getAirportInformationByAirportCodeResponse	///< Output parameter
);

/******************************************************************************\
 *                                                                            *
 * Service Operation                                                          *
 *   __ns1__getAirportInformationByISOCountryCode_                            *
 *                                                                            *
\******************************************************************************/


/** Operation "__ns1__getAirportInformationByISOCountryCode_" of service binding "airportSoap".
Get Airport Code, CityOrAirport Name, Country, Country Abbrv, CountryCode,GMT Offset
Runway Length in Feet, Runway Elevation in Feet,Latitude in Degree,Latitude in
Minute Latitude in Second,Latitude in N/S, Longitude in Degree, Longitude in Minute,
Longitude in Seconds and longitude E/W by ISO country code 

  - SOAP document/literal style messaging

  - Default endpoints:
    - http://www.webservicex.net/airport.asmx

  - Default SOAP action or REST location path:
    - "http://www.webserviceX.NET/getAirportInformationByISOCountryCode"

  - Addressing input action: "http://www.webserviceX.NET/getAirportInformationByISOCountryCode"

  - Addressing output action: "http://www.webserviceX.NET/getAirportInformationByISOCountryCodeResponse"

C stub function (defined in soapClient.c[pp] generated by soapcpp2):
@code
  int soap_call___ns1__getAirportInformationByISOCountryCode_(
    struct soap *soap,
    NULL, // char *endpoint = NULL selects default endpoint for this operation
    NULL, // char *action = NULL selects default action for this operation
    // input parameters:
    _ns1__getAirportInformationByISOCountryCode* ns1__getAirportInformationByISOCountryCode,
    // output parameters:
    _ns1__getAirportInformationByISOCountryCodeResponse&ns1__getAirportInformationByISOCountryCodeResponse
  );
@endcode

C server function (called from the service dispatcher defined in soapServer.c[pp]):
@code
  int __ns1__getAirportInformationByISOCountryCode_(
    struct soap *soap,
    // input parameters:
    _ns1__getAirportInformationByISOCountryCode* ns1__getAirportInformationByISOCountryCode,
    // output parameters:
    _ns1__getAirportInformationByISOCountryCodeResponse&ns1__getAirportInformationByISOCountryCodeResponse
  );
@endcode

C++ proxy class (defined in soapairportSoapProxy.h generated with soapcpp2):
@code
  class airportSoapProxy;
@endcode
Important: use soapcpp2 option '-j' (or '-i') to generate improved and easy-to-use proxy classes;

C++ service class (defined in soapairportSoapService.h generated with soapcpp2):
@code
  class airportSoapService;
@endcode
Important: use soapcpp2 option '-j' (or '-i') to generate improved and easy-to-use service classes;

*/

//gsoap ns1  service method-protocol:	getAirportInformationByISOCountryCode_ SOAP
//gsoap ns1  service method-style:	getAirportInformationByISOCountryCode_ document
//gsoap ns1  service method-encoding:	getAirportInformationByISOCountryCode_ literal
//gsoap ns1  service method-input-action:	getAirportInformationByISOCountryCode_ http://www.webserviceX.NET/getAirportInformationByISOCountryCode
//gsoap ns1  service method-output-action:	getAirportInformationByISOCountryCode_ http://www.webserviceX.NET/getAirportInformationByISOCountryCodeResponse
int __ns1__getAirportInformationByISOCountryCode_(
    _ns1__getAirportInformationByISOCountryCode* ns1__getAirportInformationByISOCountryCode,	///< Input parameter
    _ns1__getAirportInformationByISOCountryCodeResponse&ns1__getAirportInformationByISOCountryCodeResponse	///< Output parameter
);

/******************************************************************************\
 *                                                                            *
 * Service Operation                                                          *
 *   __ns1__getAirportInformationByCityOrAirportName_                         *
 *                                                                            *
\******************************************************************************/


/** Operation "__ns1__getAirportInformationByCityOrAirportName_" of service binding "airportSoap".
Get Airport Code, CityOrAirport Name, Country, Country Abbrv, CountryCode,GMT Offset
Runway Length in Feet, Runway Elevation in Feet,Latitude in Degree,Latitude in
Minute Latitude in Second,Latitude in N/S, Longitude in Degree, Longitude in Minute,
Longitude in Seconds and longitude E/W by city or airport name 

  - SOAP document/literal style messaging

  - Default endpoints:
    - http://www.webservicex.net/airport.asmx

  - Default SOAP action or REST location path:
    - "http://www.webserviceX.NET/getAirportInformationByCityOrAirportName"

  - Addressing input action: "http://www.webserviceX.NET/getAirportInformationByCityOrAirportName"

  - Addressing output action: "http://www.webserviceX.NET/getAirportInformationByCityOrAirportNameResponse"

C stub function (defined in soapClient.c[pp] generated by soapcpp2):
@code
  int soap_call___ns1__getAirportInformationByCityOrAirportName_(
    struct soap *soap,
    NULL, // char *endpoint = NULL selects default endpoint for this operation
    NULL, // char *action = NULL selects default action for this operation
    // input parameters:
    _ns1__getAirportInformationByCityOrAirportName* ns1__getAirportInformationByCityOrAirportName,
    // output parameters:
    _ns1__getAirportInformationByCityOrAirportNameResponse&ns1__getAirportInformationByCityOrAirportNameResponse
  );
@endcode

C server function (called from the service dispatcher defined in soapServer.c[pp]):
@code
  int __ns1__getAirportInformationByCityOrAirportName_(
    struct soap *soap,
    // input parameters:
    _ns1__getAirportInformationByCityOrAirportName* ns1__getAirportInformationByCityOrAirportName,
    // output parameters:
    _ns1__getAirportInformationByCityOrAirportNameResponse&ns1__getAirportInformationByCityOrAirportNameResponse
  );
@endcode

C++ proxy class (defined in soapairportSoapProxy.h generated with soapcpp2):
@code
  class airportSoapProxy;
@endcode
Important: use soapcpp2 option '-j' (or '-i') to generate improved and easy-to-use proxy classes;

C++ service class (defined in soapairportSoapService.h generated with soapcpp2):
@code
  class airportSoapService;
@endcode
Important: use soapcpp2 option '-j' (or '-i') to generate improved and easy-to-use service classes;

*/

//gsoap ns1  service method-protocol:	getAirportInformationByCityOrAirportName_ SOAP
//gsoap ns1  service method-style:	getAirportInformationByCityOrAirportName_ document
//gsoap ns1  service method-encoding:	getAirportInformationByCityOrAirportName_ literal
//gsoap ns1  service method-input-action:	getAirportInformationByCityOrAirportName_ http://www.webserviceX.NET/getAirportInformationByCityOrAirportName
//gsoap ns1  service method-output-action:	getAirportInformationByCityOrAirportName_ http://www.webserviceX.NET/getAirportInformationByCityOrAirportNameResponse
int __ns1__getAirportInformationByCityOrAirportName_(
    _ns1__getAirportInformationByCityOrAirportName* ns1__getAirportInformationByCityOrAirportName,	///< Input parameter
    _ns1__getAirportInformationByCityOrAirportNameResponse&ns1__getAirportInformationByCityOrAirportNameResponse	///< Output parameter
);

/******************************************************************************\
 *                                                                            *
 * Service Operation                                                          *
 *   __ns1__GetAirportInformationByCountry_                                   *
 *                                                                            *
\******************************************************************************/


/** Operation "__ns1__GetAirportInformationByCountry_" of service binding "airportSoap".
Get Airport Code, CityOrAirport Name, Country, Country Abbrv, CountryCode,GMT Offset
Runway Length in Feet, Runway Elevation in Feet,Latitude in Degree,Latitude in
Minute Latitude in Second,Latitude in N/S, Longitude in Degree, Longitude in Minute,
Longitude in Seconds and longitude E/W by country name 

  - SOAP document/literal style messaging

  - Default endpoints:
    - http://www.webservicex.net/airport.asmx

  - Default SOAP action or REST location path:
    - "http://www.webserviceX.NET/GetAirportInformationByCountry"

  - Addressing input action: "http://www.webserviceX.NET/GetAirportInformationByCountry"

  - Addressing output action: "http://www.webserviceX.NET/GetAirportInformationByCountryResponse"

C stub function (defined in soapClient.c[pp] generated by soapcpp2):
@code
  int soap_call___ns1__GetAirportInformationByCountry_(
    struct soap *soap,
    NULL, // char *endpoint = NULL selects default endpoint for this operation
    NULL, // char *action = NULL selects default action for this operation
    // input parameters:
    _ns1__GetAirportInformationByCountry* ns1__GetAirportInformationByCountry,
    // output parameters:
    _ns1__GetAirportInformationByCountryResponse&ns1__GetAirportInformationByCountryResponse
  );
@endcode

C server function (called from the service dispatcher defined in soapServer.c[pp]):
@code
  int __ns1__GetAirportInformationByCountry_(
    struct soap *soap,
    // input parameters:
    _ns1__GetAirportInformationByCountry* ns1__GetAirportInformationByCountry,
    // output parameters:
    _ns1__GetAirportInformationByCountryResponse&ns1__GetAirportInformationByCountryResponse
  );
@endcode

C++ proxy class (defined in soapairportSoapProxy.h generated with soapcpp2):
@code
  class airportSoapProxy;
@endcode
Important: use soapcpp2 option '-j' (or '-i') to generate improved and easy-to-use proxy classes;

C++ service class (defined in soapairportSoapService.h generated with soapcpp2):
@code
  class airportSoapService;
@endcode
Important: use soapcpp2 option '-j' (or '-i') to generate improved and easy-to-use service classes;

*/

//gsoap ns1  service method-protocol:	GetAirportInformationByCountry_ SOAP
//gsoap ns1  service method-style:	GetAirportInformationByCountry_ document
//gsoap ns1  service method-encoding:	GetAirportInformationByCountry_ literal
//gsoap ns1  service method-input-action:	GetAirportInformationByCountry_ http://www.webserviceX.NET/GetAirportInformationByCountry
//gsoap ns1  service method-output-action:	GetAirportInformationByCountry_ http://www.webserviceX.NET/GetAirportInformationByCountryResponse
int __ns1__GetAirportInformationByCountry_(
    _ns1__GetAirportInformationByCountry* ns1__GetAirportInformationByCountry,	///< Input parameter
    _ns1__GetAirportInformationByCountryResponse&ns1__GetAirportInformationByCountryResponse	///< Output parameter
);

/******************************************************************************\
 *                                                                            *
 * Service Operation                                                          *
 *   __ns1__getAirportInformationByAirportCode_                               *
 *                                                                            *
\******************************************************************************/


/** Operation "__ns1__getAirportInformationByAirportCode_" of service binding "airportSoap".
Get Airport Code, CityOrAirport Name, Country, Country Abbrv, CountryCode,GMT Offset
Runway Length in Feet, Runway Elevation in Feet,Latitude in Degree,Latitude in
Minute Latitude in Second,Latitude in N/S, Longitude in Degree, Longitude in Minute,
Longitude in Seconds and longitude E/W by airport code 

  - SOAP document/literal style messaging

  - Default endpoints:
    - http://www.webservicex.net/airport.asmx

  - Default SOAP action or REST location path:
    - "http://www.webserviceX.NET/getAirportInformationByAirportCode"

  - Addressing input action: "http://www.webserviceX.NET/getAirportInformationByAirportCode"

  - Addressing output action: "http://www.webserviceX.NET/getAirportInformationByAirportCodeResponse"

C stub function (defined in soapClient.c[pp] generated by soapcpp2):
@code
  int soap_call___ns1__getAirportInformationByAirportCode_(
    struct soap *soap,
    NULL, // char *endpoint = NULL selects default endpoint for this operation
    NULL, // char *action = NULL selects default action for this operation
    // input parameters:
    _ns1__getAirportInformationByAirportCode* ns1__getAirportInformationByAirportCode,
    // output parameters:
    _ns1__getAirportInformationByAirportCodeResponse&ns1__getAirportInformationByAirportCodeResponse
  );
@endcode

C server function (called from the service dispatcher defined in soapServer.c[pp]):
@code
  int __ns1__getAirportInformationByAirportCode_(
    struct soap *soap,
    // input parameters:
    _ns1__getAirportInformationByAirportCode* ns1__getAirportInformationByAirportCode,
    // output parameters:
    _ns1__getAirportInformationByAirportCodeResponse&ns1__getAirportInformationByAirportCodeResponse
  );
@endcode

C++ proxy class (defined in soapairportSoapProxy.h generated with soapcpp2):
@code
  class airportSoapProxy;
@endcode
Important: use soapcpp2 option '-j' (or '-i') to generate improved and easy-to-use proxy classes;

C++ service class (defined in soapairportSoapService.h generated with soapcpp2):
@code
  class airportSoapService;
@endcode
Important: use soapcpp2 option '-j' (or '-i') to generate improved and easy-to-use service classes;

*/

//gsoap ns1  service method-protocol:	getAirportInformationByAirportCode_ SOAP
//gsoap ns1  service method-style:	getAirportInformationByAirportCode_ document
//gsoap ns1  service method-encoding:	getAirportInformationByAirportCode_ literal
//gsoap ns1  service method-input-action:	getAirportInformationByAirportCode_ http://www.webserviceX.NET/getAirportInformationByAirportCode
//gsoap ns1  service method-output-action:	getAirportInformationByAirportCode_ http://www.webserviceX.NET/getAirportInformationByAirportCodeResponse
int __ns1__getAirportInformationByAirportCode_(
    _ns1__getAirportInformationByAirportCode* ns1__getAirportInformationByAirportCode,	///< Input parameter
    _ns1__getAirportInformationByAirportCodeResponse&ns1__getAirportInformationByAirportCodeResponse	///< Output parameter
);

/**

@page airportSoap Binding "airportSoap"

@section airportSoap_policy_enablers Policy Enablers of Binding "airportSoap"

None specified.

*/

/******************************************************************************\
 *                                                                            *
 * XML Data Binding                                                           *
 *                                                                            *
\******************************************************************************/


/**

@page page_XMLDataBinding XML Data Binding

SOAP/XML services use data bindings contractually bound by WSDL and auto-
generated by wsdl2h and soapcpp2 (see Service Bindings). Plain data bindings
are adopted from XML schemas as part of the WSDL types section or when running
wsdl2h on a set of schemas to produce non-SOAP-based XML data bindings.

The following readers and writers are C/C++ data type (de)serializers auto-
generated by wsdl2h and soapcpp2. Run soapcpp2 on this file to generate the
(de)serialization code, which is stored in soapC.c[pp]. Include "soapH.h" in
your code to import these data type and function declarations. Only use the
soapcpp2-generated files in your project build. Do not include the wsdl2h-
generated .h file in your code.

Data can be read and deserialized from:
  - an int file descriptor, using soap->recvfd = fd
  - a socket, using soap->socket = (int)...
  - a C++ stream (istream, stringstream), using soap->is = (istream*)...
  - a C string, using soap->is = (const char*)...
  - any input, using the soap->frecv() callback

Data can be serialized and written to:
  - an int file descriptor, using soap->sendfd = (int)...
  - a socket, using soap->socket = (int)...
  - a C++ stream (ostream, stringstream), using soap->os = (ostream*)...
  - a C string, using soap->os = (const char**)...
  - any output, using the soap->fsend() callback

The following options are available for (de)serialization control:
  - soap->encodingStyle = NULL; to remove SOAP 1.1/1.2 encodingStyle
  - soap_mode(soap, SOAP_XML_TREE); XML without id-ref (no cycles!)
  - soap_mode(soap, SOAP_XML_GRAPH); XML with id-ref (including cycles)
  - soap_set_namespaces(soap, struct Namespace *nsmap); to set xmlns bindings


@section ns1 Top-level root elements of schema "http://www.webserviceX.NET"

  - <ns1:getAirportInformationByISOCountryCode> @ref _ns1__getAirportInformationByISOCountryCode
    @code
    // Reader (returns SOAP_OK on success):
    soap_read__ns1__getAirportInformationByISOCountryCode(struct soap*, _ns1__getAirportInformationByISOCountryCode*);
    // Writer (returns SOAP_OK on success):
    soap_write__ns1__getAirportInformationByISOCountryCode(struct soap*, _ns1__getAirportInformationByISOCountryCode*);
    @endcode

  - <ns1:getAirportInformationByISOCountryCodeResponse> @ref _ns1__getAirportInformationByISOCountryCodeResponse
    @code
    // Reader (returns SOAP_OK on success):
    soap_read__ns1__getAirportInformationByISOCountryCodeResponse(struct soap*, _ns1__getAirportInformationByISOCountryCodeResponse*);
    // Writer (returns SOAP_OK on success):
    soap_write__ns1__getAirportInformationByISOCountryCodeResponse(struct soap*, _ns1__getAirportInformationByISOCountryCodeResponse*);
    @endcode

  - <ns1:getAirportInformationByCityOrAirportName> @ref _ns1__getAirportInformationByCityOrAirportName
    @code
    // Reader (returns SOAP_OK on success):
    soap_read__ns1__getAirportInformationByCityOrAirportName(struct soap*, _ns1__getAirportInformationByCityOrAirportName*);
    // Writer (returns SOAP_OK on success):
    soap_write__ns1__getAirportInformationByCityOrAirportName(struct soap*, _ns1__getAirportInformationByCityOrAirportName*);
    @endcode

  - <ns1:getAirportInformationByCityOrAirportNameResponse> @ref _ns1__getAirportInformationByCityOrAirportNameResponse
    @code
    // Reader (returns SOAP_OK on success):
    soap_read__ns1__getAirportInformationByCityOrAirportNameResponse(struct soap*, _ns1__getAirportInformationByCityOrAirportNameResponse*);
    // Writer (returns SOAP_OK on success):
    soap_write__ns1__getAirportInformationByCityOrAirportNameResponse(struct soap*, _ns1__getAirportInformationByCityOrAirportNameResponse*);
    @endcode

  - <ns1:GetAirportInformationByCountry> @ref _ns1__GetAirportInformationByCountry
    @code
    // Reader (returns SOAP_OK on success):
    soap_read__ns1__GetAirportInformationByCountry(struct soap*, _ns1__GetAirportInformationByCountry*);
    // Writer (returns SOAP_OK on success):
    soap_write__ns1__GetAirportInformationByCountry(struct soap*, _ns1__GetAirportInformationByCountry*);
    @endcode

  - <ns1:GetAirportInformationByCountryResponse> @ref _ns1__GetAirportInformationByCountryResponse
    @code
    // Reader (returns SOAP_OK on success):
    soap_read__ns1__GetAirportInformationByCountryResponse(struct soap*, _ns1__GetAirportInformationByCountryResponse*);
    // Writer (returns SOAP_OK on success):
    soap_write__ns1__GetAirportInformationByCountryResponse(struct soap*, _ns1__GetAirportInformationByCountryResponse*);
    @endcode

  - <ns1:getAirportInformationByAirportCode> @ref _ns1__getAirportInformationByAirportCode
    @code
    // Reader (returns SOAP_OK on success):
    soap_read__ns1__getAirportInformationByAirportCode(struct soap*, _ns1__getAirportInformationByAirportCode*);
    // Writer (returns SOAP_OK on success):
    soap_write__ns1__getAirportInformationByAirportCode(struct soap*, _ns1__getAirportInformationByAirportCode*);
    @endcode

  - <ns1:getAirportInformationByAirportCodeResponse> @ref _ns1__getAirportInformationByAirportCodeResponse
    @code
    // Reader (returns SOAP_OK on success):
    soap_read__ns1__getAirportInformationByAirportCodeResponse(struct soap*, _ns1__getAirportInformationByAirportCodeResponse*);
    // Writer (returns SOAP_OK on success):
    soap_write__ns1__getAirportInformationByAirportCodeResponse(struct soap*, _ns1__getAirportInformationByAirportCodeResponse*);
    @endcode

  - <ns1:string> (use wsdl2h option -g to auto-generate type _ns1__string)

*/

/* End of airport.h */
