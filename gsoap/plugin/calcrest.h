/* calcrest.h
   Generated by wsdl2h 2.8.106 from calcrest.wsdl and typemap.dat
   2020-09-07 14:46:45 GMT

   DO NOT INCLUDE THIS ANNOTATED FILE DIRECTLY IN YOUR PROJECT SOURCE CODE.
   USE THE FILES GENERATED BY soapcpp2 FOR YOUR PROJECT'S SOURCE CODE.

gSOAP XML Web services tools
Copyright (C) 2000-2020, Robert van Engelen, Genivia Inc. All Rights Reserved.
This program is released under the GPL with the additional exemption that
compiling, linking, and/or using OpenSSL is allowed.
--------------------------------------------------------------------------------
A commercial use license is available from Genivia Inc., contact@genivia.com
--------------------------------------------------------------------------------
*/

/**

@page page_notes Notes

@note HINTS:
 - Run soapcpp2 on calcrest.h to generate the SOAP/XML processing logic:
   Use soapcpp2 -I to specify paths for #import
   Use soapcpp2 -j to generate improved proxy and server classes.
   Use soapcpp2 -r to generate a report.
 - Edit 'typemap.dat' to control namespace bindings and type mappings:
   It is strongly recommended to customize the names of the namespace prefixes
   generated by wsdl2h. To do so, modify the prefix bindings in the Namespaces
   section below and add the modified lines to 'typemap.dat' to rerun wsdl2h.
 - Run Doxygen (www.doxygen.org) on this file to generate documentation.
 - Use wsdl2h -c to generate pure C code.
 - Use wsdl2h -R to include the REST operations defined by the WSDLs.
 - Use wsdl2h -O3 or -O4 to optimize by removing unused schema components.
 - Use wsdl2h -d to enable DOM support for xsd:any and xsd:anyType.
 - Use wsdl2h -F to simulate struct-type derivation in C (also works in C++).
 - Use wsdl2h -f to generate flat C++ class hierarchy, removes type derivation.
 - Use wsdl2h -g to generate top-level root elements with readers and writers.
 - Use wsdl2h -U to map XML names to C++ Unicode identifiers instead of _xNNNN.
 - Use wsdl2h -u to disable the generation of unions.
 - Use wsdl2h -L to remove this @note and all other @note comments.
 - Use wsdl2h -nname to use name as the base namespace prefix instead of 'ns'.
 - Use wsdl2h -Nname for service prefix and produce multiple service bindings
 - Struct/class members serialized as XML attributes are annotated with a '@'.
 - Struct/class members that have a special role are annotated with a '$'.

@warning
   DO NOT INCLUDE THIS ANNOTATED FILE DIRECTLY IN YOUR PROJECT SOURCE CODE.
   USE THE FILES GENERATED BY soapcpp2 FOR YOUR PROJECT'S SOURCE CODE:
   THE GENERATED soapStub.h FILE CONTAINS THIS CONTENT WITHOUT ANNOTATIONS.

@copyright LICENSE:
@verbatim
--------------------------------------------------------------------------------
gSOAP XML Web services tools
Copyright (C) 2000-2020, Robert van Engelen, Genivia Inc. All Rights Reserved.
The wsdl2h tool and its generated software are released under the GPL.
This software is released under the GPL with the additional exemption that
compiling, linking, and/or using OpenSSL is allowed.
--------------------------------------------------------------------------------
GPL license.

This program is free software; you can redistribute it and/or modify it under
the terms of the GNU General Public License as published by the Free Software
Foundation; either version 2 of the License, or (at your option) any later
version.

This program is distributed in the hope that it will be useful, but WITHOUT ANY
WARRANTY; without even the implied warranty of MERCHANTABILITY or FITNESS FOR A
PARTICULAR PURPOSE. See the GNU General Public License for more details.

You should have received a copy of the GNU General Public License along with
this program; if not, write to the Free Software Foundation, Inc., 59 Temple
Place, Suite 330, Boston, MA 02111-1307 USA

Author contact information:
engelen@genivia.com / engelen@acm.org

This program is released under the GPL with the additional exemption that
compiling, linking, and/or using OpenSSL is allowed.
--------------------------------------------------------------------------------
A commercial-use license is available from Genivia, Inc., contact@genivia.com
--------------------------------------------------------------------------------
@endverbatim

*/


//gsoapopt c,w

/******************************************************************************\
 *                                                                            *
 * Definitions                                                                *
 *   http://websrv.cs.fsu.edu/~engelen/calc.wsdl                              *
 *                                                                            *
\******************************************************************************/


/******************************************************************************\
 *                                                                            *
 * $SIZE typemap variable:                                                    *
 *   int                                                                      *
 *                                                                            *
\******************************************************************************/


/******************************************************************************\
 *                                                                            *
 * Import                                                                     *
 *                                                                            *
\******************************************************************************/


/******************************************************************************\
 *                                                                            *
 * Schema Namespaces                                                          *
 *                                                                            *
\******************************************************************************/


/* NOTE:

It is strongly recommended to customize the names of the namespace prefixes
generated by wsdl2h. To do so, modify the prefix bindings below and add the
modified lines to 'typemap.dat' then rerun wsdl2h (use wsdl2h -t typemap.dat):

ns1 = "http://websrv.cs.fsu.edu/~engelen/calc.wsdl"
ns2 = "urn:calc"

*/

#define SOAP_NAMESPACE_OF_ns2	"urn:calc"
//gsoap ns2   schema namespace:	urn:calc
//gsoap ns2   schema form:	unqualified

/******************************************************************************\
 *                                                                            *
 * Built-in Schema Types and Top-Level Elements and Attributes                *
 *                                                                            *
\******************************************************************************/



/******************************************************************************\
 *                                                                            *
 * Schema Types and Top-Level Elements and Attributes                         *
 *   urn:calc                                                                 *
 *                                                                            *
\******************************************************************************/


/******************************************************************************\
 *                                                                            *
 * Schema Complex Types and Top-Level Elements                                *
 *   urn:calc                                                                 *
 *                                                                            *
\******************************************************************************/

/// @brief "urn:calc":pair is a complexType.
///
/// @note struct ns2__pair operations:
/// - ns2__pair* soap_new_ns2__pair(struct soap*, int num) allocate and default initialize one or more values (an array)
/// - soap_default_ns2__pair(struct soap*, ns2__pair*) default initialize members
/// - int soap_read_ns2__pair(struct soap*, ns2__pair*) deserialize from a source
/// - int soap_write_ns2__pair(struct soap*, ns2__pair*) serialize to a sink
/// - ns2__pair* soap_dup_ns2__pair(struct soap*, ns2__pair* dst, ns2__pair *src) returns deep copy of ns2__pair src into dst, copies the (cyclic) graph structure when a context is provided, or (cycle-pruned) tree structure with soap_set_mode(soap, SOAP_XML_TREE) (use soapcpp2 -Ec)
/// - soap_del_ns2__pair(ns2__pair*) deep deletes ns2__pair data members, use only on dst after soap_dup_ns2__pair(NULL, ns2__pair *dst, ns2__pair *src) (use soapcpp2 -Ed)
struct ns2__pair
{
/// Element "a" of type xs:double.
    double                               a                              1;	///< Required element.
/// Element "b" of type xs:double.
    double                               b                              1;	///< Required element.
};


/******************************************************************************\
 *                                                                            *
 * Additional Top-Level Elements                                              *
 *   urn:calc                                                                 *
 *                                                                            *
\******************************************************************************/

/// @brief Top-level root element "urn:calc":add of type "urn:calc":pair.
/// @note Use wsdl2h option -g to auto-generate a top-level root element declaration.

/// @brief Top-level root element "urn:calc":sub of type "urn:calc":pair.
/// @note Use wsdl2h option -g to auto-generate a top-level root element declaration.

/// @brief Top-level root element "urn:calc":mul of type "urn:calc":pair.
/// @note Use wsdl2h option -g to auto-generate a top-level root element declaration.

/// @brief Top-level root element "urn:calc":div of type "urn:calc":pair.
/// @note Use wsdl2h option -g to auto-generate a top-level root element declaration.

/// @brief Top-level root element "urn:calc":pow of type "urn:calc":pair.
/// @note Use wsdl2h option -g to auto-generate a top-level root element declaration.

/// @brief Top-level root element "urn:calc":addResponse of type xs:double.
/// @note Use wsdl2h option -g to auto-generate a top-level root element declaration.

/// @brief Top-level root element "urn:calc":subResponse of type xs:double.
/// @note Use wsdl2h option -g to auto-generate a top-level root element declaration.

/// @brief Top-level root element "urn:calc":mulResponse of type xs:double.
/// @note Use wsdl2h option -g to auto-generate a top-level root element declaration.

/// @brief Top-level root element "urn:calc":divResponse of type xs:double.
/// @note Use wsdl2h option -g to auto-generate a top-level root element declaration.

/// @brief Top-level root element "urn:calc":powResponse of type xs:double.
/// @note Use wsdl2h option -g to auto-generate a top-level root element declaration.


/******************************************************************************\
 *                                                                            *
 * Additional Top-Level Attributes                                            *
 *   urn:calc                                                                 *
 *                                                                            *
\******************************************************************************/


/******************************************************************************\
 *                                                                            *
 * Services                                                                   *
 *                                                                            *
\******************************************************************************/


//gsoap ns1  service name:	calcPOST 
//gsoap ns1  service type:	calcPortType 
//gsoap ns1  service port:	http://websrv.cs.fsu.edu/~engelen/calcserver.cgi 
//gsoap ns1  service namespace:	http://websrv.cs.fsu.edu/~engelen/calc.wsdl 

/** @mainpage calcPOST Definitions

@section calcPOST_bindings Service Bindings

  - @ref calcPOST

@section calcPOST_more More Information

  - @ref page_notes "Notes"

  - @ref page_XMLDataBinding "XML Data Binding"

  - @ref SOAP_ENV__Header "SOAP Header Content" (when applicable)

  - @ref SOAP_ENV__Detail "SOAP Fault Detail Content" (when applicable)


*/

/** @page calcPOST Binding "calcPOST"

@section calcPOST_operations Operations of Binding "calcPOST"

  - @ref __ns1__add

  - @ref __ns1__sub

  - @ref __ns1__mul

  - @ref __ns1__div

  - @ref __ns1__pow

@section calcPOST_ports Default endpoints of Binding "calcPOST"

  - http://websrv.cs.fsu.edu/~engelen/calcserver.cgi

@note Use wsdl2h option -Nname to change the service binding prefix name


*/

/******************************************************************************\
 *                                                                            *
 * Service Binding                                                            *
 *   calcPOST                                                                 *
 *                                                                            *
\******************************************************************************/


/******************************************************************************\
 *                                                                            *
 * Service Operation                                                          *
 *   __ns1__add                                                               *
 *                                                                            *
\******************************************************************************/


/** Operation "__ns1__add" of service binding "calcPOST".

  - POST document/literal style messaging

  - Default endpoints:
    - http://websrv.cs.fsu.edu/~engelen/calcserver.cgi

  - Addressing input action: ""

C stub function (defined in soapClient.c[pp] generated by soapcpp2):
@code
  int soap_call___ns1__add(
    struct soap *soap,
    NULL, // char *endpoint = NULL selects default endpoint for this operation
    NULL, // char *action = NULL selects default action for this operation
    // input parameters:
    struct ns2__pair*                   ns2__add,
    // output parameters:
    double                             *ns2__addResponse
  );
@endcode

C server function (called from the service dispatcher defined in soapServer.c[pp]):
@code
  int __ns1__add(
    struct soap *soap,
    // input parameters:
    struct ns2__pair*                   ns2__add,
    // output parameters:
    double                             *ns2__addResponse
  );
@endcode

*/

//gsoap ns1  service method-protocol:	add POST
//gsoap ns1  service method-style:	add document
//gsoap ns1  service method-encoding:	add literal
//gsoap ns1  service method-action:	add ""
int __ns1__add(
    struct ns2__pair*                   ns2__add,	///< Input parameter
    double                             *ns2__addResponse	///< Output parameter
);

/******************************************************************************\
 *                                                                            *
 * Service Operation                                                          *
 *   __ns1__sub                                                               *
 *                                                                            *
\******************************************************************************/


/** Operation "__ns1__sub" of service binding "calcPOST".

  - POST document/literal style messaging

  - Default endpoints:
    - http://websrv.cs.fsu.edu/~engelen/calcserver.cgi

  - Addressing input action: ""

C stub function (defined in soapClient.c[pp] generated by soapcpp2):
@code
  int soap_call___ns1__sub(
    struct soap *soap,
    NULL, // char *endpoint = NULL selects default endpoint for this operation
    NULL, // char *action = NULL selects default action for this operation
    // input parameters:
    struct ns2__pair*                   ns2__sub,
    // output parameters:
    double                             *ns2__subResponse
  );
@endcode

C server function (called from the service dispatcher defined in soapServer.c[pp]):
@code
  int __ns1__sub(
    struct soap *soap,
    // input parameters:
    struct ns2__pair*                   ns2__sub,
    // output parameters:
    double                             *ns2__subResponse
  );
@endcode

*/

//gsoap ns1  service method-protocol:	sub POST
//gsoap ns1  service method-style:	sub document
//gsoap ns1  service method-encoding:	sub literal
//gsoap ns1  service method-action:	sub ""
int __ns1__sub(
    struct ns2__pair*                   ns2__sub,	///< Input parameter
    double                             *ns2__subResponse	///< Output parameter
);

/******************************************************************************\
 *                                                                            *
 * Service Operation                                                          *
 *   __ns1__mul                                                               *
 *                                                                            *
\******************************************************************************/


/** Operation "__ns1__mul" of service binding "calcPOST".

  - POST document/literal style messaging

  - Default endpoints:
    - http://websrv.cs.fsu.edu/~engelen/calcserver.cgi

  - Addressing input action: ""

C stub function (defined in soapClient.c[pp] generated by soapcpp2):
@code
  int soap_call___ns1__mul(
    struct soap *soap,
    NULL, // char *endpoint = NULL selects default endpoint for this operation
    NULL, // char *action = NULL selects default action for this operation
    // input parameters:
    struct ns2__pair*                   ns2__mul,
    // output parameters:
    double                             *ns2__mulResponse
  );
@endcode

C server function (called from the service dispatcher defined in soapServer.c[pp]):
@code
  int __ns1__mul(
    struct soap *soap,
    // input parameters:
    struct ns2__pair*                   ns2__mul,
    // output parameters:
    double                             *ns2__mulResponse
  );
@endcode

*/

//gsoap ns1  service method-protocol:	mul POST
//gsoap ns1  service method-style:	mul document
//gsoap ns1  service method-encoding:	mul literal
//gsoap ns1  service method-action:	mul ""
int __ns1__mul(
    struct ns2__pair*                   ns2__mul,	///< Input parameter
    double                             *ns2__mulResponse	///< Output parameter
);

/******************************************************************************\
 *                                                                            *
 * Service Operation                                                          *
 *   __ns1__div                                                               *
 *                                                                            *
\******************************************************************************/


/** Operation "__ns1__div" of service binding "calcPOST".

  - POST document/literal style messaging

  - Default endpoints:
    - http://websrv.cs.fsu.edu/~engelen/calcserver.cgi

  - Addressing input action: ""

C stub function (defined in soapClient.c[pp] generated by soapcpp2):
@code
  int soap_call___ns1__div(
    struct soap *soap,
    NULL, // char *endpoint = NULL selects default endpoint for this operation
    NULL, // char *action = NULL selects default action for this operation
    // input parameters:
    struct ns2__pair*                   ns2__div,
    // output parameters:
    double                             *ns2__divResponse
  );
@endcode

C server function (called from the service dispatcher defined in soapServer.c[pp]):
@code
  int __ns1__div(
    struct soap *soap,
    // input parameters:
    struct ns2__pair*                   ns2__div,
    // output parameters:
    double                             *ns2__divResponse
  );
@endcode

*/

//gsoap ns1  service method-protocol:	div POST
//gsoap ns1  service method-style:	div document
//gsoap ns1  service method-encoding:	div literal
//gsoap ns1  service method-action:	div ""
int __ns1__div(
    struct ns2__pair*                   ns2__div,	///< Input parameter
    double                             *ns2__divResponse	///< Output parameter
);

/******************************************************************************\
 *                                                                            *
 * Service Operation                                                          *
 *   __ns1__pow                                                               *
 *                                                                            *
\******************************************************************************/


/** Operation "__ns1__pow" of service binding "calcPOST".

  - POST document/literal style messaging

  - Default endpoints:
    - http://websrv.cs.fsu.edu/~engelen/calcserver.cgi

  - Addressing input action: ""

C stub function (defined in soapClient.c[pp] generated by soapcpp2):
@code
  int soap_call___ns1__pow(
    struct soap *soap,
    NULL, // char *endpoint = NULL selects default endpoint for this operation
    NULL, // char *action = NULL selects default action for this operation
    // input parameters:
    struct ns2__pair*                   ns2__pow,
    // output parameters:
    double                             *ns2__powResponse
  );
@endcode

C server function (called from the service dispatcher defined in soapServer.c[pp]):
@code
  int __ns1__pow(
    struct soap *soap,
    // input parameters:
    struct ns2__pair*                   ns2__pow,
    // output parameters:
    double                             *ns2__powResponse
  );
@endcode

*/

//gsoap ns1  service method-protocol:	pow POST
//gsoap ns1  service method-style:	pow document
//gsoap ns1  service method-encoding:	pow literal
//gsoap ns1  service method-action:	pow ""
int __ns1__pow(
    struct ns2__pair*                   ns2__pow,	///< Input parameter
    double                             *ns2__powResponse	///< Output parameter
);

/** @page calcPOST Binding "calcPOST"

@section calcPOST_policy_enablers Policy Enablers of Binding "calcPOST"

None specified.

*/

/******************************************************************************\
 *                                                                            *
 * XML Data Binding                                                           *
 *                                                                            *
\******************************************************************************/


/** @page page_XMLDataBinding XML Data Binding

SOAP/XML services use data bindings that are contractually bound by WSDLs and
are auto-generated by wsdl2h and soapcpp2 (see Service Bindings). Plain data
bindings are adopted from XML schemas as part of the WSDL types section or when
running wsdl2h on a set of schemas to produce non-SOAP-based XML data bindings.

@note The following readers and writers are C/C++ data type (de)serializers
auto-generated by wsdl2h and soapcpp2. Run soapcpp2 on this file to generate the
(de)serialization code, which is stored in soapC.c[pp]. Include "soapH.h" in
your code to import these data type and function declarations. Only use the
soapcpp2-generated files in your project build. Do not include the wsdl2h-
generated .h file in your code.

@note Data can be read and deserialized from:
  - an int file descriptor, using soap->recvfd = fd
  - a socket, using soap->socket = (int)...
  - a C++ stream (istream, stringstream), using soap->is = (istream*)...
  - a C string, using soap->is = (const char*)...
  - any input, using the soap->frecv() callback

@note Data can be serialized and written to:
  - an int file descriptor, using soap->sendfd = (int)...
  - a socket, using soap->socket = (int)...
  - a C++ stream (ostream, stringstream), using soap->os = (ostream*)...
  - a C string, using soap->os = (const char**)...
  - any output, using the soap->fsend() callback

@note The following options are available for (de)serialization control:
  - soap->encodingStyle = NULL; to remove SOAP 1.1/1.2 encodingStyle
  - soap_set_mode(soap, SOAP_XML_TREE); XML without id-ref (no cycles!)
  - soap_set_mode(soap, SOAP_XML_GRAPH); XML with id-ref (including cycles)
  - soap_set_namespaces(soap, struct Namespace *nsmap); to set xmlns bindings


*/

/**

@section ns2 Top-level root elements of schema "urn:calc"

  - <ns2:add> (use wsdl2h option -g to auto-generate type _ns2__add)

  - <ns2:sub> (use wsdl2h option -g to auto-generate type _ns2__sub)

  - <ns2:mul> (use wsdl2h option -g to auto-generate type _ns2__mul)

  - <ns2:div> (use wsdl2h option -g to auto-generate type _ns2__div)

  - <ns2:pow> (use wsdl2h option -g to auto-generate type _ns2__pow)

  - <ns2:addResponse> (use wsdl2h option -g to auto-generate type _ns2__addResponse)

  - <ns2:subResponse> (use wsdl2h option -g to auto-generate type _ns2__subResponse)

  - <ns2:mulResponse> (use wsdl2h option -g to auto-generate type _ns2__mulResponse)

  - <ns2:divResponse> (use wsdl2h option -g to auto-generate type _ns2__divResponse)

  - <ns2:powResponse> (use wsdl2h option -g to auto-generate type _ns2__powResponse)

*/

/* End of calcrest.h */
