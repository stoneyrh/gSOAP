/* soapH.h
   Generated by gSOAP 2.8.30 for xml-rpc.h

gSOAP XML Web services tools
Copyright (C) 2000-2016, Robert van Engelen, Genivia Inc. All Rights Reserved.
The soapcpp2 tool and its generated software are released under the GPL.
This program is released under the GPL with the additional exemption that
compiling, linking, and/or using OpenSSL is allowed.
--------------------------------------------------------------------------------
A commercial use license is available from Genivia Inc., contact@genivia.com
--------------------------------------------------------------------------------
*/

#ifndef soapH_H
#define soapH_H
#include "soapStub.h"
#ifndef WITH_NOIDREF

#ifdef __cplusplus
extern "C" {
#endif
SOAP_FMAC3 void SOAP_FMAC4 soap_markelement(struct soap*, const void*, int);

#ifdef __cplusplus
}
#endif
SOAP_FMAC3 int SOAP_FMAC4 soap_putindependent(struct soap*);
SOAP_FMAC3 int SOAP_FMAC4 soap_getindependent(struct soap*);
#endif

#ifdef __cplusplus
extern "C" {
#endif
SOAP_FMAC3 void *SOAP_FMAC4 soap_getelement(struct soap*, int*);
SOAP_FMAC3 int SOAP_FMAC4 soap_putelement(struct soap*, const void*, const char*, int, int);

#ifdef __cplusplus
}
#endif
SOAP_FMAC3 int SOAP_FMAC4 soap_ignore_element(struct soap*);

SOAP_FMAC3 const char ** SOAP_FMAC4 soap_faultcode(struct soap *soap);
SOAP_FMAC3 void * SOAP_FMAC4 soap_instantiate(struct soap*, int, const char*, const char*, size_t*);
SOAP_FMAC3 int SOAP_FMAC4 soap_fdelete(struct soap_clist*);
SOAP_FMAC3 int SOAP_FMAC4 soap_fbase(int, int);
SOAP_FMAC3 void SOAP_FMAC4 soap_finsert(struct soap*, int, int, void*, size_t, const void*, void**);
/* _boolean is a typedef synonym for byte */

#ifndef SOAP_TYPE__boolean_DEFINED
#define SOAP_TYPE__boolean_DEFINED

#define soap_default__boolean(soap, a) soap_default_byte(soap, a)


#define soap__boolean2s soap_byte2s


#define soap_out__boolean soap_out_byte


#define soap_s2_boolean soap_s2byte


#define soap_in__boolean soap_in_byte


#define soap_put__boolean soap_put_byte


#define soap_write__boolean soap_write_byte


#define soap_get__boolean soap_get_byte


#define soap_read__boolean soap_read_byte

#endif

#ifndef SOAP_TYPE_byte_DEFINED
#define SOAP_TYPE_byte_DEFINED
SOAP_FMAC3 void SOAP_FMAC4 soap_default_byte(struct soap*, char *);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_byte(struct soap*, const char*, int, const char *, const char*);
SOAP_FMAC3 char * SOAP_FMAC4 soap_in_byte(struct soap*, const char*, char *, const char*);
SOAP_FMAC3 int SOAP_FMAC4 soap_put_byte(struct soap*, const char *, const char*, const char*);

inline int soap_write_byte(struct soap *soap, char const *p)
{	soap_free_temp(soap);
	if (p)
	{	if (soap_begin_send(soap) || soap_put_byte(soap, p, "byte", NULL) || soap_end_send(soap))
			return soap->error;
	}
	return SOAP_OK;
}
SOAP_FMAC3 char * SOAP_FMAC4 soap_get_byte(struct soap*, char *, const char*, const char*);

inline int soap_read_byte(struct soap *soap, char *p)
{	if (p)
	{	if (soap_begin_recv(soap) || soap_get_byte(soap, p, NULL, NULL) == NULL || soap_end_recv(soap))
			return soap->error;
	}
	return SOAP_OK;
}
#endif
/* _i4 is a typedef synonym for int */

#ifndef SOAP_TYPE__i4_DEFINED
#define SOAP_TYPE__i4_DEFINED

#define soap_default__i4(soap, a) soap_default_int(soap, a)


#define soap__i42s soap_int2s


#define soap_out__i4 soap_out_int


#define soap_s2_i4 soap_s2int


#define soap_in__i4 soap_in_int


#define soap_put__i4 soap_put_int


#define soap_write__i4 soap_write_int


#define soap_get__i4 soap_get_int


#define soap_read__i4 soap_read_int

#endif

#ifndef SOAP_TYPE_int_DEFINED
#define SOAP_TYPE_int_DEFINED
SOAP_FMAC3 void SOAP_FMAC4 soap_default_int(struct soap*, int *);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_int(struct soap*, const char*, int, const int *, const char*);
SOAP_FMAC3 int * SOAP_FMAC4 soap_in_int(struct soap*, const char*, int *, const char*);
SOAP_FMAC3 int SOAP_FMAC4 soap_put_int(struct soap*, const int *, const char*, const char*);

inline int soap_write_int(struct soap *soap, int const *p)
{	soap_free_temp(soap);
	if (p)
	{	if (soap_begin_send(soap) || soap_put_int(soap, p, "int", NULL) || soap_end_send(soap))
			return soap->error;
	}
	return SOAP_OK;
}
SOAP_FMAC3 int * SOAP_FMAC4 soap_get_int(struct soap*, int *, const char*, const char*);

inline int soap_read_int(struct soap *soap, int *p)
{	if (p)
	{	if (soap_begin_recv(soap) || soap_get_int(soap, p, NULL, NULL) == NULL || soap_end_recv(soap))
			return soap->error;
	}
	return SOAP_OK;
}
#endif
/* _int is a typedef synonym for LONG64 */

#ifndef SOAP_TYPE__int_DEFINED
#define SOAP_TYPE__int_DEFINED

#define soap_default__int(soap, a) soap_default_LONG64(soap, a)


#define soap__int2s soap_LONG642s


#define soap_out__int soap_out_LONG64


#define soap_s2_int soap_s2LONG64


#define soap_in__int soap_in_LONG64


#define soap_put__int soap_put_LONG64


#define soap_write__int soap_write_LONG64


#define soap_get__int soap_get_LONG64


#define soap_read__int soap_read_LONG64

#endif

#ifndef SOAP_TYPE_LONG64_DEFINED
#define SOAP_TYPE_LONG64_DEFINED
SOAP_FMAC3 void SOAP_FMAC4 soap_default_LONG64(struct soap*, LONG64 *);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_LONG64(struct soap*, const char*, int, const LONG64 *, const char*);
SOAP_FMAC3 LONG64 * SOAP_FMAC4 soap_in_LONG64(struct soap*, const char*, LONG64 *, const char*);
SOAP_FMAC3 int SOAP_FMAC4 soap_put_LONG64(struct soap*, const LONG64 *, const char*, const char*);

inline int soap_write_LONG64(struct soap *soap, LONG64 const *p)
{	soap_free_temp(soap);
	if (p)
	{	if (soap_begin_send(soap) || soap_put_LONG64(soap, p, "long", NULL) || soap_end_send(soap))
			return soap->error;
	}
	return SOAP_OK;
}
SOAP_FMAC3 LONG64 * SOAP_FMAC4 soap_get_LONG64(struct soap*, LONG64 *, const char*, const char*);

inline int soap_read_LONG64(struct soap *soap, LONG64 *p)
{	if (p)
	{	if (soap_begin_recv(soap) || soap_get_LONG64(soap, p, NULL, NULL) == NULL || soap_end_recv(soap))
			return soap->error;
	}
	return SOAP_OK;
}
#endif
/* _double is a typedef synonym for double */

#ifndef SOAP_TYPE__double_DEFINED
#define SOAP_TYPE__double_DEFINED

#define soap_default__double(soap, a) soap_default_double(soap, a)


#define soap__double2s soap_double2s


#define soap_out__double soap_out_double


#define soap_s2_double soap_s2double


#define soap_in__double soap_in_double


#define soap_put__double soap_put_double


#define soap_write__double soap_write_double


#define soap_get__double soap_get_double


#define soap_read__double soap_read_double

#endif

#ifndef SOAP_TYPE_double_DEFINED
#define SOAP_TYPE_double_DEFINED
SOAP_FMAC3 void SOAP_FMAC4 soap_default_double(struct soap*, double *);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_double(struct soap*, const char*, int, const double *, const char*);
SOAP_FMAC3 double * SOAP_FMAC4 soap_in_double(struct soap*, const char*, double *, const char*);
SOAP_FMAC3 int SOAP_FMAC4 soap_put_double(struct soap*, const double *, const char*, const char*);

inline int soap_write_double(struct soap *soap, double const *p)
{	soap_free_temp(soap);
	if (p)
	{	if (soap_begin_send(soap) || soap_put_double(soap, p, "double", NULL) || soap_end_send(soap))
			return soap->error;
	}
	return SOAP_OK;
}
SOAP_FMAC3 double * SOAP_FMAC4 soap_get_double(struct soap*, double *, const char*, const char*);

inline int soap_read_double(struct soap *soap, double *p)
{	if (p)
	{	if (soap_begin_recv(soap) || soap_get_double(soap, p, NULL, NULL) == NULL || soap_end_recv(soap))
			return soap->error;
	}
	return SOAP_OK;
}
#endif

#ifndef SOAP_TYPE_unsignedByte_DEFINED
#define SOAP_TYPE_unsignedByte_DEFINED
SOAP_FMAC3 void SOAP_FMAC4 soap_default_unsignedByte(struct soap*, unsigned char *);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_unsignedByte(struct soap*, const char*, int, const unsigned char *, const char*);
SOAP_FMAC3 unsigned char * SOAP_FMAC4 soap_in_unsignedByte(struct soap*, const char*, unsigned char *, const char*);
SOAP_FMAC3 int SOAP_FMAC4 soap_put_unsignedByte(struct soap*, const unsigned char *, const char*, const char*);

inline int soap_write_unsignedByte(struct soap *soap, unsigned char const *p)
{	soap_free_temp(soap);
	if (p)
	{	if (soap_begin_send(soap) || soap_put_unsignedByte(soap, p, "unsignedByte", NULL) || soap_end_send(soap))
			return soap->error;
	}
	return SOAP_OK;
}
SOAP_FMAC3 unsigned char * SOAP_FMAC4 soap_get_unsignedByte(struct soap*, unsigned char *, const char*, const char*);

inline int soap_read_unsignedByte(struct soap *soap, unsigned char *p)
{	if (p)
	{	if (soap_begin_recv(soap) || soap_get_unsignedByte(soap, p, NULL, NULL) == NULL || soap_end_recv(soap))
			return soap->error;
	}
	return SOAP_OK;
}
#endif

#ifndef SOAP_TYPE_unsignedInt_DEFINED
#define SOAP_TYPE_unsignedInt_DEFINED
SOAP_FMAC3 void SOAP_FMAC4 soap_default_unsignedInt(struct soap*, unsigned int *);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_unsignedInt(struct soap*, const char*, int, const unsigned int *, const char*);
SOAP_FMAC3 unsigned int * SOAP_FMAC4 soap_in_unsignedInt(struct soap*, const char*, unsigned int *, const char*);
SOAP_FMAC3 int SOAP_FMAC4 soap_put_unsignedInt(struct soap*, const unsigned int *, const char*, const char*);

inline int soap_write_unsignedInt(struct soap *soap, unsigned int const *p)
{	soap_free_temp(soap);
	if (p)
	{	if (soap_begin_send(soap) || soap_put_unsignedInt(soap, p, "unsignedInt", NULL) || soap_end_send(soap))
			return soap->error;
	}
	return SOAP_OK;
}
SOAP_FMAC3 unsigned int * SOAP_FMAC4 soap_get_unsignedInt(struct soap*, unsigned int *, const char*, const char*);

inline int soap_read_unsignedInt(struct soap *soap, unsigned int *p)
{	if (p)
	{	if (soap_begin_recv(soap) || soap_get_unsignedInt(soap, p, NULL, NULL) == NULL || soap_end_recv(soap))
			return soap->error;
	}
	return SOAP_OK;
}
#endif

#ifndef SOAP_TYPE_ULONG64_DEFINED
#define SOAP_TYPE_ULONG64_DEFINED
SOAP_FMAC3 void SOAP_FMAC4 soap_default_ULONG64(struct soap*, ULONG64 *);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_ULONG64(struct soap*, const char*, int, const ULONG64 *, const char*);
SOAP_FMAC3 ULONG64 * SOAP_FMAC4 soap_in_ULONG64(struct soap*, const char*, ULONG64 *, const char*);
SOAP_FMAC3 int SOAP_FMAC4 soap_put_ULONG64(struct soap*, const ULONG64 *, const char*, const char*);

inline int soap_write_ULONG64(struct soap *soap, ULONG64 const *p)
{	soap_free_temp(soap);
	if (p)
	{	if (soap_begin_send(soap) || soap_put_ULONG64(soap, p, "unsignedLong", NULL) || soap_end_send(soap))
			return soap->error;
	}
	return SOAP_OK;
}
SOAP_FMAC3 ULONG64 * SOAP_FMAC4 soap_get_ULONG64(struct soap*, ULONG64 *, const char*, const char*);

inline int soap_read_ULONG64(struct soap *soap, ULONG64 *p)
{	if (p)
	{	if (soap_begin_recv(soap) || soap_get_ULONG64(soap, p, NULL, NULL) == NULL || soap_end_recv(soap))
			return soap->error;
	}
	return SOAP_OK;
}
#endif

#ifndef SOAP_TYPE_std__wstring_DEFINED
#define SOAP_TYPE_std__wstring_DEFINED
SOAP_FMAC3 void SOAP_FMAC4 soap_default_std__wstring(struct soap*, std::wstring *);
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_std__wstring(struct soap*, const std::wstring *);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_std__wstring(struct soap*, const char*, int, const std::wstring*, const char*);
SOAP_FMAC3 std::wstring * SOAP_FMAC4 soap_in_std__wstring(struct soap*, const char*, std::wstring*, const char*);
SOAP_FMAC1 std::wstring * SOAP_FMAC2 soap_instantiate_std__wstring(struct soap*, int, const char*, const char*, size_t*);

inline std::wstring * soap_new_std__wstring(struct soap *soap, int n = -1)
{	return soap_instantiate_std__wstring(soap, n, NULL, NULL, NULL);
}

inline std::wstring * soap_new_req_std__wstring(
	struct soap *soap)
{	std::wstring *_p = soap_new_std__wstring(soap);
	if (_p)
	{	soap_default_std__wstring(soap, _p);
	}
	return _p;
}

inline std::wstring * soap_new_set_std__wstring(
	struct soap *soap)
{	std::wstring *_p = soap_new_std__wstring(soap);
	if (_p)
	{	soap_default_std__wstring(soap, _p);
	}
	return _p;
}
SOAP_FMAC3 int SOAP_FMAC4 soap_put_std__wstring(struct soap*, const std::wstring *, const char*, const char*);

inline int soap_write_std__wstring(struct soap *soap, std::wstring const *p)
{	soap_free_temp(soap);
	if (p)
	{	if (soap_begin_send(soap) || soap_put_std__wstring(soap, p, "string", NULL) || soap_end_send(soap))
			return soap->error;
	}
	return SOAP_OK;
}
SOAP_FMAC3 std::wstring * SOAP_FMAC4 soap_get_std__wstring(struct soap*, std::wstring *, const char*, const char*);

inline int soap_read_std__wstring(struct soap *soap, std::wstring *p)
{	if (p)
	{	if (soap_begin_recv(soap) || soap_get_std__wstring(soap, p, NULL, NULL) == NULL || soap_end_recv(soap))
			return soap->error;
	}
	return SOAP_OK;
}
#endif

#ifndef SOAP_TYPE_std__string_DEFINED
#define SOAP_TYPE_std__string_DEFINED
SOAP_FMAC3 void SOAP_FMAC4 soap_default_std__string(struct soap*, std::string *);
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_std__string(struct soap*, const std::string *);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_std__string(struct soap*, const char*, int, const std::string*, const char*);
SOAP_FMAC3 std::string * SOAP_FMAC4 soap_in_std__string(struct soap*, const char*, std::string*, const char*);
SOAP_FMAC1 std::string * SOAP_FMAC2 soap_instantiate_std__string(struct soap*, int, const char*, const char*, size_t*);

inline std::string * soap_new_std__string(struct soap *soap, int n = -1)
{	return soap_instantiate_std__string(soap, n, NULL, NULL, NULL);
}

inline std::string * soap_new_req_std__string(
	struct soap *soap)
{	std::string *_p = soap_new_std__string(soap);
	if (_p)
	{	soap_default_std__string(soap, _p);
	}
	return _p;
}

inline std::string * soap_new_set_std__string(
	struct soap *soap)
{	std::string *_p = soap_new_std__string(soap);
	if (_p)
	{	soap_default_std__string(soap, _p);
	}
	return _p;
}
SOAP_FMAC3 int SOAP_FMAC4 soap_put_std__string(struct soap*, const std::string *, const char*, const char*);

inline int soap_write_std__string(struct soap *soap, std::string const *p)
{	soap_free_temp(soap);
	if (p)
	{	if (soap_begin_send(soap) || soap_put_std__string(soap, p, "string", NULL) || soap_end_send(soap))
			return soap->error;
	}
	return SOAP_OK;
}
SOAP_FMAC3 std::string * SOAP_FMAC4 soap_get_std__string(struct soap*, std::string *, const char*, const char*);

inline int soap_read_std__string(struct soap *soap, std::string *p)
{	if (p)
	{	if (soap_begin_recv(soap) || soap_get_std__string(soap, p, NULL, NULL) == NULL || soap_end_recv(soap))
			return soap->error;
	}
	return SOAP_OK;
}
#endif

#ifndef WITH_NOGLOBAL

#ifndef SOAP_TYPE_SOAP_ENV__Fault_DEFINED
#define SOAP_TYPE_SOAP_ENV__Fault_DEFINED
SOAP_FMAC3 void SOAP_FMAC4 soap_default_SOAP_ENV__Fault(struct soap*, struct SOAP_ENV__Fault *);
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_SOAP_ENV__Fault(struct soap*, const struct SOAP_ENV__Fault *);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_SOAP_ENV__Fault(struct soap*, const char*, int, const struct SOAP_ENV__Fault *, const char*);
SOAP_FMAC3 struct SOAP_ENV__Fault * SOAP_FMAC4 soap_in_SOAP_ENV__Fault(struct soap*, const char*, struct SOAP_ENV__Fault *, const char*);
SOAP_FMAC1 struct SOAP_ENV__Fault * SOAP_FMAC2 soap_instantiate_SOAP_ENV__Fault(struct soap*, int, const char*, const char*, size_t*);

inline struct SOAP_ENV__Fault * soap_new_SOAP_ENV__Fault(struct soap *soap, int n = -1)
{	return soap_instantiate_SOAP_ENV__Fault(soap, n, NULL, NULL, NULL);
}

inline struct SOAP_ENV__Fault * soap_new_req_SOAP_ENV__Fault(
	struct soap *soap)
{	struct SOAP_ENV__Fault *_p = soap_new_SOAP_ENV__Fault(soap);
	if (_p)
	{	soap_default_SOAP_ENV__Fault(soap, _p);
	}
	return _p;
}

inline struct SOAP_ENV__Fault * soap_new_set_SOAP_ENV__Fault(
	struct soap *soap,
	char *faultcode,
	char *faultstring,
	char *faultactor,
	struct SOAP_ENV__Detail *detail,
	struct SOAP_ENV__Code *SOAP_ENV__Code,
	struct SOAP_ENV__Reason *SOAP_ENV__Reason,
	char *SOAP_ENV__Node,
	char *SOAP_ENV__Role,
	struct SOAP_ENV__Detail *SOAP_ENV__Detail)
{	struct SOAP_ENV__Fault *_p = soap_new_SOAP_ENV__Fault(soap);
	if (_p)
	{	soap_default_SOAP_ENV__Fault(soap, _p);
		_p->faultcode = faultcode;
		_p->faultstring = faultstring;
		_p->faultactor = faultactor;
		_p->detail = detail;
		_p->SOAP_ENV__Code = SOAP_ENV__Code;
		_p->SOAP_ENV__Reason = SOAP_ENV__Reason;
		_p->SOAP_ENV__Node = SOAP_ENV__Node;
		_p->SOAP_ENV__Role = SOAP_ENV__Role;
		_p->SOAP_ENV__Detail = SOAP_ENV__Detail;
	}
	return _p;
}
SOAP_FMAC3 int SOAP_FMAC4 soap_put_SOAP_ENV__Fault(struct soap*, const struct SOAP_ENV__Fault *, const char*, const char*);

inline int soap_write_SOAP_ENV__Fault(struct soap *soap, struct SOAP_ENV__Fault const *p)
{	soap_free_temp(soap);
	if (p)
	{	if (soap_begin_send(soap) || (soap_serialize_SOAP_ENV__Fault(soap, p), 0) || soap_put_SOAP_ENV__Fault(soap, p, "SOAP-ENV:Fault", NULL) || soap_end_send(soap))
			return soap->error;
	}
	return SOAP_OK;
}
SOAP_FMAC3 struct SOAP_ENV__Fault * SOAP_FMAC4 soap_get_SOAP_ENV__Fault(struct soap*, struct SOAP_ENV__Fault *, const char*, const char*);

inline int soap_read_SOAP_ENV__Fault(struct soap *soap, struct SOAP_ENV__Fault *p)
{	if (p)
	{	soap_default_SOAP_ENV__Fault(soap, p);
		if (soap_begin_recv(soap) || soap_get_SOAP_ENV__Fault(soap, p, NULL, NULL) == NULL || soap_end_recv(soap))
			return soap->error;
	}
	return SOAP_OK;
}
#endif

#endif

#ifndef WITH_NOGLOBAL

#ifndef SOAP_TYPE_SOAP_ENV__Reason_DEFINED
#define SOAP_TYPE_SOAP_ENV__Reason_DEFINED
SOAP_FMAC3 void SOAP_FMAC4 soap_default_SOAP_ENV__Reason(struct soap*, struct SOAP_ENV__Reason *);
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_SOAP_ENV__Reason(struct soap*, const struct SOAP_ENV__Reason *);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_SOAP_ENV__Reason(struct soap*, const char*, int, const struct SOAP_ENV__Reason *, const char*);
SOAP_FMAC3 struct SOAP_ENV__Reason * SOAP_FMAC4 soap_in_SOAP_ENV__Reason(struct soap*, const char*, struct SOAP_ENV__Reason *, const char*);
SOAP_FMAC1 struct SOAP_ENV__Reason * SOAP_FMAC2 soap_instantiate_SOAP_ENV__Reason(struct soap*, int, const char*, const char*, size_t*);

inline struct SOAP_ENV__Reason * soap_new_SOAP_ENV__Reason(struct soap *soap, int n = -1)
{	return soap_instantiate_SOAP_ENV__Reason(soap, n, NULL, NULL, NULL);
}

inline struct SOAP_ENV__Reason * soap_new_req_SOAP_ENV__Reason(
	struct soap *soap)
{	struct SOAP_ENV__Reason *_p = soap_new_SOAP_ENV__Reason(soap);
	if (_p)
	{	soap_default_SOAP_ENV__Reason(soap, _p);
	}
	return _p;
}

inline struct SOAP_ENV__Reason * soap_new_set_SOAP_ENV__Reason(
	struct soap *soap,
	char *SOAP_ENV__Text)
{	struct SOAP_ENV__Reason *_p = soap_new_SOAP_ENV__Reason(soap);
	if (_p)
	{	soap_default_SOAP_ENV__Reason(soap, _p);
		_p->SOAP_ENV__Text = SOAP_ENV__Text;
	}
	return _p;
}
SOAP_FMAC3 int SOAP_FMAC4 soap_put_SOAP_ENV__Reason(struct soap*, const struct SOAP_ENV__Reason *, const char*, const char*);

inline int soap_write_SOAP_ENV__Reason(struct soap *soap, struct SOAP_ENV__Reason const *p)
{	soap_free_temp(soap);
	if (p)
	{	if (soap_begin_send(soap) || (soap_serialize_SOAP_ENV__Reason(soap, p), 0) || soap_put_SOAP_ENV__Reason(soap, p, "SOAP-ENV:Reason", NULL) || soap_end_send(soap))
			return soap->error;
	}
	return SOAP_OK;
}
SOAP_FMAC3 struct SOAP_ENV__Reason * SOAP_FMAC4 soap_get_SOAP_ENV__Reason(struct soap*, struct SOAP_ENV__Reason *, const char*, const char*);

inline int soap_read_SOAP_ENV__Reason(struct soap *soap, struct SOAP_ENV__Reason *p)
{	if (p)
	{	soap_default_SOAP_ENV__Reason(soap, p);
		if (soap_begin_recv(soap) || soap_get_SOAP_ENV__Reason(soap, p, NULL, NULL) == NULL || soap_end_recv(soap))
			return soap->error;
	}
	return SOAP_OK;
}
#endif

#endif

#ifndef WITH_NOGLOBAL

#ifndef SOAP_TYPE_SOAP_ENV__Detail_DEFINED
#define SOAP_TYPE_SOAP_ENV__Detail_DEFINED
SOAP_FMAC3 void SOAP_FMAC4 soap_default_SOAP_ENV__Detail(struct soap*, struct SOAP_ENV__Detail *);
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_SOAP_ENV__Detail(struct soap*, const struct SOAP_ENV__Detail *);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_SOAP_ENV__Detail(struct soap*, const char*, int, const struct SOAP_ENV__Detail *, const char*);
SOAP_FMAC3 struct SOAP_ENV__Detail * SOAP_FMAC4 soap_in_SOAP_ENV__Detail(struct soap*, const char*, struct SOAP_ENV__Detail *, const char*);
SOAP_FMAC1 struct SOAP_ENV__Detail * SOAP_FMAC2 soap_instantiate_SOAP_ENV__Detail(struct soap*, int, const char*, const char*, size_t*);

inline struct SOAP_ENV__Detail * soap_new_SOAP_ENV__Detail(struct soap *soap, int n = -1)
{	return soap_instantiate_SOAP_ENV__Detail(soap, n, NULL, NULL, NULL);
}

inline struct SOAP_ENV__Detail * soap_new_req_SOAP_ENV__Detail(
	struct soap *soap,
	int __type,
	void *fault)
{	struct SOAP_ENV__Detail *_p = soap_new_SOAP_ENV__Detail(soap);
	if (_p)
	{	soap_default_SOAP_ENV__Detail(soap, _p);
		_p->__type = __type;
		_p->fault = fault;
	}
	return _p;
}

inline struct SOAP_ENV__Detail * soap_new_set_SOAP_ENV__Detail(
	struct soap *soap,
	char *__any,
	int __type,
	void *fault)
{	struct SOAP_ENV__Detail *_p = soap_new_SOAP_ENV__Detail(soap);
	if (_p)
	{	soap_default_SOAP_ENV__Detail(soap, _p);
		_p->__any = __any;
		_p->__type = __type;
		_p->fault = fault;
	}
	return _p;
}
SOAP_FMAC3 int SOAP_FMAC4 soap_put_SOAP_ENV__Detail(struct soap*, const struct SOAP_ENV__Detail *, const char*, const char*);

inline int soap_write_SOAP_ENV__Detail(struct soap *soap, struct SOAP_ENV__Detail const *p)
{	soap_free_temp(soap);
	if (p)
	{	if (soap_begin_send(soap) || (soap_serialize_SOAP_ENV__Detail(soap, p), 0) || soap_put_SOAP_ENV__Detail(soap, p, "SOAP-ENV:Detail", NULL) || soap_end_send(soap))
			return soap->error;
	}
	return SOAP_OK;
}
SOAP_FMAC3 struct SOAP_ENV__Detail * SOAP_FMAC4 soap_get_SOAP_ENV__Detail(struct soap*, struct SOAP_ENV__Detail *, const char*, const char*);

inline int soap_read_SOAP_ENV__Detail(struct soap *soap, struct SOAP_ENV__Detail *p)
{	if (p)
	{	soap_default_SOAP_ENV__Detail(soap, p);
		if (soap_begin_recv(soap) || soap_get_SOAP_ENV__Detail(soap, p, NULL, NULL) == NULL || soap_end_recv(soap))
			return soap->error;
	}
	return SOAP_OK;
}
#endif

#endif

#ifndef WITH_NOGLOBAL

#ifndef SOAP_TYPE_SOAP_ENV__Code_DEFINED
#define SOAP_TYPE_SOAP_ENV__Code_DEFINED
SOAP_FMAC3 void SOAP_FMAC4 soap_default_SOAP_ENV__Code(struct soap*, struct SOAP_ENV__Code *);
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_SOAP_ENV__Code(struct soap*, const struct SOAP_ENV__Code *);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_SOAP_ENV__Code(struct soap*, const char*, int, const struct SOAP_ENV__Code *, const char*);
SOAP_FMAC3 struct SOAP_ENV__Code * SOAP_FMAC4 soap_in_SOAP_ENV__Code(struct soap*, const char*, struct SOAP_ENV__Code *, const char*);
SOAP_FMAC1 struct SOAP_ENV__Code * SOAP_FMAC2 soap_instantiate_SOAP_ENV__Code(struct soap*, int, const char*, const char*, size_t*);

inline struct SOAP_ENV__Code * soap_new_SOAP_ENV__Code(struct soap *soap, int n = -1)
{	return soap_instantiate_SOAP_ENV__Code(soap, n, NULL, NULL, NULL);
}

inline struct SOAP_ENV__Code * soap_new_req_SOAP_ENV__Code(
	struct soap *soap)
{	struct SOAP_ENV__Code *_p = soap_new_SOAP_ENV__Code(soap);
	if (_p)
	{	soap_default_SOAP_ENV__Code(soap, _p);
	}
	return _p;
}

inline struct SOAP_ENV__Code * soap_new_set_SOAP_ENV__Code(
	struct soap *soap,
	char *SOAP_ENV__Value,
	struct SOAP_ENV__Code *SOAP_ENV__Subcode)
{	struct SOAP_ENV__Code *_p = soap_new_SOAP_ENV__Code(soap);
	if (_p)
	{	soap_default_SOAP_ENV__Code(soap, _p);
		_p->SOAP_ENV__Value = SOAP_ENV__Value;
		_p->SOAP_ENV__Subcode = SOAP_ENV__Subcode;
	}
	return _p;
}
SOAP_FMAC3 int SOAP_FMAC4 soap_put_SOAP_ENV__Code(struct soap*, const struct SOAP_ENV__Code *, const char*, const char*);

inline int soap_write_SOAP_ENV__Code(struct soap *soap, struct SOAP_ENV__Code const *p)
{	soap_free_temp(soap);
	if (p)
	{	if (soap_begin_send(soap) || (soap_serialize_SOAP_ENV__Code(soap, p), 0) || soap_put_SOAP_ENV__Code(soap, p, "SOAP-ENV:Code", NULL) || soap_end_send(soap))
			return soap->error;
	}
	return SOAP_OK;
}
SOAP_FMAC3 struct SOAP_ENV__Code * SOAP_FMAC4 soap_get_SOAP_ENV__Code(struct soap*, struct SOAP_ENV__Code *, const char*, const char*);

inline int soap_read_SOAP_ENV__Code(struct soap *soap, struct SOAP_ENV__Code *p)
{	if (p)
	{	soap_default_SOAP_ENV__Code(soap, p);
		if (soap_begin_recv(soap) || soap_get_SOAP_ENV__Code(soap, p, NULL, NULL) == NULL || soap_end_recv(soap))
			return soap->error;
	}
	return SOAP_OK;
}
#endif

#endif

#ifndef WITH_NOGLOBAL

#ifndef SOAP_TYPE_SOAP_ENV__Header_DEFINED
#define SOAP_TYPE_SOAP_ENV__Header_DEFINED
SOAP_FMAC3 void SOAP_FMAC4 soap_default_SOAP_ENV__Header(struct soap*, struct SOAP_ENV__Header *);
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_SOAP_ENV__Header(struct soap*, const struct SOAP_ENV__Header *);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_SOAP_ENV__Header(struct soap*, const char*, int, const struct SOAP_ENV__Header *, const char*);
SOAP_FMAC3 struct SOAP_ENV__Header * SOAP_FMAC4 soap_in_SOAP_ENV__Header(struct soap*, const char*, struct SOAP_ENV__Header *, const char*);
SOAP_FMAC1 struct SOAP_ENV__Header * SOAP_FMAC2 soap_instantiate_SOAP_ENV__Header(struct soap*, int, const char*, const char*, size_t*);

inline struct SOAP_ENV__Header * soap_new_SOAP_ENV__Header(struct soap *soap, int n = -1)
{	return soap_instantiate_SOAP_ENV__Header(soap, n, NULL, NULL, NULL);
}

inline struct SOAP_ENV__Header * soap_new_req_SOAP_ENV__Header(
	struct soap *soap)
{	struct SOAP_ENV__Header *_p = soap_new_SOAP_ENV__Header(soap);
	if (_p)
	{	soap_default_SOAP_ENV__Header(soap, _p);
	}
	return _p;
}

inline struct SOAP_ENV__Header * soap_new_set_SOAP_ENV__Header(
	struct soap *soap)
{	struct SOAP_ENV__Header *_p = soap_new_SOAP_ENV__Header(soap);
	if (_p)
	{	soap_default_SOAP_ENV__Header(soap, _p);
	}
	return _p;
}
SOAP_FMAC3 int SOAP_FMAC4 soap_put_SOAP_ENV__Header(struct soap*, const struct SOAP_ENV__Header *, const char*, const char*);

inline int soap_write_SOAP_ENV__Header(struct soap *soap, struct SOAP_ENV__Header const *p)
{	soap_free_temp(soap);
	if (p)
	{	if (soap_begin_send(soap) || (soap_serialize_SOAP_ENV__Header(soap, p), 0) || soap_put_SOAP_ENV__Header(soap, p, "SOAP-ENV:Header", NULL) || soap_end_send(soap))
			return soap->error;
	}
	return SOAP_OK;
}
SOAP_FMAC3 struct SOAP_ENV__Header * SOAP_FMAC4 soap_get_SOAP_ENV__Header(struct soap*, struct SOAP_ENV__Header *, const char*, const char*);

inline int soap_read_SOAP_ENV__Header(struct soap *soap, struct SOAP_ENV__Header *p)
{	if (p)
	{	soap_default_SOAP_ENV__Header(soap, p);
		if (soap_begin_recv(soap) || soap_get_SOAP_ENV__Header(soap, p, NULL, NULL) == NULL || soap_end_recv(soap))
			return soap->error;
	}
	return SOAP_OK;
}
#endif

#endif

#ifndef SOAP_TYPE_methodCall_DEFINED
#define SOAP_TYPE_methodCall_DEFINED
SOAP_FMAC3 void SOAP_FMAC4 soap_default_methodCall(struct soap*, struct methodCall *);
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_methodCall(struct soap*, const struct methodCall *);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_methodCall(struct soap*, const char*, int, const struct methodCall *, const char*);
SOAP_FMAC3 struct methodCall * SOAP_FMAC4 soap_in_methodCall(struct soap*, const char*, struct methodCall *, const char*);
SOAP_FMAC1 struct methodCall * SOAP_FMAC2 soap_instantiate_methodCall(struct soap*, int, const char*, const char*, size_t*);

inline struct methodCall * soap_new_methodCall(struct soap *soap, int n = -1)
{	return soap_instantiate_methodCall(soap, n, NULL, NULL, NULL);
}

inline struct methodCall * soap_new_req_methodCall(
	struct soap *soap,
	const struct params& params)
{	struct methodCall *_p = soap_new_methodCall(soap);
	if (_p)
	{	soap_default_methodCall(soap, _p);
		_p->params = params;
	}
	return _p;
}

inline struct methodCall * soap_new_set_methodCall(
	struct soap *soap,
	char *methodName,
	const struct params& params)
{	struct methodCall *_p = soap_new_methodCall(soap);
	if (_p)
	{	soap_default_methodCall(soap, _p);
		_p->methodName = methodName;
		_p->params = params;
	}
	return _p;
}
SOAP_FMAC3 int SOAP_FMAC4 soap_put_methodCall(struct soap*, const struct methodCall *, const char*, const char*);

inline int soap_write_methodCall(struct soap *soap, struct methodCall const *p)
{	soap_free_temp(soap);
	if (p)
	{	if (soap_begin_send(soap) || (soap_serialize_methodCall(soap, p), 0) || soap_put_methodCall(soap, p, "methodCall", NULL) || soap_end_send(soap))
			return soap->error;
	}
	return SOAP_OK;
}
SOAP_FMAC3 struct methodCall * SOAP_FMAC4 soap_get_methodCall(struct soap*, struct methodCall *, const char*, const char*);

inline int soap_read_methodCall(struct soap *soap, struct methodCall *p)
{	if (p)
	{	soap_default_methodCall(soap, p);
		if (soap_begin_recv(soap) || soap_get_methodCall(soap, p, NULL, NULL) == NULL || soap_end_recv(soap))
			return soap->error;
	}
	return SOAP_OK;
}
#endif

#ifndef SOAP_TYPE_fault_DEFINED
#define SOAP_TYPE_fault_DEFINED
SOAP_FMAC3 void SOAP_FMAC4 soap_default_fault(struct soap*, struct fault *);
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_fault(struct soap*, const struct fault *);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_fault(struct soap*, const char*, int, const struct fault *, const char*);
SOAP_FMAC3 struct fault * SOAP_FMAC4 soap_in_fault(struct soap*, const char*, struct fault *, const char*);
SOAP_FMAC1 struct fault * SOAP_FMAC2 soap_instantiate_fault(struct soap*, int, const char*, const char*, size_t*);

inline struct fault * soap_new_fault(struct soap *soap, int n = -1)
{	return soap_instantiate_fault(soap, n, NULL, NULL, NULL);
}

inline struct fault * soap_new_req_fault(
	struct soap *soap,
	const struct value& value)
{	struct fault *_p = soap_new_fault(soap);
	if (_p)
	{	soap_default_fault(soap, _p);
		_p->value = value;
	}
	return _p;
}

inline struct fault * soap_new_set_fault(
	struct soap *soap,
	const struct value& value)
{	struct fault *_p = soap_new_fault(soap);
	if (_p)
	{	soap_default_fault(soap, _p);
		_p->value = value;
	}
	return _p;
}
SOAP_FMAC3 int SOAP_FMAC4 soap_put_fault(struct soap*, const struct fault *, const char*, const char*);

inline int soap_write_fault(struct soap *soap, struct fault const *p)
{	soap_free_temp(soap);
	if (p)
	{	if (soap_begin_send(soap) || (soap_serialize_fault(soap, p), 0) || soap_put_fault(soap, p, "fault", NULL) || soap_end_send(soap))
			return soap->error;
	}
	return SOAP_OK;
}
SOAP_FMAC3 struct fault * SOAP_FMAC4 soap_get_fault(struct soap*, struct fault *, const char*, const char*);

inline int soap_read_fault(struct soap *soap, struct fault *p)
{	if (p)
	{	soap_default_fault(soap, p);
		if (soap_begin_recv(soap) || soap_get_fault(soap, p, NULL, NULL) == NULL || soap_end_recv(soap))
			return soap->error;
	}
	return SOAP_OK;
}
#endif

#ifndef SOAP_TYPE_methodResponse_DEFINED
#define SOAP_TYPE_methodResponse_DEFINED
SOAP_FMAC3 void SOAP_FMAC4 soap_default_methodResponse(struct soap*, struct methodResponse *);
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_methodResponse(struct soap*, const struct methodResponse *);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_methodResponse(struct soap*, const char*, int, const struct methodResponse *, const char*);
SOAP_FMAC3 struct methodResponse * SOAP_FMAC4 soap_in_methodResponse(struct soap*, const char*, struct methodResponse *, const char*);
SOAP_FMAC1 struct methodResponse * SOAP_FMAC2 soap_instantiate_methodResponse(struct soap*, int, const char*, const char*, size_t*);

inline struct methodResponse * soap_new_methodResponse(struct soap *soap, int n = -1)
{	return soap_instantiate_methodResponse(soap, n, NULL, NULL, NULL);
}

inline struct methodResponse * soap_new_req_methodResponse(
	struct soap *soap)
{	struct methodResponse *_p = soap_new_methodResponse(soap);
	if (_p)
	{	soap_default_methodResponse(soap, _p);
	}
	return _p;
}

inline struct methodResponse * soap_new_set_methodResponse(
	struct soap *soap,
	struct params *params,
	struct fault *fault)
{	struct methodResponse *_p = soap_new_methodResponse(soap);
	if (_p)
	{	soap_default_methodResponse(soap, _p);
		_p->params = params;
		_p->fault = fault;
	}
	return _p;
}
SOAP_FMAC3 int SOAP_FMAC4 soap_put_methodResponse(struct soap*, const struct methodResponse *, const char*, const char*);

inline int soap_write_methodResponse(struct soap *soap, struct methodResponse const *p)
{	soap_free_temp(soap);
	if (p)
	{	if (soap_begin_send(soap) || (soap_serialize_methodResponse(soap, p), 0) || soap_put_methodResponse(soap, p, "methodResponse", NULL) || soap_end_send(soap))
			return soap->error;
	}
	return SOAP_OK;
}
SOAP_FMAC3 struct methodResponse * SOAP_FMAC4 soap_get_methodResponse(struct soap*, struct methodResponse *, const char*, const char*);

inline int soap_read_methodResponse(struct soap *soap, struct methodResponse *p)
{	if (p)
	{	soap_default_methodResponse(soap, p);
		if (soap_begin_recv(soap) || soap_get_methodResponse(soap, p, NULL, NULL) == NULL || soap_end_recv(soap))
			return soap->error;
	}
	return SOAP_OK;
}
#endif

#ifndef SOAP_TYPE_param_DEFINED
#define SOAP_TYPE_param_DEFINED
SOAP_FMAC3 void SOAP_FMAC4 soap_default_param(struct soap*, struct param *);
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_param(struct soap*, const struct param *);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_param(struct soap*, const char*, int, const struct param *, const char*);
SOAP_FMAC3 struct param * SOAP_FMAC4 soap_in_param(struct soap*, const char*, struct param *, const char*);
SOAP_FMAC1 struct param * SOAP_FMAC2 soap_instantiate_param(struct soap*, int, const char*, const char*, size_t*);

inline struct param * soap_new_param(struct soap *soap, int n = -1)
{	return soap_instantiate_param(soap, n, NULL, NULL, NULL);
}

inline struct param * soap_new_req_param(
	struct soap *soap,
	const struct value& value)
{	struct param *_p = soap_new_param(soap);
	if (_p)
	{	soap_default_param(soap, _p);
		_p->value = value;
	}
	return _p;
}

inline struct param * soap_new_set_param(
	struct soap *soap,
	const struct value& value)
{	struct param *_p = soap_new_param(soap);
	if (_p)
	{	soap_default_param(soap, _p);
		_p->value = value;
	}
	return _p;
}
SOAP_FMAC3 int SOAP_FMAC4 soap_put_param(struct soap*, const struct param *, const char*, const char*);

inline int soap_write_param(struct soap *soap, struct param const *p)
{	soap_free_temp(soap);
	if (p)
	{	if (soap_begin_send(soap) || (soap_serialize_param(soap, p), 0) || soap_put_param(soap, p, "param", NULL) || soap_end_send(soap))
			return soap->error;
	}
	return SOAP_OK;
}
SOAP_FMAC3 struct param * SOAP_FMAC4 soap_get_param(struct soap*, struct param *, const char*, const char*);

inline int soap_read_param(struct soap *soap, struct param *p)
{	if (p)
	{	soap_default_param(soap, p);
		if (soap_begin_recv(soap) || soap_get_param(soap, p, NULL, NULL) == NULL || soap_end_recv(soap))
			return soap->error;
	}
	return SOAP_OK;
}
#endif

#ifndef SOAP_TYPE_params_DEFINED
#define SOAP_TYPE_params_DEFINED
SOAP_FMAC3 void SOAP_FMAC4 soap_default_params(struct soap*, struct params *);
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_params(struct soap*, const struct params *);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_params(struct soap*, const char*, int, const struct params *, const char*);
SOAP_FMAC3 struct params * SOAP_FMAC4 soap_in_params(struct soap*, const char*, struct params *, const char*);
SOAP_FMAC1 struct params * SOAP_FMAC2 soap_instantiate_params(struct soap*, int, const char*, const char*, size_t*);

inline struct params * soap_new_params(struct soap *soap, int n = -1)
{	return soap_instantiate_params(soap, n, NULL, NULL, NULL);
}

inline struct params * soap_new_req_params(
	struct soap *soap,
	int __size,
	struct param *param)
{	struct params *_p = soap_new_params(soap);
	if (_p)
	{	soap_default_params(soap, _p);
		_p->__size = __size;
		_p->param = param;
	}
	return _p;
}

inline struct params * soap_new_set_params(
	struct soap *soap,
	int __size,
	struct param *param)
{	struct params *_p = soap_new_params(soap);
	if (_p)
	{	soap_default_params(soap, _p);
		_p->__size = __size;
		_p->param = param;
	}
	return _p;
}
SOAP_FMAC3 int SOAP_FMAC4 soap_put_params(struct soap*, const struct params *, const char*, const char*);

inline int soap_write_params(struct soap *soap, struct params const *p)
{	soap_free_temp(soap);
	if (p)
	{	if (soap_begin_send(soap) || (soap_serialize_params(soap, p), 0) || soap_put_params(soap, p, "params", NULL) || soap_end_send(soap))
			return soap->error;
	}
	return SOAP_OK;
}
SOAP_FMAC3 struct params * SOAP_FMAC4 soap_get_params(struct soap*, struct params *, const char*, const char*);

inline int soap_read_params(struct soap *soap, struct params *p)
{	if (p)
	{	soap_default_params(soap, p);
		if (soap_begin_recv(soap) || soap_get_params(soap, p, NULL, NULL) == NULL || soap_end_recv(soap))
			return soap->error;
	}
	return SOAP_OK;
}
#endif

#ifndef SOAP_TYPE__array_DEFINED
#define SOAP_TYPE__array_DEFINED
SOAP_FMAC3 void SOAP_FMAC4 soap_default__array(struct soap*, struct _array *);
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize__array(struct soap*, const struct _array *);
SOAP_FMAC3 int SOAP_FMAC4 soap_out__array(struct soap*, const char*, int, const struct _array *, const char*);
SOAP_FMAC3 struct _array * SOAP_FMAC4 soap_in__array(struct soap*, const char*, struct _array *, const char*);
SOAP_FMAC1 struct _array * SOAP_FMAC2 soap_instantiate__array(struct soap*, int, const char*, const char*, size_t*);

inline struct _array * soap_new__array(struct soap *soap, int n = -1)
{	return soap_instantiate__array(soap, n, NULL, NULL, NULL);
}

inline struct _array * soap_new_req__array(
	struct soap *soap,
	const struct data& data)
{	struct _array *_p = soap_new__array(soap);
	if (_p)
	{	soap_default__array(soap, _p);
		_p->data = data;
	}
	return _p;
}

inline struct _array * soap_new_set__array(
	struct soap *soap,
	const struct data& data)
{	struct _array *_p = soap_new__array(soap);
	if (_p)
	{	soap_default__array(soap, _p);
		_p->data = data;
	}
	return _p;
}
SOAP_FMAC3 int SOAP_FMAC4 soap_put__array(struct soap*, const struct _array *, const char*, const char*);

inline int soap_write__array(struct soap *soap, struct _array const *p)
{	soap_free_temp(soap);
	if (p)
	{	if (soap_begin_send(soap) || (soap_serialize__array(soap, p), 0) || soap_put__array(soap, p, "array", NULL) || soap_end_send(soap))
			return soap->error;
	}
	return SOAP_OK;
}
SOAP_FMAC3 struct _array * SOAP_FMAC4 soap_get__array(struct soap*, struct _array *, const char*, const char*);

inline int soap_read__array(struct soap *soap, struct _array *p)
{	if (p)
	{	soap_default__array(soap, p);
		if (soap_begin_recv(soap) || soap_get__array(soap, p, NULL, NULL) == NULL || soap_end_recv(soap))
			return soap->error;
	}
	return SOAP_OK;
}
#endif

#ifndef SOAP_TYPE_data_DEFINED
#define SOAP_TYPE_data_DEFINED
SOAP_FMAC3 void SOAP_FMAC4 soap_default_data(struct soap*, struct data *);
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_data(struct soap*, const struct data *);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_data(struct soap*, const char*, int, const struct data *, const char*);
SOAP_FMAC3 struct data * SOAP_FMAC4 soap_in_data(struct soap*, const char*, struct data *, const char*);
SOAP_FMAC1 struct data * SOAP_FMAC2 soap_instantiate_data(struct soap*, int, const char*, const char*, size_t*);

inline struct data * soap_new_data(struct soap *soap, int n = -1)
{	return soap_instantiate_data(soap, n, NULL, NULL, NULL);
}

inline struct data * soap_new_req_data(
	struct soap *soap,
	int __size,
	struct value *value)
{	struct data *_p = soap_new_data(soap);
	if (_p)
	{	soap_default_data(soap, _p);
		_p->__size = __size;
		_p->value = value;
	}
	return _p;
}

inline struct data * soap_new_set_data(
	struct soap *soap,
	int __size,
	struct value *value)
{	struct data *_p = soap_new_data(soap);
	if (_p)
	{	soap_default_data(soap, _p);
		_p->__size = __size;
		_p->value = value;
	}
	return _p;
}
SOAP_FMAC3 int SOAP_FMAC4 soap_put_data(struct soap*, const struct data *, const char*, const char*);

inline int soap_write_data(struct soap *soap, struct data const *p)
{	soap_free_temp(soap);
	if (p)
	{	if (soap_begin_send(soap) || (soap_serialize_data(soap, p), 0) || soap_put_data(soap, p, "data", NULL) || soap_end_send(soap))
			return soap->error;
	}
	return SOAP_OK;
}
SOAP_FMAC3 struct data * SOAP_FMAC4 soap_get_data(struct soap*, struct data *, const char*, const char*);

inline int soap_read_data(struct soap *soap, struct data *p)
{	if (p)
	{	soap_default_data(soap, p);
		if (soap_begin_recv(soap) || soap_get_data(soap, p, NULL, NULL) == NULL || soap_end_recv(soap))
			return soap->error;
	}
	return SOAP_OK;
}
#endif

#ifndef SOAP_TYPE_member_DEFINED
#define SOAP_TYPE_member_DEFINED
SOAP_FMAC3 void SOAP_FMAC4 soap_default_member(struct soap*, struct member *);
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_member(struct soap*, const struct member *);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_member(struct soap*, const char*, int, const struct member *, const char*);
SOAP_FMAC3 struct member * SOAP_FMAC4 soap_in_member(struct soap*, const char*, struct member *, const char*);
SOAP_FMAC1 struct member * SOAP_FMAC2 soap_instantiate_member(struct soap*, int, const char*, const char*, size_t*);

inline struct member * soap_new_member(struct soap *soap, int n = -1)
{	return soap_instantiate_member(soap, n, NULL, NULL, NULL);
}

inline struct member * soap_new_req_member(
	struct soap *soap,
	const struct value& value)
{	struct member *_p = soap_new_member(soap);
	if (_p)
	{	soap_default_member(soap, _p);
		_p->value = value;
	}
	return _p;
}

inline struct member * soap_new_set_member(
	struct soap *soap,
	char *name,
	const struct value& value)
{	struct member *_p = soap_new_member(soap);
	if (_p)
	{	soap_default_member(soap, _p);
		_p->name = name;
		_p->value = value;
	}
	return _p;
}
SOAP_FMAC3 int SOAP_FMAC4 soap_put_member(struct soap*, const struct member *, const char*, const char*);

inline int soap_write_member(struct soap *soap, struct member const *p)
{	soap_free_temp(soap);
	if (p)
	{	if (soap_begin_send(soap) || (soap_serialize_member(soap, p), 0) || soap_put_member(soap, p, "member", NULL) || soap_end_send(soap))
			return soap->error;
	}
	return SOAP_OK;
}
SOAP_FMAC3 struct member * SOAP_FMAC4 soap_get_member(struct soap*, struct member *, const char*, const char*);

inline int soap_read_member(struct soap *soap, struct member *p)
{	if (p)
	{	soap_default_member(soap, p);
		if (soap_begin_recv(soap) || soap_get_member(soap, p, NULL, NULL) == NULL || soap_end_recv(soap))
			return soap->error;
	}
	return SOAP_OK;
}
#endif

#ifndef SOAP_TYPE__struct_DEFINED
#define SOAP_TYPE__struct_DEFINED
SOAP_FMAC3 void SOAP_FMAC4 soap_default__struct(struct soap*, struct _struct *);
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize__struct(struct soap*, const struct _struct *);
SOAP_FMAC3 int SOAP_FMAC4 soap_out__struct(struct soap*, const char*, int, const struct _struct *, const char*);
SOAP_FMAC3 struct _struct * SOAP_FMAC4 soap_in__struct(struct soap*, const char*, struct _struct *, const char*);
SOAP_FMAC1 struct _struct * SOAP_FMAC2 soap_instantiate__struct(struct soap*, int, const char*, const char*, size_t*);

inline struct _struct * soap_new__struct(struct soap *soap, int n = -1)
{	return soap_instantiate__struct(soap, n, NULL, NULL, NULL);
}

inline struct _struct * soap_new_req__struct(
	struct soap *soap,
	int __size,
	struct member *member)
{	struct _struct *_p = soap_new__struct(soap);
	if (_p)
	{	soap_default__struct(soap, _p);
		_p->__size = __size;
		_p->member = member;
	}
	return _p;
}

inline struct _struct * soap_new_set__struct(
	struct soap *soap,
	int __size,
	struct member *member)
{	struct _struct *_p = soap_new__struct(soap);
	if (_p)
	{	soap_default__struct(soap, _p);
		_p->__size = __size;
		_p->member = member;
	}
	return _p;
}
SOAP_FMAC3 int SOAP_FMAC4 soap_put__struct(struct soap*, const struct _struct *, const char*, const char*);

inline int soap_write__struct(struct soap *soap, struct _struct const *p)
{	soap_free_temp(soap);
	if (p)
	{	if (soap_begin_send(soap) || (soap_serialize__struct(soap, p), 0) || soap_put__struct(soap, p, "struct", NULL) || soap_end_send(soap))
			return soap->error;
	}
	return SOAP_OK;
}
SOAP_FMAC3 struct _struct * SOAP_FMAC4 soap_get__struct(struct soap*, struct _struct *, const char*, const char*);

inline int soap_read__struct(struct soap *soap, struct _struct *p)
{	if (p)
	{	soap_default__struct(soap, p);
		if (soap_begin_recv(soap) || soap_get__struct(soap, p, NULL, NULL) == NULL || soap_end_recv(soap))
			return soap->error;
	}
	return SOAP_OK;
}
#endif

#ifndef SOAP_TYPE__base64_DEFINED
#define SOAP_TYPE__base64_DEFINED
SOAP_FMAC3 void SOAP_FMAC4 soap_default__base64(struct soap*, struct _base64 *);
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize__base64(struct soap*, const struct _base64 *);
SOAP_FMAC3 int SOAP_FMAC4 soap_out__base64(struct soap*, const char*, int, const struct _base64 *, const char*);
SOAP_FMAC3 struct _base64 * SOAP_FMAC4 soap_in__base64(struct soap*, const char*, struct _base64 *, const char*);
SOAP_FMAC1 struct _base64 * SOAP_FMAC2 soap_instantiate__base64(struct soap*, int, const char*, const char*, size_t*);

inline struct _base64 * soap_new__base64(struct soap *soap, int n = -1)
{	return soap_instantiate__base64(soap, n, NULL, NULL, NULL);
}

inline struct _base64 * soap_new_req__base64(
	struct soap *soap)
{	struct _base64 *_p = soap_new__base64(soap);
	if (_p)
	{	soap_default__base64(soap, _p);
	}
	return _p;
}

inline struct _base64 * soap_new_set__base64(
	struct soap *soap,
	unsigned char *__ptr,
	int __size)
{	struct _base64 *_p = soap_new__base64(soap);
	if (_p)
	{	soap_default__base64(soap, _p);
		_p->__ptr = __ptr;
		_p->__size = __size;
	}
	return _p;
}
SOAP_FMAC3 int SOAP_FMAC4 soap_put__base64(struct soap*, const struct _base64 *, const char*, const char*);

inline int soap_write__base64(struct soap *soap, struct _base64 const *p)
{	soap_free_temp(soap);
	if (p)
	{	if (soap_begin_send(soap) || (soap_serialize__base64(soap, p), 0) || soap_put__base64(soap, p, "base64", NULL) || soap_end_send(soap))
			return soap->error;
	}
	return SOAP_OK;
}
SOAP_FMAC3 struct _base64 * SOAP_FMAC4 soap_get__base64(struct soap*, struct _base64 *, const char*, const char*);

inline int soap_read__base64(struct soap *soap, struct _base64 *p)
{	if (p)
	{	soap_default__base64(soap, p);
		if (soap_begin_recv(soap) || soap_get__base64(soap, p, NULL, NULL) == NULL || soap_end_recv(soap))
			return soap->error;
	}
	return SOAP_OK;
}
#endif

#ifndef SOAP_TYPE_value_DEFINED
#define SOAP_TYPE_value_DEFINED
SOAP_FMAC3 void SOAP_FMAC4 soap_default_value(struct soap*, struct value *);
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_value(struct soap*, const struct value *);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_value(struct soap*, const char*, int, const struct value *, const char*);
SOAP_FMAC3 struct value * SOAP_FMAC4 soap_in_value(struct soap*, const char*, struct value *, const char*);
SOAP_FMAC1 struct value * SOAP_FMAC2 soap_instantiate_value(struct soap*, int, const char*, const char*, size_t*);

inline struct value * soap_new_value(struct soap *soap, int n = -1)
{	return soap_instantiate_value(soap, n, NULL, NULL, NULL);
}

inline struct value * soap_new_req_value(
	struct soap *soap,
	int __type,
	void *ref)
{	struct value *_p = soap_new_value(soap);
	if (_p)
	{	soap_default_value(soap, _p);
		_p->__type = __type;
		_p->ref = ref;
	}
	return _p;
}

inline struct value * soap_new_set_value(
	struct soap *soap,
	int __type,
	void *ref,
	char *__any)
{	struct value *_p = soap_new_value(soap);
	if (_p)
	{	soap_default_value(soap, _p);
		_p->__type = __type;
		_p->ref = ref;
		_p->__any = __any;
	}
	return _p;
}
SOAP_FMAC3 int SOAP_FMAC4 soap_put_value(struct soap*, const struct value *, const char*, const char*);

inline int soap_write_value(struct soap *soap, struct value const *p)
{	soap_free_temp(soap);
	if (p)
	{	if (soap_begin_send(soap) || (soap_serialize_value(soap, p), 0) || soap_put_value(soap, p, "value", NULL) || soap_end_send(soap))
			return soap->error;
	}
	return SOAP_OK;
}
SOAP_FMAC3 struct value * SOAP_FMAC4 soap_get_value(struct soap*, struct value *, const char*, const char*);

inline int soap_read_value(struct soap *soap, struct value *p)
{	if (p)
	{	soap_default_value(soap, p);
		if (soap_begin_recv(soap) || soap_get_value(soap, p, NULL, NULL) == NULL || soap_end_recv(soap))
			return soap->error;
	}
	return SOAP_OK;
}
#endif

#ifndef WITH_NOGLOBAL

#ifndef SOAP_TYPE_PointerToSOAP_ENV__Reason_DEFINED
#define SOAP_TYPE_PointerToSOAP_ENV__Reason_DEFINED
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_PointerToSOAP_ENV__Reason(struct soap*, struct SOAP_ENV__Reason *const*);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_PointerToSOAP_ENV__Reason(struct soap*, const char *, int, struct SOAP_ENV__Reason *const*, const char *);
SOAP_FMAC3 struct SOAP_ENV__Reason ** SOAP_FMAC4 soap_in_PointerToSOAP_ENV__Reason(struct soap*, const char*, struct SOAP_ENV__Reason **, const char*);
SOAP_FMAC3 int SOAP_FMAC4 soap_put_PointerToSOAP_ENV__Reason(struct soap*, struct SOAP_ENV__Reason *const*, const char*, const char*);
SOAP_FMAC3 struct SOAP_ENV__Reason ** SOAP_FMAC4 soap_get_PointerToSOAP_ENV__Reason(struct soap*, struct SOAP_ENV__Reason **, const char*, const char*);
#endif

#endif

#ifndef WITH_NOGLOBAL

#ifndef SOAP_TYPE_PointerToSOAP_ENV__Detail_DEFINED
#define SOAP_TYPE_PointerToSOAP_ENV__Detail_DEFINED
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_PointerToSOAP_ENV__Detail(struct soap*, struct SOAP_ENV__Detail *const*);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_PointerToSOAP_ENV__Detail(struct soap*, const char *, int, struct SOAP_ENV__Detail *const*, const char *);
SOAP_FMAC3 struct SOAP_ENV__Detail ** SOAP_FMAC4 soap_in_PointerToSOAP_ENV__Detail(struct soap*, const char*, struct SOAP_ENV__Detail **, const char*);
SOAP_FMAC3 int SOAP_FMAC4 soap_put_PointerToSOAP_ENV__Detail(struct soap*, struct SOAP_ENV__Detail *const*, const char*, const char*);
SOAP_FMAC3 struct SOAP_ENV__Detail ** SOAP_FMAC4 soap_get_PointerToSOAP_ENV__Detail(struct soap*, struct SOAP_ENV__Detail **, const char*, const char*);
#endif

#endif

#ifndef WITH_NOGLOBAL

#ifndef SOAP_TYPE_PointerToSOAP_ENV__Code_DEFINED
#define SOAP_TYPE_PointerToSOAP_ENV__Code_DEFINED
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_PointerToSOAP_ENV__Code(struct soap*, struct SOAP_ENV__Code *const*);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_PointerToSOAP_ENV__Code(struct soap*, const char *, int, struct SOAP_ENV__Code *const*, const char *);
SOAP_FMAC3 struct SOAP_ENV__Code ** SOAP_FMAC4 soap_in_PointerToSOAP_ENV__Code(struct soap*, const char*, struct SOAP_ENV__Code **, const char*);
SOAP_FMAC3 int SOAP_FMAC4 soap_put_PointerToSOAP_ENV__Code(struct soap*, struct SOAP_ENV__Code *const*, const char*, const char*);
SOAP_FMAC3 struct SOAP_ENV__Code ** SOAP_FMAC4 soap_get_PointerToSOAP_ENV__Code(struct soap*, struct SOAP_ENV__Code **, const char*, const char*);
#endif

#endif

#ifndef SOAP_TYPE_PointerTo_base64_DEFINED
#define SOAP_TYPE_PointerTo_base64_DEFINED
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_PointerTo_base64(struct soap*, struct _base64 *const*);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_PointerTo_base64(struct soap*, const char *, int, struct _base64 *const*, const char *);
SOAP_FMAC3 struct _base64 ** SOAP_FMAC4 soap_in_PointerTo_base64(struct soap*, const char*, struct _base64 **, const char*);
SOAP_FMAC3 int SOAP_FMAC4 soap_put_PointerTo_base64(struct soap*, struct _base64 *const*, const char*, const char*);
SOAP_FMAC3 struct _base64 ** SOAP_FMAC4 soap_get_PointerTo_base64(struct soap*, struct _base64 **, const char*, const char*);
#endif

#ifndef SOAP_TYPE_PointerTo_double_DEFINED
#define SOAP_TYPE_PointerTo_double_DEFINED
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_PointerTo_double(struct soap*, double *const*);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_PointerTo_double(struct soap*, const char *, int, double *const*, const char *);
SOAP_FMAC3 double ** SOAP_FMAC4 soap_in_PointerTo_double(struct soap*, const char*, double **, const char*);
SOAP_FMAC3 int SOAP_FMAC4 soap_put_PointerTo_double(struct soap*, double *const*, const char*, const char*);
SOAP_FMAC3 double ** SOAP_FMAC4 soap_get_PointerTo_double(struct soap*, double **, const char*, const char*);
#endif

#ifndef SOAP_TYPE_PointerTo_int_DEFINED
#define SOAP_TYPE_PointerTo_int_DEFINED
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_PointerTo_int(struct soap*, LONG64 *const*);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_PointerTo_int(struct soap*, const char *, int, LONG64 *const*, const char *);
SOAP_FMAC3 LONG64 ** SOAP_FMAC4 soap_in_PointerTo_int(struct soap*, const char*, LONG64 **, const char*);
SOAP_FMAC3 int SOAP_FMAC4 soap_put_PointerTo_int(struct soap*, LONG64 *const*, const char*, const char*);
SOAP_FMAC3 LONG64 ** SOAP_FMAC4 soap_get_PointerTo_int(struct soap*, LONG64 **, const char*, const char*);
#endif

#ifndef SOAP_TYPE_PointerTo_boolean_DEFINED
#define SOAP_TYPE_PointerTo_boolean_DEFINED
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_PointerTo_boolean(struct soap*, char *const*);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_PointerTo_boolean(struct soap*, const char *, int, char *const*, const char *);
SOAP_FMAC3 char ** SOAP_FMAC4 soap_in_PointerTo_boolean(struct soap*, const char*, char **, const char*);
SOAP_FMAC3 int SOAP_FMAC4 soap_put_PointerTo_boolean(struct soap*, char *const*, const char*, const char*);
SOAP_FMAC3 char ** SOAP_FMAC4 soap_get_PointerTo_boolean(struct soap*, char **, const char*, const char*);
#endif

#ifndef SOAP_TYPE_PointerTomethodResponse_DEFINED
#define SOAP_TYPE_PointerTomethodResponse_DEFINED
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_PointerTomethodResponse(struct soap*, struct methodResponse *const*);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_PointerTomethodResponse(struct soap*, const char *, int, struct methodResponse *const*, const char *);
SOAP_FMAC3 struct methodResponse ** SOAP_FMAC4 soap_in_PointerTomethodResponse(struct soap*, const char*, struct methodResponse **, const char*);
SOAP_FMAC3 int SOAP_FMAC4 soap_put_PointerTomethodResponse(struct soap*, struct methodResponse *const*, const char*, const char*);
SOAP_FMAC3 struct methodResponse ** SOAP_FMAC4 soap_get_PointerTomethodResponse(struct soap*, struct methodResponse **, const char*, const char*);
#endif

#ifndef SOAP_TYPE_PointerTofault_DEFINED
#define SOAP_TYPE_PointerTofault_DEFINED
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_PointerTofault(struct soap*, struct fault *const*);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_PointerTofault(struct soap*, const char *, int, struct fault *const*, const char *);
SOAP_FMAC3 struct fault ** SOAP_FMAC4 soap_in_PointerTofault(struct soap*, const char*, struct fault **, const char*);
SOAP_FMAC3 int SOAP_FMAC4 soap_put_PointerTofault(struct soap*, struct fault *const*, const char*, const char*);
SOAP_FMAC3 struct fault ** SOAP_FMAC4 soap_get_PointerTofault(struct soap*, struct fault **, const char*, const char*);
#endif

#ifndef SOAP_TYPE_PointerToparams_DEFINED
#define SOAP_TYPE_PointerToparams_DEFINED
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_PointerToparams(struct soap*, struct params *const*);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_PointerToparams(struct soap*, const char *, int, struct params *const*, const char *);
SOAP_FMAC3 struct params ** SOAP_FMAC4 soap_in_PointerToparams(struct soap*, const char*, struct params **, const char*);
SOAP_FMAC3 int SOAP_FMAC4 soap_put_PointerToparams(struct soap*, struct params *const*, const char*, const char*);
SOAP_FMAC3 struct params ** SOAP_FMAC4 soap_get_PointerToparams(struct soap*, struct params **, const char*, const char*);
#endif

#ifndef SOAP_TYPE_PointerToparam_DEFINED
#define SOAP_TYPE_PointerToparam_DEFINED
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_PointerToparam(struct soap*, struct param *const*);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_PointerToparam(struct soap*, const char *, int, struct param *const*, const char *);
SOAP_FMAC3 struct param ** SOAP_FMAC4 soap_in_PointerToparam(struct soap*, const char*, struct param **, const char*);
SOAP_FMAC3 int SOAP_FMAC4 soap_put_PointerToparam(struct soap*, struct param *const*, const char*, const char*);
SOAP_FMAC3 struct param ** SOAP_FMAC4 soap_get_PointerToparam(struct soap*, struct param **, const char*, const char*);
#endif

#ifndef SOAP_TYPE_wstring_DEFINED
#define SOAP_TYPE_wstring_DEFINED
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_wstring(struct soap*, wchar_t *const*);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_wstring(struct soap*, const char*, int, wchar_t*const*, const char*);
SOAP_FMAC3 wchar_t * * SOAP_FMAC4 soap_in_wstring(struct soap*, const char*, wchar_t **, const char*);
SOAP_FMAC3 int SOAP_FMAC4 soap_put_wstring(struct soap*, wchar_t *const*, const char*, const char*);

inline int soap_write_wstring(struct soap *soap, wchar_t *const *p)
{	soap_free_temp(soap);
	if (p)
	{	if (soap_begin_send(soap) || soap_put_wstring(soap, p, "string", NULL) || soap_end_send(soap))
			return soap->error;
	}
	return SOAP_OK;
}
SOAP_FMAC3 wchar_t ** SOAP_FMAC4 soap_get_wstring(struct soap*, wchar_t **, const char*, const char*);

inline int soap_read_wstring(struct soap *soap, wchar_t **p)
{	if (p)
	{	if (soap_begin_recv(soap) || soap_get_wstring(soap, p, NULL, NULL) == NULL || soap_end_recv(soap))
			return soap->error;
	}
	return SOAP_OK;
}
#endif

#ifndef SOAP_TYPE_PointerTomember_DEFINED
#define SOAP_TYPE_PointerTomember_DEFINED
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_PointerTomember(struct soap*, struct member *const*);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_PointerTomember(struct soap*, const char *, int, struct member *const*, const char *);
SOAP_FMAC3 struct member ** SOAP_FMAC4 soap_in_PointerTomember(struct soap*, const char*, struct member **, const char*);
SOAP_FMAC3 int SOAP_FMAC4 soap_put_PointerTomember(struct soap*, struct member *const*, const char*, const char*);
SOAP_FMAC3 struct member ** SOAP_FMAC4 soap_get_PointerTomember(struct soap*, struct member **, const char*, const char*);
#endif

#ifndef SOAP_TYPE_PointerTounsignedByte_DEFINED
#define SOAP_TYPE_PointerTounsignedByte_DEFINED
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_PointerTounsignedByte(struct soap*, unsigned char *const*);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_PointerTounsignedByte(struct soap*, const char *, int, unsigned char *const*, const char *);
SOAP_FMAC3 unsigned char ** SOAP_FMAC4 soap_in_PointerTounsignedByte(struct soap*, const char*, unsigned char **, const char*);
SOAP_FMAC3 int SOAP_FMAC4 soap_put_PointerTounsignedByte(struct soap*, unsigned char *const*, const char*, const char*);
SOAP_FMAC3 unsigned char ** SOAP_FMAC4 soap_get_PointerTounsignedByte(struct soap*, unsigned char **, const char*, const char*);
#endif
/* _dateTime_DOTiso8601 is a typedef synonym for string */

#ifndef SOAP_TYPE__dateTime_DOTiso8601_DEFINED
#define SOAP_TYPE__dateTime_DOTiso8601_DEFINED

#define soap_default__dateTime_DOTiso8601(soap, a) soap_default_string(soap, a)


#define soap_serialize__dateTime_DOTiso8601 soap_serialize_string


#define soap__dateTime_DOTiso86012s soap_string2s


#define soap_out__dateTime_DOTiso8601 soap_out_string


#define soap_s2_dateTime_DOTiso8601 soap_s2string


#define soap_in__dateTime_DOTiso8601 soap_in_string


#define soap_put__dateTime_DOTiso8601 soap_put_string


#define soap_write__dateTime_DOTiso8601 soap_write_string


#define soap_get__dateTime_DOTiso8601 soap_get_string


#define soap_read__dateTime_DOTiso8601 soap_read_string

#endif
/* _string is a typedef synonym for string */

#ifndef SOAP_TYPE__string_DEFINED
#define SOAP_TYPE__string_DEFINED

#define soap_default__string(soap, a) soap_default_string(soap, a)


#define soap_serialize__string soap_serialize_string


#define soap__string2s soap_string2s


#define soap_out__string soap_out_string


#define soap_s2_string soap_s2string


#define soap_in__string soap_in_string


#define soap_put__string soap_put_string


#define soap_write__string soap_write_string


#define soap_get__string soap_get_string


#define soap_read__string soap_read_string

#endif

#ifndef SOAP_TYPE_PointerTovalue_DEFINED
#define SOAP_TYPE_PointerTovalue_DEFINED
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_PointerTovalue(struct soap*, struct value *const*);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_PointerTovalue(struct soap*, const char *, int, struct value *const*, const char *);
SOAP_FMAC3 struct value ** SOAP_FMAC4 soap_in_PointerTovalue(struct soap*, const char*, struct value **, const char*);
SOAP_FMAC3 int SOAP_FMAC4 soap_put_PointerTovalue(struct soap*, struct value *const*, const char*, const char*);
SOAP_FMAC3 struct value ** SOAP_FMAC4 soap_get_PointerTovalue(struct soap*, struct value **, const char*, const char*);
#endif

#ifndef SOAP_TYPE__XML_DEFINED
#define SOAP_TYPE__XML_DEFINED
#endif

#ifndef SOAP_TYPE__QName_DEFINED
#define SOAP_TYPE__QName_DEFINED
SOAP_FMAC3 void SOAP_FMAC4 soap_default__QName(struct soap*, char **);
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize__QName(struct soap*, char *const*);
SOAP_FMAC3 int SOAP_FMAC4 soap_out__QName(struct soap*, const char*, int, char*const*, const char*);
SOAP_FMAC3 char * * SOAP_FMAC4 soap_in__QName(struct soap*, const char*, char **, const char*);
SOAP_FMAC3 int SOAP_FMAC4 soap_put__QName(struct soap*, char *const*, const char*, const char*);

inline int soap_write__QName(struct soap *soap, char *const *p)
{	soap_free_temp(soap);
	if (p)
	{	if (soap_begin_send(soap) || soap_put__QName(soap, p, "QName", NULL) || soap_end_send(soap))
			return soap->error;
	}
	return SOAP_OK;
}
SOAP_FMAC3 char ** SOAP_FMAC4 soap_get__QName(struct soap*, char **, const char*, const char*);

inline int soap_read__QName(struct soap *soap, char **p)
{	if (p)
	{	if (soap_begin_recv(soap) || soap_get__QName(soap, p, NULL, NULL) == NULL || soap_end_recv(soap))
			return soap->error;
	}
	return SOAP_OK;
}
#endif

#ifndef SOAP_TYPE_string_DEFINED
#define SOAP_TYPE_string_DEFINED
SOAP_FMAC3 void SOAP_FMAC4 soap_default_string(struct soap*, char **);
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_string(struct soap*, char *const*);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_string(struct soap*, const char*, int, char*const*, const char*);
SOAP_FMAC3 char * * SOAP_FMAC4 soap_in_string(struct soap*, const char*, char **, const char*);
SOAP_FMAC3 int SOAP_FMAC4 soap_put_string(struct soap*, char *const*, const char*, const char*);

inline int soap_write_string(struct soap *soap, char *const *p)
{	soap_free_temp(soap);
	if (p)
	{	if (soap_begin_send(soap) || soap_put_string(soap, p, "string", NULL) || soap_end_send(soap))
			return soap->error;
	}
	return SOAP_OK;
}
SOAP_FMAC3 char ** SOAP_FMAC4 soap_get_string(struct soap*, char **, const char*, const char*);

inline int soap_read_string(struct soap *soap, char **p)
{	if (p)
	{	if (soap_begin_recv(soap) || soap_get_string(soap, p, NULL, NULL) == NULL || soap_end_recv(soap))
			return soap->error;
	}
	return SOAP_OK;
}
#endif

#endif

/* End of soapH.h */
