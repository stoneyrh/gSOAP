// Reminder: Modify typemap.dat to customize the header file generated by wsdl2h
/* aws-s3.h
   Generated by wsdl2h 2.8.28 from http://doc.s3.amazonaws.com/2006-03-01/AmazonS3.wsdl and typemap.dat
   2016-02-22 17:18:44 GMT

   DO NOT INCLUDE THIS FILE DIRECTLY INTO YOUR PROJECT BUILDS
   USE THE soapcpp2-GENERATED SOURCE CODE FILES FOR YOUR PROJECT BUILDS

gSOAP XML Web services tools
Copyright (C) 2000-2016, Robert van Engelen, Genivia Inc. All Rights Reserved.
This program is released under the GPL with the additional exemption that
compiling, linking, and/or using OpenSSL is allowed.
--------------------------------------------------------------------------------
A commercial use license is available from Genivia Inc., contact@genivia.com
--------------------------------------------------------------------------------
*/

/** @page page_notes Notes

@note HINTS:
 - Run soapcpp2 on aws-s3.h to generate the SOAP/XML processing logic.
   Use soapcpp2 -I to specify paths for #import
   To build with STL, 'stlvector.h' is imported from 'import' dir in package.
   Use soapcpp2 -j to generate improved proxy and server classes.
 - Use wsdl2h -c and -s to generate pure C code or C++ code without STL.
 - Use 'typemap.dat' to control namespace bindings and type mappings.
   It is strongly recommended to customize the names of the namespace prefixes
   generated by wsdl2h. To do so, modify the prefix bindings in the Namespaces
   section below and add the modified lines to 'typemap.dat' to rerun wsdl2h.
 - Use Doxygen (www.doxygen.org) on this file to generate documentation.
 - Use wsdl2h -R to generate REST operations.
 - Use wsdl2h -nname to use name as the base namespace prefix instead of 'ns'.
 - Use wsdl2h -Nname for service prefix and produce multiple service bindings
 - Use wsdl2h -d to enable DOM support for xsd:anyType.
 - Use wsdl2h -g to auto-generate readers and writers for root elements.
 - Use wsdl2h -b to auto-generate bi-directional operations (duplex ops).
 - Use wsdl2h -U to map XML names to C++ Unicode identifiers instead of _xNNNN.
 - Use wsdl2h -u to disable the generation of unions.
 - Struct/class members serialized as XML attributes are annotated with a '@'.
 - Struct/class members that have a special role are annotated with a '$'.

@warning
   DO NOT INCLUDE THIS ANNOTATED FILE DIRECTLY IN YOUR PROJECT SOURCE CODE.
   USE THE FILES GENERATED BY soapcpp2 FOR YOUR PROJECT'S SOURCE CODE:
   THE soapStub.h FILE CONTAINS THIS CONTENT WITHOUT ANNOTATIONS.

@copyright LICENSE:
@verbatim
--------------------------------------------------------------------------------
gSOAP XML Web services tools
Copyright (C) 2000-2016, Robert van Engelen, Genivia Inc. All Rights Reserved.
The wsdl2h tool and its generated software are released under the GPL.
This software is released under the GPL with the additional exemption that
compiling, linking, and/or using OpenSSL is allowed.
--------------------------------------------------------------------------------
GPL license.

This program is free software; you can redistribute it and/or modify it under
the terms of the GNU General Public License as published by the Free Software
Foundation; either version 2 of the License, or (at your option) any later
version.

This program is distributed in the hope that it will be useful, but WITHOUT ANY
WARRANTY; without even the implied warranty of MERCHANTABILITY or FITNESS FOR A
PARTICULAR PURPOSE. See the GNU General Public License for more details.

You should have received a copy of the GNU General Public License along with
this program; if not, write to the Free Software Foundation, Inc., 59 Temple
Place, Suite 330, Boston, MA 02111-1307 USA

Author contact information:
engelen@genivia.com / engelen@acm.org

This program is released under the GPL with the additional exemption that
compiling, linking, and/or using OpenSSL is allowed.
--------------------------------------------------------------------------------
A commercial-use license is available from Genivia, Inc., contact@genivia.com
--------------------------------------------------------------------------------
@endverbatim

*/


//gsoapopt c++,w

/******************************************************************************\
 *                                                                            *
 * Definitions                                                                *
 *   http://s3.amazonaws.com/doc/2006-03-01/                                  *
 *                                                                            *
\******************************************************************************/


/******************************************************************************\
 *                                                                            *
 * $CONTAINER                                                                 *
 *   std::vector                                                              *
 *                                                                            *
\******************************************************************************/

template <class T> class std::vector;

/******************************************************************************\
 *                                                                            *
 * Import                                                                     *
 *                                                                            *
\******************************************************************************/

#import "stl.h"	// enable STL containers when used (option -s removes STL dependency)

/******************************************************************************\
 *                                                                            *
 * Schema Namespaces                                                          *
 *                                                                            *
\******************************************************************************/


/* NOTE:

It is strongly recommended to customize the names of the namespace prefixes
generated by wsdl2h. To do so, modify the prefix bindings below and add the
modified lines to typemap.dat to rerun wsdl2h:

s3 = "http://s3.amazonaws.com/doc/2006-03-01/"

*/

#define SOAP_NAMESPACE_OF_s3	"http://s3.amazonaws.com/doc/2006-03-01/"
//gsoap s3    schema namespace:	http://s3.amazonaws.com/doc/2006-03-01/
//gsoap s3    schema elementForm:	qualified
//gsoap s3    schema attributeForm:	unqualified

/******************************************************************************\
 *                                                                            *
 * Built-in Schema Types and Top-Level Elements and Attributes                *
 *                                                                            *
\******************************************************************************/

/// Built-in XSD type "xs:base64Binary".
class xsd__base64Binary
{	unsigned char *__ptr;
	int __size;
	char *id, *type, *options; // NOTE: non-NULL for DIME/MIME/MTOM XOP attachments only
	struct soap *soap;
};

/// Primitive built-in type "xs:anyURI".
typedef std::string xsd__anyURI;


/******************************************************************************\
 *                                                                            *
 * Forward Declarations                                                       *
 *                                                                            *
\******************************************************************************/


//  Forward declaration of class s3__MetadataEntry.
class s3__MetadataEntry;

//  Forward declaration of class s3__Status.
class s3__Status;

//  Forward declaration of class s3__Result.
class s3__Result;

//  Forward declaration of class s3__CreateBucketResult.
class s3__CreateBucketResult;

//  Forward declaration of class s3__BucketLoggingStatus.
class s3__BucketLoggingStatus;

//  Forward declaration of class s3__LoggingSettings.
class s3__LoggingSettings;

//  Forward declaration of class s3__Grantee.
class s3__Grantee;

//  Forward declaration of class s3__User.
class s3__User;

//  Forward declaration of class s3__AmazonCustomerByEmail.
class s3__AmazonCustomerByEmail;

//  Forward declaration of class s3__CanonicalUser.
class s3__CanonicalUser;

//  Forward declaration of class s3__Group.
class s3__Group;

//  Forward declaration of class s3__Grant.
class s3__Grant;

//  Forward declaration of class s3__AccessControlList.
class s3__AccessControlList;

//  Forward declaration of class s3__CreateBucketConfiguration.
class s3__CreateBucketConfiguration;

//  Forward declaration of class s3__LocationConstraint.
class s3__LocationConstraint;

//  Forward declaration of class s3__AccessControlPolicy.
class s3__AccessControlPolicy;

//  Forward declaration of class s3__GetObjectResult.
class s3__GetObjectResult;

//  Forward declaration of class s3__PutObjectResult.
class s3__PutObjectResult;

//  Forward declaration of class s3__ListEntry.
class s3__ListEntry;

//  Forward declaration of class s3__VersionEntry.
class s3__VersionEntry;

//  Forward declaration of class s3__DeleteMarkerEntry.
class s3__DeleteMarkerEntry;

//  Forward declaration of class s3__PrefixEntry.
class s3__PrefixEntry;

//  Forward declaration of class s3__ListBucketResult.
class s3__ListBucketResult;

//  Forward declaration of class s3__ListVersionsResult.
class s3__ListVersionsResult;

//  Forward declaration of class s3__ListAllMyBucketsEntry.
class s3__ListAllMyBucketsEntry;

//  Forward declaration of class s3__ListAllMyBucketsResult.
class s3__ListAllMyBucketsResult;

//  Forward declaration of class s3__ListAllMyBucketsList.
class s3__ListAllMyBucketsList;

//  Forward declaration of class s3__CopyObjectResult.
class s3__CopyObjectResult;

//  Forward declaration of class s3__RequestPaymentConfiguration.
class s3__RequestPaymentConfiguration;

//  Forward declaration of class s3__VersioningConfiguration.
class s3__VersioningConfiguration;

//  Forward declaration of class s3__NotificationConfiguration.
class s3__NotificationConfiguration;

//  Forward declaration of class s3__TopicConfiguration.
class s3__TopicConfiguration;

//  Forward declaration of class _s3__CreateBucket.
class _s3__CreateBucket;

//  Forward declaration of class _s3__CreateBucketResponse.
class _s3__CreateBucketResponse;

//  Forward declaration of class _s3__DeleteBucket.
class _s3__DeleteBucket;

//  Forward declaration of class _s3__DeleteBucketResponse.
class _s3__DeleteBucketResponse;

//  Forward declaration of class _s3__GetBucketLoggingStatus.
class _s3__GetBucketLoggingStatus;

//  Forward declaration of class _s3__GetBucketLoggingStatusResponse.
class _s3__GetBucketLoggingStatusResponse;

//  Forward declaration of class _s3__SetBucketLoggingStatus.
class _s3__SetBucketLoggingStatus;

//  Forward declaration of class _s3__SetBucketLoggingStatusResponse.
class _s3__SetBucketLoggingStatusResponse;

//  Forward declaration of class _s3__GetObjectAccessControlPolicy.
class _s3__GetObjectAccessControlPolicy;

//  Forward declaration of class _s3__GetObjectAccessControlPolicyResponse.
class _s3__GetObjectAccessControlPolicyResponse;

//  Forward declaration of class _s3__GetBucketAccessControlPolicy.
class _s3__GetBucketAccessControlPolicy;

//  Forward declaration of class _s3__GetBucketAccessControlPolicyResponse.
class _s3__GetBucketAccessControlPolicyResponse;

//  Forward declaration of class _s3__SetObjectAccessControlPolicy.
class _s3__SetObjectAccessControlPolicy;

//  Forward declaration of class _s3__SetObjectAccessControlPolicyResponse.
class _s3__SetObjectAccessControlPolicyResponse;

//  Forward declaration of class _s3__SetBucketAccessControlPolicy.
class _s3__SetBucketAccessControlPolicy;

//  Forward declaration of class _s3__SetBucketAccessControlPolicyResponse.
class _s3__SetBucketAccessControlPolicyResponse;

//  Forward declaration of class _s3__GetObject.
class _s3__GetObject;

//  Forward declaration of class _s3__GetObjectResponse.
class _s3__GetObjectResponse;

//  Forward declaration of class _s3__GetObjectExtended.
class _s3__GetObjectExtended;

//  Forward declaration of class _s3__GetObjectExtendedResponse.
class _s3__GetObjectExtendedResponse;

//  Forward declaration of class _s3__PutObject.
class _s3__PutObject;

//  Forward declaration of class _s3__PutObjectResponse.
class _s3__PutObjectResponse;

//  Forward declaration of class _s3__PutObjectInline.
class _s3__PutObjectInline;

//  Forward declaration of class _s3__PutObjectInlineResponse.
class _s3__PutObjectInlineResponse;

//  Forward declaration of class _s3__DeleteObject.
class _s3__DeleteObject;

//  Forward declaration of class _s3__DeleteObjectResponse.
class _s3__DeleteObjectResponse;

//  Forward declaration of class _s3__ListBucket.
class _s3__ListBucket;

//  Forward declaration of class _s3__ListBucketResponse.
class _s3__ListBucketResponse;

//  Forward declaration of class _s3__ListVersionsResponse.
class _s3__ListVersionsResponse;

//  Forward declaration of class _s3__ListAllMyBuckets.
class _s3__ListAllMyBuckets;

//  Forward declaration of class _s3__ListAllMyBucketsResponse.
class _s3__ListAllMyBucketsResponse;

//  Forward declaration of class _s3__PostResponse.
class _s3__PostResponse;

//  Forward declaration of class _s3__CopyObject.
class _s3__CopyObject;

//  Forward declaration of class _s3__CopyObjectResponse.
class _s3__CopyObjectResponse;


/******************************************************************************\
 *                                                                            *
 * Schema Types and Top-Level Elements and Attributes                         *
 *   http://s3.amazonaws.com/doc/2006-03-01/                                  *
 *                                                                            *
\******************************************************************************/

/// @brief "http://s3.amazonaws.com/doc/2006-03-01/":Permission is a simpleType restriction of XSD type xs:string.
///
/// @note The enum values are prefixed with "s3__Permission__" to prevent name clashes: use wsdl2h option -e to omit this prefix or use option -c++11 for scoped enumerations
enum s3__Permission
{
	s3__Permission__READ,	///< xs:string value="READ"
	s3__Permission__WRITE,	///< xs:string value="WRITE"
	s3__Permission__READ_USCOREACP,	///< xs:string value="READ_ACP"
	s3__Permission__WRITE_USCOREACP,	///< xs:string value="WRITE_ACP"
	s3__Permission__FULL_USCORECONTROL,	///< xs:string value="FULL_CONTROL"
};

/// @brief "http://s3.amazonaws.com/doc/2006-03-01/":StorageClass is a simpleType restriction of XSD type xs:string.
///
/// @note The enum values are prefixed with "s3__StorageClass__" to prevent name clashes: use wsdl2h option -e to omit this prefix or use option -c++11 for scoped enumerations
enum s3__StorageClass
{
	s3__StorageClass__STANDARD,	///< xs:string value="STANDARD"
	s3__StorageClass__REDUCED_USCOREREDUNDANCY,	///< xs:string value="REDUCED_REDUNDANCY"
	s3__StorageClass__GLACIER,	///< xs:string value="GLACIER"
	s3__StorageClass__UNKNOWN,	///< xs:string value="UNKNOWN"
};

/// @brief "http://s3.amazonaws.com/doc/2006-03-01/":MetadataDirective is a simpleType restriction of XSD type xs:string.
///
/// @note The enum values are prefixed with "s3__MetadataDirective__" to prevent name clashes: use wsdl2h option -e to omit this prefix or use option -c++11 for scoped enumerations
enum s3__MetadataDirective
{
	s3__MetadataDirective__COPY,	///< xs:string value="COPY"
	s3__MetadataDirective__REPLACE,	///< xs:string value="REPLACE"
};

/// @brief "http://s3.amazonaws.com/doc/2006-03-01/":Payer is a simpleType restriction of XSD type xs:string.
///
/// @note The enum values are prefixed with "s3__Payer__" to prevent name clashes: use wsdl2h option -e to omit this prefix or use option -c++11 for scoped enumerations
enum s3__Payer
{
	s3__Payer__BucketOwner,	///< xs:string value="BucketOwner"
	s3__Payer__Requester,	///< xs:string value="Requester"
};

/// @brief "http://s3.amazonaws.com/doc/2006-03-01/":MfaDeleteStatus is a simpleType restriction of XSD type xs:string.
///
/// @note The enum values are prefixed with "s3__MfaDeleteStatus__" to prevent name clashes: use wsdl2h option -e to omit this prefix or use option -c++11 for scoped enumerations
enum s3__MfaDeleteStatus
{
	s3__MfaDeleteStatus__Enabled,	///< xs:string value="Enabled"
	s3__MfaDeleteStatus__Disabled,	///< xs:string value="Disabled"
};

/// @brief "http://s3.amazonaws.com/doc/2006-03-01/":VersioningStatus is a simpleType restriction of XSD type xs:string.
///
/// @note The enum values are prefixed with "s3__VersioningStatus__" to prevent name clashes: use wsdl2h option -e to omit this prefix or use option -c++11 for scoped enumerations
enum s3__VersioningStatus
{
	s3__VersioningStatus__Enabled,	///< xs:string value="Enabled"
	s3__VersioningStatus__Suspended,	///< xs:string value="Suspended"
};


/******************************************************************************\
 *                                                                            *
 * Schema Complex Types and Top-Level Elements                                *
 *   http://s3.amazonaws.com/doc/2006-03-01/                                  *
 *                                                                            *
\******************************************************************************/

/// @brief "http://s3.amazonaws.com/doc/2006-03-01/":MetadataEntry is a complexType.
///
/// class s3__MetadataEntry operations:
/// - s3__MetadataEntry* soap_new_s3__MetadataEntry(soap*) allocate
/// - s3__MetadataEntry* soap_new_s3__MetadataEntry(soap*, int num) allocate array
/// - s3__MetadataEntry* soap_new_req_s3__MetadataEntry(soap*, ...) allocate, set required members
/// - s3__MetadataEntry* soap_new_set_s3__MetadataEntry(soap*, ...) allocate, set all public members
/// - s3__MetadataEntry::soap_default(soap*) reset members to default
/// - int soap_read_s3__MetadataEntry(soap*, s3__MetadataEntry*) deserialize from a stream
/// - int soap_write_s3__MetadataEntry(soap*, s3__MetadataEntry*) serialize to a stream
/// - s3__MetadataEntry* s3__MetadataEntry::soap_dup(soap*) returns deep copy of s3__MetadataEntry, copies the (cyclic) graph structure when a context is provided, or (cycle-pruned) tree structure with soap_set_mode(soap, SOAP_XML_TREE) (use soapcpp2 -Ec)
/// - s3__MetadataEntry::soap_del() deep deletes s3__MetadataEntry data members, use only after s3__MetadataEntry::soap_dup(NULL) (use soapcpp2 -Ed)
class s3__MetadataEntry
{ public:
/// Element "Name" of XSD type xs:string.
    std::string                          Name                           1;	///< Required element.
/// Element "Value" of XSD type xs:string.
    std::string                          Value                          1;	///< Required element.
/// A handle to the soap struct context that manages this instance when instantiated by a context or NULL otherwise (automatically set).
    struct soap                         *soap                          ;
};

/// @brief "http://s3.amazonaws.com/doc/2006-03-01/":Status is a complexType.
///
/// class s3__Status operations:
/// - s3__Status* soap_new_s3__Status(soap*) allocate
/// - s3__Status* soap_new_s3__Status(soap*, int num) allocate array
/// - s3__Status* soap_new_req_s3__Status(soap*, ...) allocate, set required members
/// - s3__Status* soap_new_set_s3__Status(soap*, ...) allocate, set all public members
/// - s3__Status::soap_default(soap*) reset members to default
/// - int soap_read_s3__Status(soap*, s3__Status*) deserialize from a stream
/// - int soap_write_s3__Status(soap*, s3__Status*) serialize to a stream
/// - s3__Status* s3__Status::soap_dup(soap*) returns deep copy of s3__Status, copies the (cyclic) graph structure when a context is provided, or (cycle-pruned) tree structure with soap_set_mode(soap, SOAP_XML_TREE) (use soapcpp2 -Ec)
/// - s3__Status::soap_del() deep deletes s3__Status data members, use only after s3__Status::soap_dup(NULL) (use soapcpp2 -Ed)
class s3__Status
{ public:
/// Element "Code" of XSD type xs:int.
    int                                  Code                           1;	///< Required element.
/// Element "Description" of XSD type xs:string.
    std::string                          Description                    1;	///< Required element.
/// A handle to the soap struct context that manages this instance when instantiated by a context or NULL otherwise (automatically set).
    struct soap                         *soap                          ;
};

/// @brief "http://s3.amazonaws.com/doc/2006-03-01/":Result is a complexType.
///
/// class s3__Result operations:
/// - s3__Result* soap_new_s3__Result(soap*) allocate
/// - s3__Result* soap_new_s3__Result(soap*, int num) allocate array
/// - s3__Result* soap_new_req_s3__Result(soap*, ...) allocate, set required members
/// - s3__Result* soap_new_set_s3__Result(soap*, ...) allocate, set all public members
/// - s3__Result::soap_default(soap*) reset members to default
/// - int soap_read_s3__Result(soap*, s3__Result*) deserialize from a stream
/// - int soap_write_s3__Result(soap*, s3__Result*) serialize to a stream
/// - s3__Result* s3__Result::soap_dup(soap*) returns deep copy of s3__Result, copies the (cyclic) graph structure when a context is provided, or (cycle-pruned) tree structure with soap_set_mode(soap, SOAP_XML_TREE) (use soapcpp2 -Ec)
/// - s3__Result::soap_del() deep deletes s3__Result data members, use only after s3__Result::soap_dup(NULL) (use soapcpp2 -Ed)
class s3__Result
{ public:
/// Element "Status" of XSD type "http://s3.amazonaws.com/doc/2006-03-01/":Status.
    s3__Status*                          Status                         1;	///< Required element.
/// A handle to the soap struct context that manages this instance when instantiated by a context or NULL otherwise (automatically set).
    struct soap                         *soap                          ;
};

/// @brief "http://s3.amazonaws.com/doc/2006-03-01/":CreateBucketResult is a complexType.
///
/// class s3__CreateBucketResult operations:
/// - s3__CreateBucketResult* soap_new_s3__CreateBucketResult(soap*) allocate
/// - s3__CreateBucketResult* soap_new_s3__CreateBucketResult(soap*, int num) allocate array
/// - s3__CreateBucketResult* soap_new_req_s3__CreateBucketResult(soap*, ...) allocate, set required members
/// - s3__CreateBucketResult* soap_new_set_s3__CreateBucketResult(soap*, ...) allocate, set all public members
/// - s3__CreateBucketResult::soap_default(soap*) reset members to default
/// - int soap_read_s3__CreateBucketResult(soap*, s3__CreateBucketResult*) deserialize from a stream
/// - int soap_write_s3__CreateBucketResult(soap*, s3__CreateBucketResult*) serialize to a stream
/// - s3__CreateBucketResult* s3__CreateBucketResult::soap_dup(soap*) returns deep copy of s3__CreateBucketResult, copies the (cyclic) graph structure when a context is provided, or (cycle-pruned) tree structure with soap_set_mode(soap, SOAP_XML_TREE) (use soapcpp2 -Ec)
/// - s3__CreateBucketResult::soap_del() deep deletes s3__CreateBucketResult data members, use only after s3__CreateBucketResult::soap_dup(NULL) (use soapcpp2 -Ed)
class s3__CreateBucketResult
{ public:
/// Element "BucketName" of XSD type xs:string.
    std::string                          BucketName                     1;	///< Required element.
/// A handle to the soap struct context that manages this instance when instantiated by a context or NULL otherwise (automatically set).
    struct soap                         *soap                          ;
};

/// @brief "http://s3.amazonaws.com/doc/2006-03-01/":BucketLoggingStatus is a complexType.
///
/// class s3__BucketLoggingStatus operations:
/// - s3__BucketLoggingStatus* soap_new_s3__BucketLoggingStatus(soap*) allocate
/// - s3__BucketLoggingStatus* soap_new_s3__BucketLoggingStatus(soap*, int num) allocate array
/// - s3__BucketLoggingStatus* soap_new_req_s3__BucketLoggingStatus(soap*, ...) allocate, set required members
/// - s3__BucketLoggingStatus* soap_new_set_s3__BucketLoggingStatus(soap*, ...) allocate, set all public members
/// - s3__BucketLoggingStatus::soap_default(soap*) reset members to default
/// - int soap_read_s3__BucketLoggingStatus(soap*, s3__BucketLoggingStatus*) deserialize from a stream
/// - int soap_write_s3__BucketLoggingStatus(soap*, s3__BucketLoggingStatus*) serialize to a stream
/// - s3__BucketLoggingStatus* s3__BucketLoggingStatus::soap_dup(soap*) returns deep copy of s3__BucketLoggingStatus, copies the (cyclic) graph structure when a context is provided, or (cycle-pruned) tree structure with soap_set_mode(soap, SOAP_XML_TREE) (use soapcpp2 -Ec)
/// - s3__BucketLoggingStatus::soap_del() deep deletes s3__BucketLoggingStatus data members, use only after s3__BucketLoggingStatus::soap_dup(NULL) (use soapcpp2 -Ed)
class s3__BucketLoggingStatus
{ public:
/// Element "LoggingEnabled" of XSD type "http://s3.amazonaws.com/doc/2006-03-01/":LoggingSettings.
    s3__LoggingSettings*                 LoggingEnabled                 0;	///< Optional element.
/// A handle to the soap struct context that manages this instance when instantiated by a context or NULL otherwise (automatically set).
    struct soap                         *soap                          ;
};

/// @brief "http://s3.amazonaws.com/doc/2006-03-01/":LoggingSettings is a complexType.
///
/// class s3__LoggingSettings operations:
/// - s3__LoggingSettings* soap_new_s3__LoggingSettings(soap*) allocate
/// - s3__LoggingSettings* soap_new_s3__LoggingSettings(soap*, int num) allocate array
/// - s3__LoggingSettings* soap_new_req_s3__LoggingSettings(soap*, ...) allocate, set required members
/// - s3__LoggingSettings* soap_new_set_s3__LoggingSettings(soap*, ...) allocate, set all public members
/// - s3__LoggingSettings::soap_default(soap*) reset members to default
/// - int soap_read_s3__LoggingSettings(soap*, s3__LoggingSettings*) deserialize from a stream
/// - int soap_write_s3__LoggingSettings(soap*, s3__LoggingSettings*) serialize to a stream
/// - s3__LoggingSettings* s3__LoggingSettings::soap_dup(soap*) returns deep copy of s3__LoggingSettings, copies the (cyclic) graph structure when a context is provided, or (cycle-pruned) tree structure with soap_set_mode(soap, SOAP_XML_TREE) (use soapcpp2 -Ec)
/// - s3__LoggingSettings::soap_del() deep deletes s3__LoggingSettings data members, use only after s3__LoggingSettings::soap_dup(NULL) (use soapcpp2 -Ed)
class s3__LoggingSettings
{ public:
/// Element "TargetBucket" of XSD type xs:string.
    std::string                          TargetBucket                   1;	///< Required element.
/// Element "TargetPrefix" of XSD type xs:string.
    std::string                          TargetPrefix                   1;	///< Required element.
/// Element "TargetGrants" of XSD type "http://s3.amazonaws.com/doc/2006-03-01/":AccessControlList.
    s3__AccessControlList*               TargetGrants                   0;	///< Optional element.
/// A handle to the soap struct context that manages this instance when instantiated by a context or NULL otherwise (automatically set).
    struct soap                         *soap                          ;
};

/// @brief "http://s3.amazonaws.com/doc/2006-03-01/":Grantee is an abstract complexType.
///
/// class s3__Grantee operations:
/// - s3__Grantee* soap_new_s3__Grantee(soap*) allocate
/// - s3__Grantee* soap_new_s3__Grantee(soap*, int num) allocate array
/// - s3__Grantee* soap_new_req_s3__Grantee(soap*, ...) allocate, set required members
/// - s3__Grantee* soap_new_set_s3__Grantee(soap*, ...) allocate, set all public members
/// - s3__Grantee::soap_default(soap*) reset members to default
/// - int soap_read_s3__Grantee(soap*, s3__Grantee*) deserialize from a stream
/// - int soap_write_s3__Grantee(soap*, s3__Grantee*) serialize to a stream
/// - s3__Grantee* s3__Grantee::soap_dup(soap*) returns deep copy of s3__Grantee, copies the (cyclic) graph structure when a context is provided, or (cycle-pruned) tree structure with soap_set_mode(soap, SOAP_XML_TREE) (use soapcpp2 -Ec)
/// - s3__Grantee::soap_del() deep deletes s3__Grantee data members, use only after s3__Grantee::soap_dup(NULL) (use soapcpp2 -Ed)
class s3__Grantee
{ public:
/// A handle to the soap struct context that manages this instance when instantiated by a context or NULL otherwise (automatically set).
    struct soap                         *soap                          ;
};

/// @brief "http://s3.amazonaws.com/doc/2006-03-01/":Grant is a complexType.
///
/// class s3__Grant operations:
/// - s3__Grant* soap_new_s3__Grant(soap*) allocate
/// - s3__Grant* soap_new_s3__Grant(soap*, int num) allocate array
/// - s3__Grant* soap_new_req_s3__Grant(soap*, ...) allocate, set required members
/// - s3__Grant* soap_new_set_s3__Grant(soap*, ...) allocate, set all public members
/// - s3__Grant::soap_default(soap*) reset members to default
/// - int soap_read_s3__Grant(soap*, s3__Grant*) deserialize from a stream
/// - int soap_write_s3__Grant(soap*, s3__Grant*) serialize to a stream
/// - s3__Grant* s3__Grant::soap_dup(soap*) returns deep copy of s3__Grant, copies the (cyclic) graph structure when a context is provided, or (cycle-pruned) tree structure with soap_set_mode(soap, SOAP_XML_TREE) (use soapcpp2 -Ec)
/// - s3__Grant::soap_del() deep deletes s3__Grant data members, use only after s3__Grant::soap_dup(NULL) (use soapcpp2 -Ed)
class s3__Grant
{ public:
/// Element "Grantee" of XSD type "http://s3.amazonaws.com/doc/2006-03-01/":Grantee.
    s3__Grantee*                         Grantee                        1;	///< Required element.
/// Element "Permission" of XSD type "http://s3.amazonaws.com/doc/2006-03-01/":Permission.
    enum s3__Permission                  Permission                     1;	///< Required element.
/// A handle to the soap struct context that manages this instance when instantiated by a context or NULL otherwise (automatically set).
    struct soap                         *soap                          ;
};

/// @brief "http://s3.amazonaws.com/doc/2006-03-01/":AccessControlList is a complexType.
///
/// class s3__AccessControlList operations:
/// - s3__AccessControlList* soap_new_s3__AccessControlList(soap*) allocate
/// - s3__AccessControlList* soap_new_s3__AccessControlList(soap*, int num) allocate array
/// - s3__AccessControlList* soap_new_req_s3__AccessControlList(soap*, ...) allocate, set required members
/// - s3__AccessControlList* soap_new_set_s3__AccessControlList(soap*, ...) allocate, set all public members
/// - s3__AccessControlList::soap_default(soap*) reset members to default
/// - int soap_read_s3__AccessControlList(soap*, s3__AccessControlList*) deserialize from a stream
/// - int soap_write_s3__AccessControlList(soap*, s3__AccessControlList*) serialize to a stream
/// - s3__AccessControlList* s3__AccessControlList::soap_dup(soap*) returns deep copy of s3__AccessControlList, copies the (cyclic) graph structure when a context is provided, or (cycle-pruned) tree structure with soap_set_mode(soap, SOAP_XML_TREE) (use soapcpp2 -Ec)
/// - s3__AccessControlList::soap_del() deep deletes s3__AccessControlList data members, use only after s3__AccessControlList::soap_dup(NULL) (use soapcpp2 -Ed)
class s3__AccessControlList
{ public:
/// Vector of s3__Grant* of length 0..100.
    std::vector<s3__Grant*             > Grant                          0:100;
/// A handle to the soap struct context that manages this instance when instantiated by a context or NULL otherwise (automatically set).
    struct soap                         *soap                          ;
};

/// @brief "http://s3.amazonaws.com/doc/2006-03-01/":CreateBucketConfiguration is a complexType.
///
/// class s3__CreateBucketConfiguration operations:
/// - s3__CreateBucketConfiguration* soap_new_s3__CreateBucketConfiguration(soap*) allocate
/// - s3__CreateBucketConfiguration* soap_new_s3__CreateBucketConfiguration(soap*, int num) allocate array
/// - s3__CreateBucketConfiguration* soap_new_req_s3__CreateBucketConfiguration(soap*, ...) allocate, set required members
/// - s3__CreateBucketConfiguration* soap_new_set_s3__CreateBucketConfiguration(soap*, ...) allocate, set all public members
/// - s3__CreateBucketConfiguration::soap_default(soap*) reset members to default
/// - int soap_read_s3__CreateBucketConfiguration(soap*, s3__CreateBucketConfiguration*) deserialize from a stream
/// - int soap_write_s3__CreateBucketConfiguration(soap*, s3__CreateBucketConfiguration*) serialize to a stream
/// - s3__CreateBucketConfiguration* s3__CreateBucketConfiguration::soap_dup(soap*) returns deep copy of s3__CreateBucketConfiguration, copies the (cyclic) graph structure when a context is provided, or (cycle-pruned) tree structure with soap_set_mode(soap, SOAP_XML_TREE) (use soapcpp2 -Ec)
/// - s3__CreateBucketConfiguration::soap_del() deep deletes s3__CreateBucketConfiguration data members, use only after s3__CreateBucketConfiguration::soap_dup(NULL) (use soapcpp2 -Ed)
class s3__CreateBucketConfiguration
{ public:
/// Element "LocationConstraint" of XSD type "http://s3.amazonaws.com/doc/2006-03-01/":LocationConstraint.
    s3__LocationConstraint*              LocationConstraint             1;	///< Required element.
/// A handle to the soap struct context that manages this instance when instantiated by a context or NULL otherwise (automatically set).
    struct soap                         *soap                          ;
};

/// @brief "http://s3.amazonaws.com/doc/2006-03-01/":AccessControlPolicy is a complexType.
///
/// class s3__AccessControlPolicy operations:
/// - s3__AccessControlPolicy* soap_new_s3__AccessControlPolicy(soap*) allocate
/// - s3__AccessControlPolicy* soap_new_s3__AccessControlPolicy(soap*, int num) allocate array
/// - s3__AccessControlPolicy* soap_new_req_s3__AccessControlPolicy(soap*, ...) allocate, set required members
/// - s3__AccessControlPolicy* soap_new_set_s3__AccessControlPolicy(soap*, ...) allocate, set all public members
/// - s3__AccessControlPolicy::soap_default(soap*) reset members to default
/// - int soap_read_s3__AccessControlPolicy(soap*, s3__AccessControlPolicy*) deserialize from a stream
/// - int soap_write_s3__AccessControlPolicy(soap*, s3__AccessControlPolicy*) serialize to a stream
/// - s3__AccessControlPolicy* s3__AccessControlPolicy::soap_dup(soap*) returns deep copy of s3__AccessControlPolicy, copies the (cyclic) graph structure when a context is provided, or (cycle-pruned) tree structure with soap_set_mode(soap, SOAP_XML_TREE) (use soapcpp2 -Ec)
/// - s3__AccessControlPolicy::soap_del() deep deletes s3__AccessControlPolicy data members, use only after s3__AccessControlPolicy::soap_dup(NULL) (use soapcpp2 -Ed)
class s3__AccessControlPolicy
{ public:
/// Element "Owner" of XSD type "http://s3.amazonaws.com/doc/2006-03-01/":CanonicalUser.
    s3__CanonicalUser*                   Owner                          1;	///< Required element.
/// Element "AccessControlList" of XSD type "http://s3.amazonaws.com/doc/2006-03-01/":AccessControlList.
    s3__AccessControlList*               AccessControlList              1;	///< Required element.
/// A handle to the soap struct context that manages this instance when instantiated by a context or NULL otherwise (automatically set).
    struct soap                         *soap                          ;
};

/// @brief "http://s3.amazonaws.com/doc/2006-03-01/":PutObjectResult is a complexType.
///
/// class s3__PutObjectResult operations:
/// - s3__PutObjectResult* soap_new_s3__PutObjectResult(soap*) allocate
/// - s3__PutObjectResult* soap_new_s3__PutObjectResult(soap*, int num) allocate array
/// - s3__PutObjectResult* soap_new_req_s3__PutObjectResult(soap*, ...) allocate, set required members
/// - s3__PutObjectResult* soap_new_set_s3__PutObjectResult(soap*, ...) allocate, set all public members
/// - s3__PutObjectResult::soap_default(soap*) reset members to default
/// - int soap_read_s3__PutObjectResult(soap*, s3__PutObjectResult*) deserialize from a stream
/// - int soap_write_s3__PutObjectResult(soap*, s3__PutObjectResult*) serialize to a stream
/// - s3__PutObjectResult* s3__PutObjectResult::soap_dup(soap*) returns deep copy of s3__PutObjectResult, copies the (cyclic) graph structure when a context is provided, or (cycle-pruned) tree structure with soap_set_mode(soap, SOAP_XML_TREE) (use soapcpp2 -Ec)
/// - s3__PutObjectResult::soap_del() deep deletes s3__PutObjectResult data members, use only after s3__PutObjectResult::soap_dup(NULL) (use soapcpp2 -Ed)
class s3__PutObjectResult
{ public:
/// Element "ETag" of XSD type xs:string.
    std::string                          ETag                           1;	///< Required element.
/// Element "LastModified" of XSD type xs:dateTime.
    time_t                               LastModified                   1;	///< Required element.
/// A handle to the soap struct context that manages this instance when instantiated by a context or NULL otherwise (automatically set).
    struct soap                         *soap                          ;
};

/// @brief "http://s3.amazonaws.com/doc/2006-03-01/":ListEntry is a complexType.
///
/// class s3__ListEntry operations:
/// - s3__ListEntry* soap_new_s3__ListEntry(soap*) allocate
/// - s3__ListEntry* soap_new_s3__ListEntry(soap*, int num) allocate array
/// - s3__ListEntry* soap_new_req_s3__ListEntry(soap*, ...) allocate, set required members
/// - s3__ListEntry* soap_new_set_s3__ListEntry(soap*, ...) allocate, set all public members
/// - s3__ListEntry::soap_default(soap*) reset members to default
/// - int soap_read_s3__ListEntry(soap*, s3__ListEntry*) deserialize from a stream
/// - int soap_write_s3__ListEntry(soap*, s3__ListEntry*) serialize to a stream
/// - s3__ListEntry* s3__ListEntry::soap_dup(soap*) returns deep copy of s3__ListEntry, copies the (cyclic) graph structure when a context is provided, or (cycle-pruned) tree structure with soap_set_mode(soap, SOAP_XML_TREE) (use soapcpp2 -Ec)
/// - s3__ListEntry::soap_del() deep deletes s3__ListEntry data members, use only after s3__ListEntry::soap_dup(NULL) (use soapcpp2 -Ed)
class s3__ListEntry
{ public:
/// Element "Key" of XSD type xs:string.
    std::string                          Key                            1;	///< Required element.
/// Element "LastModified" of XSD type xs:dateTime.
    time_t                               LastModified                   1;	///< Required element.
/// Element "ETag" of XSD type xs:string.
    std::string                          ETag                           1;	///< Required element.
/// Element "Size" of XSD type xs:long.
    LONG64                               Size                           1;	///< Required element.
/// Element "Owner" of XSD type "http://s3.amazonaws.com/doc/2006-03-01/":CanonicalUser.
    s3__CanonicalUser*                   Owner                          0;	///< Optional element.
/// Element "StorageClass" of XSD type "http://s3.amazonaws.com/doc/2006-03-01/":StorageClass.
    enum s3__StorageClass                StorageClass                   1;	///< Required element.
/// A handle to the soap struct context that manages this instance when instantiated by a context or NULL otherwise (automatically set).
    struct soap                         *soap                          ;
};

/// @brief "http://s3.amazonaws.com/doc/2006-03-01/":VersionEntry is a complexType.
///
/// class s3__VersionEntry operations:
/// - s3__VersionEntry* soap_new_s3__VersionEntry(soap*) allocate
/// - s3__VersionEntry* soap_new_s3__VersionEntry(soap*, int num) allocate array
/// - s3__VersionEntry* soap_new_req_s3__VersionEntry(soap*, ...) allocate, set required members
/// - s3__VersionEntry* soap_new_set_s3__VersionEntry(soap*, ...) allocate, set all public members
/// - s3__VersionEntry::soap_default(soap*) reset members to default
/// - int soap_read_s3__VersionEntry(soap*, s3__VersionEntry*) deserialize from a stream
/// - int soap_write_s3__VersionEntry(soap*, s3__VersionEntry*) serialize to a stream
/// - s3__VersionEntry* s3__VersionEntry::soap_dup(soap*) returns deep copy of s3__VersionEntry, copies the (cyclic) graph structure when a context is provided, or (cycle-pruned) tree structure with soap_set_mode(soap, SOAP_XML_TREE) (use soapcpp2 -Ec)
/// - s3__VersionEntry::soap_del() deep deletes s3__VersionEntry data members, use only after s3__VersionEntry::soap_dup(NULL) (use soapcpp2 -Ed)
class s3__VersionEntry
{ public:
/// Element "Key" of XSD type xs:string.
    std::string                          Key                            1;	///< Required element.
/// Element "VersionId" of XSD type xs:string.
    std::string                          VersionId                      1;	///< Required element.
/// Element "IsLatest" of XSD type xs:boolean.
    bool                                 IsLatest                       1;	///< Required element.
/// Element "LastModified" of XSD type xs:dateTime.
    time_t                               LastModified                   1;	///< Required element.
/// Element "ETag" of XSD type xs:string.
    std::string                          ETag                           1;	///< Required element.
/// Element "Size" of XSD type xs:long.
    LONG64                               Size                           1;	///< Required element.
/// Element "Owner" of XSD type "http://s3.amazonaws.com/doc/2006-03-01/":CanonicalUser.
    s3__CanonicalUser*                   Owner                          0;	///< Optional element.
/// Element "StorageClass" of XSD type "http://s3.amazonaws.com/doc/2006-03-01/":StorageClass.
    enum s3__StorageClass                StorageClass                   1;	///< Required element.
/// A handle to the soap struct context that manages this instance when instantiated by a context or NULL otherwise (automatically set).
    struct soap                         *soap                          ;
};

/// @brief "http://s3.amazonaws.com/doc/2006-03-01/":DeleteMarkerEntry is a complexType.
///
/// class s3__DeleteMarkerEntry operations:
/// - s3__DeleteMarkerEntry* soap_new_s3__DeleteMarkerEntry(soap*) allocate
/// - s3__DeleteMarkerEntry* soap_new_s3__DeleteMarkerEntry(soap*, int num) allocate array
/// - s3__DeleteMarkerEntry* soap_new_req_s3__DeleteMarkerEntry(soap*, ...) allocate, set required members
/// - s3__DeleteMarkerEntry* soap_new_set_s3__DeleteMarkerEntry(soap*, ...) allocate, set all public members
/// - s3__DeleteMarkerEntry::soap_default(soap*) reset members to default
/// - int soap_read_s3__DeleteMarkerEntry(soap*, s3__DeleteMarkerEntry*) deserialize from a stream
/// - int soap_write_s3__DeleteMarkerEntry(soap*, s3__DeleteMarkerEntry*) serialize to a stream
/// - s3__DeleteMarkerEntry* s3__DeleteMarkerEntry::soap_dup(soap*) returns deep copy of s3__DeleteMarkerEntry, copies the (cyclic) graph structure when a context is provided, or (cycle-pruned) tree structure with soap_set_mode(soap, SOAP_XML_TREE) (use soapcpp2 -Ec)
/// - s3__DeleteMarkerEntry::soap_del() deep deletes s3__DeleteMarkerEntry data members, use only after s3__DeleteMarkerEntry::soap_dup(NULL) (use soapcpp2 -Ed)
class s3__DeleteMarkerEntry
{ public:
/// Element "Key" of XSD type xs:string.
    std::string                          Key                            1;	///< Required element.
/// Element "VersionId" of XSD type xs:string.
    std::string                          VersionId                      1;	///< Required element.
/// Element "IsLatest" of XSD type xs:boolean.
    bool                                 IsLatest                       1;	///< Required element.
/// Element "LastModified" of XSD type xs:dateTime.
    time_t                               LastModified                   1;	///< Required element.
/// Element "Owner" of XSD type "http://s3.amazonaws.com/doc/2006-03-01/":CanonicalUser.
    s3__CanonicalUser*                   Owner                          0;	///< Optional element.
/// A handle to the soap struct context that manages this instance when instantiated by a context or NULL otherwise (automatically set).
    struct soap                         *soap                          ;
};

/// @brief "http://s3.amazonaws.com/doc/2006-03-01/":PrefixEntry is a complexType.
///
/// class s3__PrefixEntry operations:
/// - s3__PrefixEntry* soap_new_s3__PrefixEntry(soap*) allocate
/// - s3__PrefixEntry* soap_new_s3__PrefixEntry(soap*, int num) allocate array
/// - s3__PrefixEntry* soap_new_req_s3__PrefixEntry(soap*, ...) allocate, set required members
/// - s3__PrefixEntry* soap_new_set_s3__PrefixEntry(soap*, ...) allocate, set all public members
/// - s3__PrefixEntry::soap_default(soap*) reset members to default
/// - int soap_read_s3__PrefixEntry(soap*, s3__PrefixEntry*) deserialize from a stream
/// - int soap_write_s3__PrefixEntry(soap*, s3__PrefixEntry*) serialize to a stream
/// - s3__PrefixEntry* s3__PrefixEntry::soap_dup(soap*) returns deep copy of s3__PrefixEntry, copies the (cyclic) graph structure when a context is provided, or (cycle-pruned) tree structure with soap_set_mode(soap, SOAP_XML_TREE) (use soapcpp2 -Ec)
/// - s3__PrefixEntry::soap_del() deep deletes s3__PrefixEntry data members, use only after s3__PrefixEntry::soap_dup(NULL) (use soapcpp2 -Ed)
class s3__PrefixEntry
{ public:
/// Element "Prefix" of XSD type xs:string.
    std::string                          Prefix                         1;	///< Required element.
/// A handle to the soap struct context that manages this instance when instantiated by a context or NULL otherwise (automatically set).
    struct soap                         *soap                          ;
};

/// @brief "http://s3.amazonaws.com/doc/2006-03-01/":ListBucketResult is a complexType.
///
/// class s3__ListBucketResult operations:
/// - s3__ListBucketResult* soap_new_s3__ListBucketResult(soap*) allocate
/// - s3__ListBucketResult* soap_new_s3__ListBucketResult(soap*, int num) allocate array
/// - s3__ListBucketResult* soap_new_req_s3__ListBucketResult(soap*, ...) allocate, set required members
/// - s3__ListBucketResult* soap_new_set_s3__ListBucketResult(soap*, ...) allocate, set all public members
/// - s3__ListBucketResult::soap_default(soap*) reset members to default
/// - int soap_read_s3__ListBucketResult(soap*, s3__ListBucketResult*) deserialize from a stream
/// - int soap_write_s3__ListBucketResult(soap*, s3__ListBucketResult*) serialize to a stream
/// - s3__ListBucketResult* s3__ListBucketResult::soap_dup(soap*) returns deep copy of s3__ListBucketResult, copies the (cyclic) graph structure when a context is provided, or (cycle-pruned) tree structure with soap_set_mode(soap, SOAP_XML_TREE) (use soapcpp2 -Ec)
/// - s3__ListBucketResult::soap_del() deep deletes s3__ListBucketResult data members, use only after s3__ListBucketResult::soap_dup(NULL) (use soapcpp2 -Ed)
class s3__ListBucketResult
{ public:
/// Vector of s3__MetadataEntry* of length 0..unbounded.
    std::vector<s3__MetadataEntry*     > Metadata                       0;
/// Element "Name" of XSD type xs:string.
    std::string                          Name                           1;	///< Required element.
/// Element "Prefix" of XSD type xs:string.
    std::string                          Prefix                         1;	///< Required element.
/// Element "Marker" of XSD type xs:string.
    std::string                          Marker                         1;	///< Required element.
/// Element "NextMarker" of XSD type xs:string.
    std::string*                         NextMarker                     0;	///< Optional element.
/// Element "MaxKeys" of XSD type xs:int.
    int                                  MaxKeys                        1;	///< Required element.
/// Element "Delimiter" of XSD type xs:string.
    std::string*                         Delimiter                      0;	///< Optional element.
/// Element "IsTruncated" of XSD type xs:boolean.
    bool                                 IsTruncated                    1;	///< Required element.
/// Vector of s3__ListEntry* of length 0..unbounded.
    std::vector<s3__ListEntry*         > Contents                       0;
/// Vector of s3__PrefixEntry* of length 0..unbounded.
    std::vector<s3__PrefixEntry*       > CommonPrefixes                 0;
/// A handle to the soap struct context that manages this instance when instantiated by a context or NULL otherwise (automatically set).
    struct soap                         *soap                          ;
};

/// @brief "http://s3.amazonaws.com/doc/2006-03-01/":ListVersionsResult is a complexType.
///
/// class s3__ListVersionsResult operations:
/// - s3__ListVersionsResult* soap_new_s3__ListVersionsResult(soap*) allocate
/// - s3__ListVersionsResult* soap_new_s3__ListVersionsResult(soap*, int num) allocate array
/// - s3__ListVersionsResult* soap_new_req_s3__ListVersionsResult(soap*, ...) allocate, set required members
/// - s3__ListVersionsResult* soap_new_set_s3__ListVersionsResult(soap*, ...) allocate, set all public members
/// - s3__ListVersionsResult::soap_default(soap*) reset members to default
/// - int soap_read_s3__ListVersionsResult(soap*, s3__ListVersionsResult*) deserialize from a stream
/// - int soap_write_s3__ListVersionsResult(soap*, s3__ListVersionsResult*) serialize to a stream
/// - s3__ListVersionsResult* s3__ListVersionsResult::soap_dup(soap*) returns deep copy of s3__ListVersionsResult, copies the (cyclic) graph structure when a context is provided, or (cycle-pruned) tree structure with soap_set_mode(soap, SOAP_XML_TREE) (use soapcpp2 -Ec)
/// - s3__ListVersionsResult::soap_del() deep deletes s3__ListVersionsResult data members, use only after s3__ListVersionsResult::soap_dup(NULL) (use soapcpp2 -Ed)
class s3__ListVersionsResult
{ public:
/// Vector of s3__MetadataEntry* of length 0..unbounded.
    std::vector<s3__MetadataEntry*     > Metadata                       0;
/// Element "Name" of XSD type xs:string.
    std::string                          Name                           1;	///< Required element.
/// Element "Prefix" of XSD type xs:string.
    std::string                          Prefix                         1;	///< Required element.
/// Element "KeyMarker" of XSD type xs:string.
    std::string                          KeyMarker                      1;	///< Required element.
/// Element "VersionIdMarker" of XSD type xs:string.
    std::string                          VersionIdMarker                1;	///< Required element.
/// Element "NextKeyMarker" of XSD type xs:string.
    std::string*                         NextKeyMarker                  0;	///< Optional element.
/// Element "NextVersionIdMarker" of XSD type xs:string.
    std::string*                         NextVersionIdMarker            0;	///< Optional element.
/// Element "MaxKeys" of XSD type xs:int.
    int                                  MaxKeys                        1;	///< Required element.
/// Element "Delimiter" of XSD type xs:string.
    std::string*                         Delimiter                      0;	///< Optional element.
/// Element "IsTruncated" of XSD type xs:boolean.
    bool                                 IsTruncated                    1;	///< Required element.
//  BEGIN CHOICE <xs:choice minOccurs="0" maxOccurs="unbounded">
   $int                                  __size_ListVersionsResult      0;
    class __s3__union_ListVersionsResult
    {
   $int                                  __union_ListVersionsResult     0;	///< Union _s3__union_ListVersionsResult selector: set to SOAP_UNION__s3__union_ListVersionsResult_<fieldname> or 0 to omit
    union _s3__union_ListVersionsResult
    {
/// Element "Version" of XSD type "http://s3.amazonaws.com/doc/2006-03-01/":VersionEntry.
    s3__VersionEntry*                    Version                        1;	///< Required element.
/// Element "DeleteMarker" of XSD type "http://s3.amazonaws.com/doc/2006-03-01/":DeleteMarkerEntry.
    s3__DeleteMarkerEntry*               DeleteMarker                   1;	///< Required element.
    }                                    union_ListVersionsResult      ;
    }                                   *__union_ListVersionsResult    ;
//  END OF CHOICE
/// Vector of s3__PrefixEntry* of length 0..unbounded.
    std::vector<s3__PrefixEntry*       > CommonPrefixes                 0;
/// A handle to the soap struct context that manages this instance when instantiated by a context or NULL otherwise (automatically set).
    struct soap                         *soap                          ;
};

/// @brief "http://s3.amazonaws.com/doc/2006-03-01/":ListAllMyBucketsEntry is a complexType.
///
/// class s3__ListAllMyBucketsEntry operations:
/// - s3__ListAllMyBucketsEntry* soap_new_s3__ListAllMyBucketsEntry(soap*) allocate
/// - s3__ListAllMyBucketsEntry* soap_new_s3__ListAllMyBucketsEntry(soap*, int num) allocate array
/// - s3__ListAllMyBucketsEntry* soap_new_req_s3__ListAllMyBucketsEntry(soap*, ...) allocate, set required members
/// - s3__ListAllMyBucketsEntry* soap_new_set_s3__ListAllMyBucketsEntry(soap*, ...) allocate, set all public members
/// - s3__ListAllMyBucketsEntry::soap_default(soap*) reset members to default
/// - int soap_read_s3__ListAllMyBucketsEntry(soap*, s3__ListAllMyBucketsEntry*) deserialize from a stream
/// - int soap_write_s3__ListAllMyBucketsEntry(soap*, s3__ListAllMyBucketsEntry*) serialize to a stream
/// - s3__ListAllMyBucketsEntry* s3__ListAllMyBucketsEntry::soap_dup(soap*) returns deep copy of s3__ListAllMyBucketsEntry, copies the (cyclic) graph structure when a context is provided, or (cycle-pruned) tree structure with soap_set_mode(soap, SOAP_XML_TREE) (use soapcpp2 -Ec)
/// - s3__ListAllMyBucketsEntry::soap_del() deep deletes s3__ListAllMyBucketsEntry data members, use only after s3__ListAllMyBucketsEntry::soap_dup(NULL) (use soapcpp2 -Ed)
class s3__ListAllMyBucketsEntry
{ public:
/// Element "Name" of XSD type xs:string.
    std::string                          Name                           1;	///< Required element.
/// Element "CreationDate" of XSD type xs:dateTime.
    time_t                               CreationDate                   1;	///< Required element.
/// A handle to the soap struct context that manages this instance when instantiated by a context or NULL otherwise (automatically set).
    struct soap                         *soap                          ;
};

/// @brief "http://s3.amazonaws.com/doc/2006-03-01/":ListAllMyBucketsResult is a complexType.
///
/// class s3__ListAllMyBucketsResult operations:
/// - s3__ListAllMyBucketsResult* soap_new_s3__ListAllMyBucketsResult(soap*) allocate
/// - s3__ListAllMyBucketsResult* soap_new_s3__ListAllMyBucketsResult(soap*, int num) allocate array
/// - s3__ListAllMyBucketsResult* soap_new_req_s3__ListAllMyBucketsResult(soap*, ...) allocate, set required members
/// - s3__ListAllMyBucketsResult* soap_new_set_s3__ListAllMyBucketsResult(soap*, ...) allocate, set all public members
/// - s3__ListAllMyBucketsResult::soap_default(soap*) reset members to default
/// - int soap_read_s3__ListAllMyBucketsResult(soap*, s3__ListAllMyBucketsResult*) deserialize from a stream
/// - int soap_write_s3__ListAllMyBucketsResult(soap*, s3__ListAllMyBucketsResult*) serialize to a stream
/// - s3__ListAllMyBucketsResult* s3__ListAllMyBucketsResult::soap_dup(soap*) returns deep copy of s3__ListAllMyBucketsResult, copies the (cyclic) graph structure when a context is provided, or (cycle-pruned) tree structure with soap_set_mode(soap, SOAP_XML_TREE) (use soapcpp2 -Ec)
/// - s3__ListAllMyBucketsResult::soap_del() deep deletes s3__ListAllMyBucketsResult data members, use only after s3__ListAllMyBucketsResult::soap_dup(NULL) (use soapcpp2 -Ed)
class s3__ListAllMyBucketsResult
{ public:
/// Element "Owner" of XSD type "http://s3.amazonaws.com/doc/2006-03-01/":CanonicalUser.
    s3__CanonicalUser*                   Owner                          1;	///< Required element.
/// Element "Buckets" of XSD type "http://s3.amazonaws.com/doc/2006-03-01/":ListAllMyBucketsList.
    s3__ListAllMyBucketsList*            Buckets                        1;	///< Required element.
/// A handle to the soap struct context that manages this instance when instantiated by a context or NULL otherwise (automatically set).
    struct soap                         *soap                          ;
};

/// @brief "http://s3.amazonaws.com/doc/2006-03-01/":ListAllMyBucketsList is a complexType.
///
/// class s3__ListAllMyBucketsList operations:
/// - s3__ListAllMyBucketsList* soap_new_s3__ListAllMyBucketsList(soap*) allocate
/// - s3__ListAllMyBucketsList* soap_new_s3__ListAllMyBucketsList(soap*, int num) allocate array
/// - s3__ListAllMyBucketsList* soap_new_req_s3__ListAllMyBucketsList(soap*, ...) allocate, set required members
/// - s3__ListAllMyBucketsList* soap_new_set_s3__ListAllMyBucketsList(soap*, ...) allocate, set all public members
/// - s3__ListAllMyBucketsList::soap_default(soap*) reset members to default
/// - int soap_read_s3__ListAllMyBucketsList(soap*, s3__ListAllMyBucketsList*) deserialize from a stream
/// - int soap_write_s3__ListAllMyBucketsList(soap*, s3__ListAllMyBucketsList*) serialize to a stream
/// - s3__ListAllMyBucketsList* s3__ListAllMyBucketsList::soap_dup(soap*) returns deep copy of s3__ListAllMyBucketsList, copies the (cyclic) graph structure when a context is provided, or (cycle-pruned) tree structure with soap_set_mode(soap, SOAP_XML_TREE) (use soapcpp2 -Ec)
/// - s3__ListAllMyBucketsList::soap_del() deep deletes s3__ListAllMyBucketsList data members, use only after s3__ListAllMyBucketsList::soap_dup(NULL) (use soapcpp2 -Ed)
class s3__ListAllMyBucketsList
{ public:
/// Vector of s3__ListAllMyBucketsEntry* of length 0..unbounded.
    std::vector<s3__ListAllMyBucketsEntry*> Bucket                         0;
/// A handle to the soap struct context that manages this instance when instantiated by a context or NULL otherwise (automatically set).
    struct soap                         *soap                          ;
};

/// @brief "http://s3.amazonaws.com/doc/2006-03-01/":CopyObjectResult is a complexType.
///
/// class s3__CopyObjectResult operations:
/// - s3__CopyObjectResult* soap_new_s3__CopyObjectResult(soap*) allocate
/// - s3__CopyObjectResult* soap_new_s3__CopyObjectResult(soap*, int num) allocate array
/// - s3__CopyObjectResult* soap_new_req_s3__CopyObjectResult(soap*, ...) allocate, set required members
/// - s3__CopyObjectResult* soap_new_set_s3__CopyObjectResult(soap*, ...) allocate, set all public members
/// - s3__CopyObjectResult::soap_default(soap*) reset members to default
/// - int soap_read_s3__CopyObjectResult(soap*, s3__CopyObjectResult*) deserialize from a stream
/// - int soap_write_s3__CopyObjectResult(soap*, s3__CopyObjectResult*) serialize to a stream
/// - s3__CopyObjectResult* s3__CopyObjectResult::soap_dup(soap*) returns deep copy of s3__CopyObjectResult, copies the (cyclic) graph structure when a context is provided, or (cycle-pruned) tree structure with soap_set_mode(soap, SOAP_XML_TREE) (use soapcpp2 -Ec)
/// - s3__CopyObjectResult::soap_del() deep deletes s3__CopyObjectResult data members, use only after s3__CopyObjectResult::soap_dup(NULL) (use soapcpp2 -Ed)
class s3__CopyObjectResult
{ public:
/// Element "LastModified" of XSD type xs:dateTime.
    time_t                               LastModified                   1;	///< Required element.
/// Element "ETag" of XSD type xs:string.
    std::string                          ETag                           1;	///< Required element.
/// A handle to the soap struct context that manages this instance when instantiated by a context or NULL otherwise (automatically set).
    struct soap                         *soap                          ;
};

/// @brief "http://s3.amazonaws.com/doc/2006-03-01/":RequestPaymentConfiguration is a complexType.
///
/// class s3__RequestPaymentConfiguration operations:
/// - s3__RequestPaymentConfiguration* soap_new_s3__RequestPaymentConfiguration(soap*) allocate
/// - s3__RequestPaymentConfiguration* soap_new_s3__RequestPaymentConfiguration(soap*, int num) allocate array
/// - s3__RequestPaymentConfiguration* soap_new_req_s3__RequestPaymentConfiguration(soap*, ...) allocate, set required members
/// - s3__RequestPaymentConfiguration* soap_new_set_s3__RequestPaymentConfiguration(soap*, ...) allocate, set all public members
/// - s3__RequestPaymentConfiguration::soap_default(soap*) reset members to default
/// - int soap_read_s3__RequestPaymentConfiguration(soap*, s3__RequestPaymentConfiguration*) deserialize from a stream
/// - int soap_write_s3__RequestPaymentConfiguration(soap*, s3__RequestPaymentConfiguration*) serialize to a stream
/// - s3__RequestPaymentConfiguration* s3__RequestPaymentConfiguration::soap_dup(soap*) returns deep copy of s3__RequestPaymentConfiguration, copies the (cyclic) graph structure when a context is provided, or (cycle-pruned) tree structure with soap_set_mode(soap, SOAP_XML_TREE) (use soapcpp2 -Ec)
/// - s3__RequestPaymentConfiguration::soap_del() deep deletes s3__RequestPaymentConfiguration data members, use only after s3__RequestPaymentConfiguration::soap_dup(NULL) (use soapcpp2 -Ed)
class s3__RequestPaymentConfiguration
{ public:
/// Element "Payer" of XSD type "http://s3.amazonaws.com/doc/2006-03-01/":Payer.
    enum s3__Payer                       Payer                          1;	///< Required element.
/// A handle to the soap struct context that manages this instance when instantiated by a context or NULL otherwise (automatically set).
    struct soap                         *soap                          ;
};

/// @brief "http://s3.amazonaws.com/doc/2006-03-01/":VersioningConfiguration is a complexType.
///
/// class s3__VersioningConfiguration operations:
/// - s3__VersioningConfiguration* soap_new_s3__VersioningConfiguration(soap*) allocate
/// - s3__VersioningConfiguration* soap_new_s3__VersioningConfiguration(soap*, int num) allocate array
/// - s3__VersioningConfiguration* soap_new_req_s3__VersioningConfiguration(soap*, ...) allocate, set required members
/// - s3__VersioningConfiguration* soap_new_set_s3__VersioningConfiguration(soap*, ...) allocate, set all public members
/// - s3__VersioningConfiguration::soap_default(soap*) reset members to default
/// - int soap_read_s3__VersioningConfiguration(soap*, s3__VersioningConfiguration*) deserialize from a stream
/// - int soap_write_s3__VersioningConfiguration(soap*, s3__VersioningConfiguration*) serialize to a stream
/// - s3__VersioningConfiguration* s3__VersioningConfiguration::soap_dup(soap*) returns deep copy of s3__VersioningConfiguration, copies the (cyclic) graph structure when a context is provided, or (cycle-pruned) tree structure with soap_set_mode(soap, SOAP_XML_TREE) (use soapcpp2 -Ec)
/// - s3__VersioningConfiguration::soap_del() deep deletes s3__VersioningConfiguration data members, use only after s3__VersioningConfiguration::soap_dup(NULL) (use soapcpp2 -Ed)
class s3__VersioningConfiguration
{ public:
/// Element "Status" of XSD type "http://s3.amazonaws.com/doc/2006-03-01/":VersioningStatus.
    enum s3__VersioningStatus*           Status                         0;	///< Optional element.
/// Element "MfaDelete" of XSD type "http://s3.amazonaws.com/doc/2006-03-01/":MfaDeleteStatus.
    enum s3__MfaDeleteStatus*            MfaDelete                      0;	///< Optional element.
/// A handle to the soap struct context that manages this instance when instantiated by a context or NULL otherwise (automatically set).
    struct soap                         *soap                          ;
};

/// @brief "http://s3.amazonaws.com/doc/2006-03-01/":NotificationConfiguration is a complexType.
///
/// class s3__NotificationConfiguration operations:
/// - s3__NotificationConfiguration* soap_new_s3__NotificationConfiguration(soap*) allocate
/// - s3__NotificationConfiguration* soap_new_s3__NotificationConfiguration(soap*, int num) allocate array
/// - s3__NotificationConfiguration* soap_new_req_s3__NotificationConfiguration(soap*, ...) allocate, set required members
/// - s3__NotificationConfiguration* soap_new_set_s3__NotificationConfiguration(soap*, ...) allocate, set all public members
/// - s3__NotificationConfiguration::soap_default(soap*) reset members to default
/// - int soap_read_s3__NotificationConfiguration(soap*, s3__NotificationConfiguration*) deserialize from a stream
/// - int soap_write_s3__NotificationConfiguration(soap*, s3__NotificationConfiguration*) serialize to a stream
/// - s3__NotificationConfiguration* s3__NotificationConfiguration::soap_dup(soap*) returns deep copy of s3__NotificationConfiguration, copies the (cyclic) graph structure when a context is provided, or (cycle-pruned) tree structure with soap_set_mode(soap, SOAP_XML_TREE) (use soapcpp2 -Ec)
/// - s3__NotificationConfiguration::soap_del() deep deletes s3__NotificationConfiguration data members, use only after s3__NotificationConfiguration::soap_dup(NULL) (use soapcpp2 -Ed)
class s3__NotificationConfiguration
{ public:
/// Vector of s3__TopicConfiguration* of length 0..unbounded.
    std::vector<s3__TopicConfiguration*> TopicConfiguration             0;
/// A handle to the soap struct context that manages this instance when instantiated by a context or NULL otherwise (automatically set).
    struct soap                         *soap                          ;
};

/// @brief "http://s3.amazonaws.com/doc/2006-03-01/":TopicConfiguration is a complexType.
///
/// class s3__TopicConfiguration operations:
/// - s3__TopicConfiguration* soap_new_s3__TopicConfiguration(soap*) allocate
/// - s3__TopicConfiguration* soap_new_s3__TopicConfiguration(soap*, int num) allocate array
/// - s3__TopicConfiguration* soap_new_req_s3__TopicConfiguration(soap*, ...) allocate, set required members
/// - s3__TopicConfiguration* soap_new_set_s3__TopicConfiguration(soap*, ...) allocate, set all public members
/// - s3__TopicConfiguration::soap_default(soap*) reset members to default
/// - int soap_read_s3__TopicConfiguration(soap*, s3__TopicConfiguration*) deserialize from a stream
/// - int soap_write_s3__TopicConfiguration(soap*, s3__TopicConfiguration*) serialize to a stream
/// - s3__TopicConfiguration* s3__TopicConfiguration::soap_dup(soap*) returns deep copy of s3__TopicConfiguration, copies the (cyclic) graph structure when a context is provided, or (cycle-pruned) tree structure with soap_set_mode(soap, SOAP_XML_TREE) (use soapcpp2 -Ec)
/// - s3__TopicConfiguration::soap_del() deep deletes s3__TopicConfiguration data members, use only after s3__TopicConfiguration::soap_dup(NULL) (use soapcpp2 -Ed)
class s3__TopicConfiguration
{ public:
/// Element "Topic" of XSD type xs:string.
    std::string                          Topic                          1;	///< Required element.
/// Vector of std::string of length 1..unbounded.
    std::vector<std::string            > Event                          1;
/// A handle to the soap struct context that manages this instance when instantiated by a context or NULL otherwise (automatically set).
    struct soap                         *soap                          ;
};

/// @brief Top-level root element "http://s3.amazonaws.com/doc/2006-03-01/":CreateBucket
/// @brief "http://s3.amazonaws.com/doc/2006-03-01/":CreateBucket is a complexType.
///
/// class _s3__CreateBucket operations:
/// - _s3__CreateBucket* soap_new__s3__CreateBucket(soap*) allocate
/// - _s3__CreateBucket* soap_new__s3__CreateBucket(soap*, int num) allocate array
/// - _s3__CreateBucket* soap_new_req__s3__CreateBucket(soap*, ...) allocate, set required members
/// - _s3__CreateBucket* soap_new_set__s3__CreateBucket(soap*, ...) allocate, set all public members
/// - _s3__CreateBucket::soap_default(soap*) reset members to default
/// - int soap_read__s3__CreateBucket(soap*, _s3__CreateBucket*) deserialize from a stream
/// - int soap_write__s3__CreateBucket(soap*, _s3__CreateBucket*) serialize to a stream
/// - _s3__CreateBucket* _s3__CreateBucket::soap_dup(soap*) returns deep copy of _s3__CreateBucket, copies the (cyclic) graph structure when a context is provided, or (cycle-pruned) tree structure with soap_set_mode(soap, SOAP_XML_TREE) (use soapcpp2 -Ec)
/// - _s3__CreateBucket::soap_del() deep deletes _s3__CreateBucket data members, use only after _s3__CreateBucket::soap_dup(NULL) (use soapcpp2 -Ed)
class _s3__CreateBucket
{ public:
/// Element "Bucket" of XSD type xs:string.
    std::string                          Bucket                         1;	///< Required element.
/// Element "AccessControlList" of XSD type "http://s3.amazonaws.com/doc/2006-03-01/":AccessControlList.
    s3__AccessControlList*               AccessControlList              0;	///< Optional element.
/// Element "AWSAccessKeyId" of XSD type xs:string.
    std::string*                         AWSAccessKeyId                 0;	///< Optional element.
/// Element "Timestamp" of XSD type xs:dateTime.
    time_t*                              Timestamp                      0;	///< Optional element.
/// Element "Signature" of XSD type xs:string.
    std::string*                         Signature                      0;	///< Optional element.
/// A handle to the soap struct context that manages this instance when instantiated by a context or NULL otherwise (automatically set).
    struct soap                         *soap                          ;
};

/// @brief Top-level root element "http://s3.amazonaws.com/doc/2006-03-01/":CreateBucketResponse
/// @brief "http://s3.amazonaws.com/doc/2006-03-01/":CreateBucketResponse is a complexType.
///
/// class _s3__CreateBucketResponse operations:
/// - _s3__CreateBucketResponse* soap_new__s3__CreateBucketResponse(soap*) allocate
/// - _s3__CreateBucketResponse* soap_new__s3__CreateBucketResponse(soap*, int num) allocate array
/// - _s3__CreateBucketResponse* soap_new_req__s3__CreateBucketResponse(soap*, ...) allocate, set required members
/// - _s3__CreateBucketResponse* soap_new_set__s3__CreateBucketResponse(soap*, ...) allocate, set all public members
/// - _s3__CreateBucketResponse::soap_default(soap*) reset members to default
/// - int soap_read__s3__CreateBucketResponse(soap*, _s3__CreateBucketResponse*) deserialize from a stream
/// - int soap_write__s3__CreateBucketResponse(soap*, _s3__CreateBucketResponse*) serialize to a stream
/// - _s3__CreateBucketResponse* _s3__CreateBucketResponse::soap_dup(soap*) returns deep copy of _s3__CreateBucketResponse, copies the (cyclic) graph structure when a context is provided, or (cycle-pruned) tree structure with soap_set_mode(soap, SOAP_XML_TREE) (use soapcpp2 -Ec)
/// - _s3__CreateBucketResponse::soap_del() deep deletes _s3__CreateBucketResponse data members, use only after _s3__CreateBucketResponse::soap_dup(NULL) (use soapcpp2 -Ed)
class _s3__CreateBucketResponse
{ public:
/// Element "CreateBucketReturn" of XSD type "http://s3.amazonaws.com/doc/2006-03-01/":CreateBucketResult.
    s3__CreateBucketResult*              CreateBucketReturn             1;	///< Required element.
/// A handle to the soap struct context that manages this instance when instantiated by a context or NULL otherwise (automatically set).
    struct soap                         *soap                          ;
};

/// @brief Top-level root element "http://s3.amazonaws.com/doc/2006-03-01/":DeleteBucket
/// @brief "http://s3.amazonaws.com/doc/2006-03-01/":DeleteBucket is a complexType.
///
/// class _s3__DeleteBucket operations:
/// - _s3__DeleteBucket* soap_new__s3__DeleteBucket(soap*) allocate
/// - _s3__DeleteBucket* soap_new__s3__DeleteBucket(soap*, int num) allocate array
/// - _s3__DeleteBucket* soap_new_req__s3__DeleteBucket(soap*, ...) allocate, set required members
/// - _s3__DeleteBucket* soap_new_set__s3__DeleteBucket(soap*, ...) allocate, set all public members
/// - _s3__DeleteBucket::soap_default(soap*) reset members to default
/// - int soap_read__s3__DeleteBucket(soap*, _s3__DeleteBucket*) deserialize from a stream
/// - int soap_write__s3__DeleteBucket(soap*, _s3__DeleteBucket*) serialize to a stream
/// - _s3__DeleteBucket* _s3__DeleteBucket::soap_dup(soap*) returns deep copy of _s3__DeleteBucket, copies the (cyclic) graph structure when a context is provided, or (cycle-pruned) tree structure with soap_set_mode(soap, SOAP_XML_TREE) (use soapcpp2 -Ec)
/// - _s3__DeleteBucket::soap_del() deep deletes _s3__DeleteBucket data members, use only after _s3__DeleteBucket::soap_dup(NULL) (use soapcpp2 -Ed)
class _s3__DeleteBucket
{ public:
/// Element "Bucket" of XSD type xs:string.
    std::string                          Bucket                         1;	///< Required element.
/// Element "AWSAccessKeyId" of XSD type xs:string.
    std::string*                         AWSAccessKeyId                 0;	///< Optional element.
/// Element "Timestamp" of XSD type xs:dateTime.
    time_t*                              Timestamp                      0;	///< Optional element.
/// Element "Signature" of XSD type xs:string.
    std::string*                         Signature                      0;	///< Optional element.
/// Element "Credential" of XSD type xs:string.
    std::string*                         Credential                     0;	///< Optional element.
/// A handle to the soap struct context that manages this instance when instantiated by a context or NULL otherwise (automatically set).
    struct soap                         *soap                          ;
};

/// @brief Top-level root element "http://s3.amazonaws.com/doc/2006-03-01/":DeleteBucketResponse
/// @brief "http://s3.amazonaws.com/doc/2006-03-01/":DeleteBucketResponse is a complexType.
///
/// class _s3__DeleteBucketResponse operations:
/// - _s3__DeleteBucketResponse* soap_new__s3__DeleteBucketResponse(soap*) allocate
/// - _s3__DeleteBucketResponse* soap_new__s3__DeleteBucketResponse(soap*, int num) allocate array
/// - _s3__DeleteBucketResponse* soap_new_req__s3__DeleteBucketResponse(soap*, ...) allocate, set required members
/// - _s3__DeleteBucketResponse* soap_new_set__s3__DeleteBucketResponse(soap*, ...) allocate, set all public members
/// - _s3__DeleteBucketResponse::soap_default(soap*) reset members to default
/// - int soap_read__s3__DeleteBucketResponse(soap*, _s3__DeleteBucketResponse*) deserialize from a stream
/// - int soap_write__s3__DeleteBucketResponse(soap*, _s3__DeleteBucketResponse*) serialize to a stream
/// - _s3__DeleteBucketResponse* _s3__DeleteBucketResponse::soap_dup(soap*) returns deep copy of _s3__DeleteBucketResponse, copies the (cyclic) graph structure when a context is provided, or (cycle-pruned) tree structure with soap_set_mode(soap, SOAP_XML_TREE) (use soapcpp2 -Ec)
/// - _s3__DeleteBucketResponse::soap_del() deep deletes _s3__DeleteBucketResponse data members, use only after _s3__DeleteBucketResponse::soap_dup(NULL) (use soapcpp2 -Ed)
class _s3__DeleteBucketResponse
{ public:
/// Element "DeleteBucketResponse" of XSD type "http://s3.amazonaws.com/doc/2006-03-01/":Status.
    s3__Status*                          DeleteBucketResponse           1;	///< Required element.
/// A handle to the soap struct context that manages this instance when instantiated by a context or NULL otherwise (automatically set).
    struct soap                         *soap                          ;
};

/// @brief Top-level root element "http://s3.amazonaws.com/doc/2006-03-01/":GetBucketLoggingStatus
/// @brief "http://s3.amazonaws.com/doc/2006-03-01/":GetBucketLoggingStatus is a complexType.
///
/// class _s3__GetBucketLoggingStatus operations:
/// - _s3__GetBucketLoggingStatus* soap_new__s3__GetBucketLoggingStatus(soap*) allocate
/// - _s3__GetBucketLoggingStatus* soap_new__s3__GetBucketLoggingStatus(soap*, int num) allocate array
/// - _s3__GetBucketLoggingStatus* soap_new_req__s3__GetBucketLoggingStatus(soap*, ...) allocate, set required members
/// - _s3__GetBucketLoggingStatus* soap_new_set__s3__GetBucketLoggingStatus(soap*, ...) allocate, set all public members
/// - _s3__GetBucketLoggingStatus::soap_default(soap*) reset members to default
/// - int soap_read__s3__GetBucketLoggingStatus(soap*, _s3__GetBucketLoggingStatus*) deserialize from a stream
/// - int soap_write__s3__GetBucketLoggingStatus(soap*, _s3__GetBucketLoggingStatus*) serialize to a stream
/// - _s3__GetBucketLoggingStatus* _s3__GetBucketLoggingStatus::soap_dup(soap*) returns deep copy of _s3__GetBucketLoggingStatus, copies the (cyclic) graph structure when a context is provided, or (cycle-pruned) tree structure with soap_set_mode(soap, SOAP_XML_TREE) (use soapcpp2 -Ec)
/// - _s3__GetBucketLoggingStatus::soap_del() deep deletes _s3__GetBucketLoggingStatus data members, use only after _s3__GetBucketLoggingStatus::soap_dup(NULL) (use soapcpp2 -Ed)
class _s3__GetBucketLoggingStatus
{ public:
/// Element "Bucket" of XSD type xs:string.
    std::string                          Bucket                         1;	///< Required element.
/// Element "AWSAccessKeyId" of XSD type xs:string.
    std::string*                         AWSAccessKeyId                 0;	///< Optional element.
/// Element "Timestamp" of XSD type xs:dateTime.
    time_t*                              Timestamp                      0;	///< Optional element.
/// Element "Signature" of XSD type xs:string.
    std::string*                         Signature                      0;	///< Optional element.
/// Element "Credential" of XSD type xs:string.
    std::string*                         Credential                     0;	///< Optional element.
/// A handle to the soap struct context that manages this instance when instantiated by a context or NULL otherwise (automatically set).
    struct soap                         *soap                          ;
};

/// @brief Top-level root element "http://s3.amazonaws.com/doc/2006-03-01/":GetBucketLoggingStatusResponse
/// @brief "http://s3.amazonaws.com/doc/2006-03-01/":GetBucketLoggingStatusResponse is a complexType.
///
/// class _s3__GetBucketLoggingStatusResponse operations:
/// - _s3__GetBucketLoggingStatusResponse* soap_new__s3__GetBucketLoggingStatusResponse(soap*) allocate
/// - _s3__GetBucketLoggingStatusResponse* soap_new__s3__GetBucketLoggingStatusResponse(soap*, int num) allocate array
/// - _s3__GetBucketLoggingStatusResponse* soap_new_req__s3__GetBucketLoggingStatusResponse(soap*, ...) allocate, set required members
/// - _s3__GetBucketLoggingStatusResponse* soap_new_set__s3__GetBucketLoggingStatusResponse(soap*, ...) allocate, set all public members
/// - _s3__GetBucketLoggingStatusResponse::soap_default(soap*) reset members to default
/// - int soap_read__s3__GetBucketLoggingStatusResponse(soap*, _s3__GetBucketLoggingStatusResponse*) deserialize from a stream
/// - int soap_write__s3__GetBucketLoggingStatusResponse(soap*, _s3__GetBucketLoggingStatusResponse*) serialize to a stream
/// - _s3__GetBucketLoggingStatusResponse* _s3__GetBucketLoggingStatusResponse::soap_dup(soap*) returns deep copy of _s3__GetBucketLoggingStatusResponse, copies the (cyclic) graph structure when a context is provided, or (cycle-pruned) tree structure with soap_set_mode(soap, SOAP_XML_TREE) (use soapcpp2 -Ec)
/// - _s3__GetBucketLoggingStatusResponse::soap_del() deep deletes _s3__GetBucketLoggingStatusResponse data members, use only after _s3__GetBucketLoggingStatusResponse::soap_dup(NULL) (use soapcpp2 -Ed)
class _s3__GetBucketLoggingStatusResponse
{ public:
/// Element "GetBucketLoggingStatusResponse" of XSD type "http://s3.amazonaws.com/doc/2006-03-01/":BucketLoggingStatus.
    s3__BucketLoggingStatus*             GetBucketLoggingStatusResponse 1;	///< Required element.
/// A handle to the soap struct context that manages this instance when instantiated by a context or NULL otherwise (automatically set).
    struct soap                         *soap                          ;
};

/// @brief Top-level root element "http://s3.amazonaws.com/doc/2006-03-01/":SetBucketLoggingStatus
/// @brief "http://s3.amazonaws.com/doc/2006-03-01/":SetBucketLoggingStatus is a complexType.
///
/// class _s3__SetBucketLoggingStatus operations:
/// - _s3__SetBucketLoggingStatus* soap_new__s3__SetBucketLoggingStatus(soap*) allocate
/// - _s3__SetBucketLoggingStatus* soap_new__s3__SetBucketLoggingStatus(soap*, int num) allocate array
/// - _s3__SetBucketLoggingStatus* soap_new_req__s3__SetBucketLoggingStatus(soap*, ...) allocate, set required members
/// - _s3__SetBucketLoggingStatus* soap_new_set__s3__SetBucketLoggingStatus(soap*, ...) allocate, set all public members
/// - _s3__SetBucketLoggingStatus::soap_default(soap*) reset members to default
/// - int soap_read__s3__SetBucketLoggingStatus(soap*, _s3__SetBucketLoggingStatus*) deserialize from a stream
/// - int soap_write__s3__SetBucketLoggingStatus(soap*, _s3__SetBucketLoggingStatus*) serialize to a stream
/// - _s3__SetBucketLoggingStatus* _s3__SetBucketLoggingStatus::soap_dup(soap*) returns deep copy of _s3__SetBucketLoggingStatus, copies the (cyclic) graph structure when a context is provided, or (cycle-pruned) tree structure with soap_set_mode(soap, SOAP_XML_TREE) (use soapcpp2 -Ec)
/// - _s3__SetBucketLoggingStatus::soap_del() deep deletes _s3__SetBucketLoggingStatus data members, use only after _s3__SetBucketLoggingStatus::soap_dup(NULL) (use soapcpp2 -Ed)
class _s3__SetBucketLoggingStatus
{ public:
/// Element "Bucket" of XSD type xs:string.
    std::string                          Bucket                         1;	///< Required element.
/// Element "AWSAccessKeyId" of XSD type xs:string.
    std::string*                         AWSAccessKeyId                 0;	///< Optional element.
/// Element "Timestamp" of XSD type xs:dateTime.
    time_t*                              Timestamp                      0;	///< Optional element.
/// Element "Signature" of XSD type xs:string.
    std::string*                         Signature                      0;	///< Optional element.
/// Element "Credential" of XSD type xs:string.
    std::string*                         Credential                     0;	///< Optional element.
/// Element "BucketLoggingStatus" of XSD type "http://s3.amazonaws.com/doc/2006-03-01/":BucketLoggingStatus.
    s3__BucketLoggingStatus*             BucketLoggingStatus            1;	///< Required element.
/// A handle to the soap struct context that manages this instance when instantiated by a context or NULL otherwise (automatically set).
    struct soap                         *soap                          ;
};

/// @brief Top-level root element "http://s3.amazonaws.com/doc/2006-03-01/":SetBucketLoggingStatusResponse
/// @brief "http://s3.amazonaws.com/doc/2006-03-01/":SetBucketLoggingStatusResponse is a complexType.
///
/// class _s3__SetBucketLoggingStatusResponse operations:
/// - _s3__SetBucketLoggingStatusResponse* soap_new__s3__SetBucketLoggingStatusResponse(soap*) allocate
/// - _s3__SetBucketLoggingStatusResponse* soap_new__s3__SetBucketLoggingStatusResponse(soap*, int num) allocate array
/// - _s3__SetBucketLoggingStatusResponse* soap_new_req__s3__SetBucketLoggingStatusResponse(soap*, ...) allocate, set required members
/// - _s3__SetBucketLoggingStatusResponse* soap_new_set__s3__SetBucketLoggingStatusResponse(soap*, ...) allocate, set all public members
/// - _s3__SetBucketLoggingStatusResponse::soap_default(soap*) reset members to default
/// - int soap_read__s3__SetBucketLoggingStatusResponse(soap*, _s3__SetBucketLoggingStatusResponse*) deserialize from a stream
/// - int soap_write__s3__SetBucketLoggingStatusResponse(soap*, _s3__SetBucketLoggingStatusResponse*) serialize to a stream
/// - _s3__SetBucketLoggingStatusResponse* _s3__SetBucketLoggingStatusResponse::soap_dup(soap*) returns deep copy of _s3__SetBucketLoggingStatusResponse, copies the (cyclic) graph structure when a context is provided, or (cycle-pruned) tree structure with soap_set_mode(soap, SOAP_XML_TREE) (use soapcpp2 -Ec)
/// - _s3__SetBucketLoggingStatusResponse::soap_del() deep deletes _s3__SetBucketLoggingStatusResponse data members, use only after _s3__SetBucketLoggingStatusResponse::soap_dup(NULL) (use soapcpp2 -Ed)
class _s3__SetBucketLoggingStatusResponse
{ public:
/// A handle to the soap struct context that manages this instance when instantiated by a context or NULL otherwise (automatically set).
    struct soap                         *soap                          ;
};

/// @brief Top-level root element "http://s3.amazonaws.com/doc/2006-03-01/":GetObjectAccessControlPolicy
/// @brief "http://s3.amazonaws.com/doc/2006-03-01/":GetObjectAccessControlPolicy is a complexType.
///
/// class _s3__GetObjectAccessControlPolicy operations:
/// - _s3__GetObjectAccessControlPolicy* soap_new__s3__GetObjectAccessControlPolicy(soap*) allocate
/// - _s3__GetObjectAccessControlPolicy* soap_new__s3__GetObjectAccessControlPolicy(soap*, int num) allocate array
/// - _s3__GetObjectAccessControlPolicy* soap_new_req__s3__GetObjectAccessControlPolicy(soap*, ...) allocate, set required members
/// - _s3__GetObjectAccessControlPolicy* soap_new_set__s3__GetObjectAccessControlPolicy(soap*, ...) allocate, set all public members
/// - _s3__GetObjectAccessControlPolicy::soap_default(soap*) reset members to default
/// - int soap_read__s3__GetObjectAccessControlPolicy(soap*, _s3__GetObjectAccessControlPolicy*) deserialize from a stream
/// - int soap_write__s3__GetObjectAccessControlPolicy(soap*, _s3__GetObjectAccessControlPolicy*) serialize to a stream
/// - _s3__GetObjectAccessControlPolicy* _s3__GetObjectAccessControlPolicy::soap_dup(soap*) returns deep copy of _s3__GetObjectAccessControlPolicy, copies the (cyclic) graph structure when a context is provided, or (cycle-pruned) tree structure with soap_set_mode(soap, SOAP_XML_TREE) (use soapcpp2 -Ec)
/// - _s3__GetObjectAccessControlPolicy::soap_del() deep deletes _s3__GetObjectAccessControlPolicy data members, use only after _s3__GetObjectAccessControlPolicy::soap_dup(NULL) (use soapcpp2 -Ed)
class _s3__GetObjectAccessControlPolicy
{ public:
/// Element "Bucket" of XSD type xs:string.
    std::string                          Bucket                         1;	///< Required element.
/// Element "Key" of XSD type xs:string.
    std::string                          Key                            1;	///< Required element.
/// Element "AWSAccessKeyId" of XSD type xs:string.
    std::string*                         AWSAccessKeyId                 0;	///< Optional element.
/// Element "Timestamp" of XSD type xs:dateTime.
    time_t*                              Timestamp                      0;	///< Optional element.
/// Element "Signature" of XSD type xs:string.
    std::string*                         Signature                      0;	///< Optional element.
/// Element "Credential" of XSD type xs:string.
    std::string*                         Credential                     0;	///< Optional element.
/// A handle to the soap struct context that manages this instance when instantiated by a context or NULL otherwise (automatically set).
    struct soap                         *soap                          ;
};

/// @brief Top-level root element "http://s3.amazonaws.com/doc/2006-03-01/":GetObjectAccessControlPolicyResponse
/// @brief "http://s3.amazonaws.com/doc/2006-03-01/":GetObjectAccessControlPolicyResponse is a complexType.
///
/// class _s3__GetObjectAccessControlPolicyResponse operations:
/// - _s3__GetObjectAccessControlPolicyResponse* soap_new__s3__GetObjectAccessControlPolicyResponse(soap*) allocate
/// - _s3__GetObjectAccessControlPolicyResponse* soap_new__s3__GetObjectAccessControlPolicyResponse(soap*, int num) allocate array
/// - _s3__GetObjectAccessControlPolicyResponse* soap_new_req__s3__GetObjectAccessControlPolicyResponse(soap*, ...) allocate, set required members
/// - _s3__GetObjectAccessControlPolicyResponse* soap_new_set__s3__GetObjectAccessControlPolicyResponse(soap*, ...) allocate, set all public members
/// - _s3__GetObjectAccessControlPolicyResponse::soap_default(soap*) reset members to default
/// - int soap_read__s3__GetObjectAccessControlPolicyResponse(soap*, _s3__GetObjectAccessControlPolicyResponse*) deserialize from a stream
/// - int soap_write__s3__GetObjectAccessControlPolicyResponse(soap*, _s3__GetObjectAccessControlPolicyResponse*) serialize to a stream
/// - _s3__GetObjectAccessControlPolicyResponse* _s3__GetObjectAccessControlPolicyResponse::soap_dup(soap*) returns deep copy of _s3__GetObjectAccessControlPolicyResponse, copies the (cyclic) graph structure when a context is provided, or (cycle-pruned) tree structure with soap_set_mode(soap, SOAP_XML_TREE) (use soapcpp2 -Ec)
/// - _s3__GetObjectAccessControlPolicyResponse::soap_del() deep deletes _s3__GetObjectAccessControlPolicyResponse data members, use only after _s3__GetObjectAccessControlPolicyResponse::soap_dup(NULL) (use soapcpp2 -Ed)
class _s3__GetObjectAccessControlPolicyResponse
{ public:
/// Element "GetObjectAccessControlPolicyResponse" of XSD type "http://s3.amazonaws.com/doc/2006-03-01/":AccessControlPolicy.
    s3__AccessControlPolicy*             GetObjectAccessControlPolicyResponse 1;	///< Required element.
/// A handle to the soap struct context that manages this instance when instantiated by a context or NULL otherwise (automatically set).
    struct soap                         *soap                          ;
};

/// @brief Top-level root element "http://s3.amazonaws.com/doc/2006-03-01/":GetBucketAccessControlPolicy
/// @brief "http://s3.amazonaws.com/doc/2006-03-01/":GetBucketAccessControlPolicy is a complexType.
///
/// class _s3__GetBucketAccessControlPolicy operations:
/// - _s3__GetBucketAccessControlPolicy* soap_new__s3__GetBucketAccessControlPolicy(soap*) allocate
/// - _s3__GetBucketAccessControlPolicy* soap_new__s3__GetBucketAccessControlPolicy(soap*, int num) allocate array
/// - _s3__GetBucketAccessControlPolicy* soap_new_req__s3__GetBucketAccessControlPolicy(soap*, ...) allocate, set required members
/// - _s3__GetBucketAccessControlPolicy* soap_new_set__s3__GetBucketAccessControlPolicy(soap*, ...) allocate, set all public members
/// - _s3__GetBucketAccessControlPolicy::soap_default(soap*) reset members to default
/// - int soap_read__s3__GetBucketAccessControlPolicy(soap*, _s3__GetBucketAccessControlPolicy*) deserialize from a stream
/// - int soap_write__s3__GetBucketAccessControlPolicy(soap*, _s3__GetBucketAccessControlPolicy*) serialize to a stream
/// - _s3__GetBucketAccessControlPolicy* _s3__GetBucketAccessControlPolicy::soap_dup(soap*) returns deep copy of _s3__GetBucketAccessControlPolicy, copies the (cyclic) graph structure when a context is provided, or (cycle-pruned) tree structure with soap_set_mode(soap, SOAP_XML_TREE) (use soapcpp2 -Ec)
/// - _s3__GetBucketAccessControlPolicy::soap_del() deep deletes _s3__GetBucketAccessControlPolicy data members, use only after _s3__GetBucketAccessControlPolicy::soap_dup(NULL) (use soapcpp2 -Ed)
class _s3__GetBucketAccessControlPolicy
{ public:
/// Element "Bucket" of XSD type xs:string.
    std::string                          Bucket                         1;	///< Required element.
/// Element "AWSAccessKeyId" of XSD type xs:string.
    std::string*                         AWSAccessKeyId                 0;	///< Optional element.
/// Element "Timestamp" of XSD type xs:dateTime.
    time_t*                              Timestamp                      0;	///< Optional element.
/// Element "Signature" of XSD type xs:string.
    std::string*                         Signature                      0;	///< Optional element.
/// Element "Credential" of XSD type xs:string.
    std::string*                         Credential                     0;	///< Optional element.
/// A handle to the soap struct context that manages this instance when instantiated by a context or NULL otherwise (automatically set).
    struct soap                         *soap                          ;
};

/// @brief Top-level root element "http://s3.amazonaws.com/doc/2006-03-01/":GetBucketAccessControlPolicyResponse
/// @brief "http://s3.amazonaws.com/doc/2006-03-01/":GetBucketAccessControlPolicyResponse is a complexType.
///
/// class _s3__GetBucketAccessControlPolicyResponse operations:
/// - _s3__GetBucketAccessControlPolicyResponse* soap_new__s3__GetBucketAccessControlPolicyResponse(soap*) allocate
/// - _s3__GetBucketAccessControlPolicyResponse* soap_new__s3__GetBucketAccessControlPolicyResponse(soap*, int num) allocate array
/// - _s3__GetBucketAccessControlPolicyResponse* soap_new_req__s3__GetBucketAccessControlPolicyResponse(soap*, ...) allocate, set required members
/// - _s3__GetBucketAccessControlPolicyResponse* soap_new_set__s3__GetBucketAccessControlPolicyResponse(soap*, ...) allocate, set all public members
/// - _s3__GetBucketAccessControlPolicyResponse::soap_default(soap*) reset members to default
/// - int soap_read__s3__GetBucketAccessControlPolicyResponse(soap*, _s3__GetBucketAccessControlPolicyResponse*) deserialize from a stream
/// - int soap_write__s3__GetBucketAccessControlPolicyResponse(soap*, _s3__GetBucketAccessControlPolicyResponse*) serialize to a stream
/// - _s3__GetBucketAccessControlPolicyResponse* _s3__GetBucketAccessControlPolicyResponse::soap_dup(soap*) returns deep copy of _s3__GetBucketAccessControlPolicyResponse, copies the (cyclic) graph structure when a context is provided, or (cycle-pruned) tree structure with soap_set_mode(soap, SOAP_XML_TREE) (use soapcpp2 -Ec)
/// - _s3__GetBucketAccessControlPolicyResponse::soap_del() deep deletes _s3__GetBucketAccessControlPolicyResponse data members, use only after _s3__GetBucketAccessControlPolicyResponse::soap_dup(NULL) (use soapcpp2 -Ed)
class _s3__GetBucketAccessControlPolicyResponse
{ public:
/// Element "GetBucketAccessControlPolicyResponse" of XSD type "http://s3.amazonaws.com/doc/2006-03-01/":AccessControlPolicy.
    s3__AccessControlPolicy*             GetBucketAccessControlPolicyResponse 1;	///< Required element.
/// A handle to the soap struct context that manages this instance when instantiated by a context or NULL otherwise (automatically set).
    struct soap                         *soap                          ;
};

/// @brief Top-level root element "http://s3.amazonaws.com/doc/2006-03-01/":SetObjectAccessControlPolicy
/// @brief "http://s3.amazonaws.com/doc/2006-03-01/":SetObjectAccessControlPolicy is a complexType.
///
/// class _s3__SetObjectAccessControlPolicy operations:
/// - _s3__SetObjectAccessControlPolicy* soap_new__s3__SetObjectAccessControlPolicy(soap*) allocate
/// - _s3__SetObjectAccessControlPolicy* soap_new__s3__SetObjectAccessControlPolicy(soap*, int num) allocate array
/// - _s3__SetObjectAccessControlPolicy* soap_new_req__s3__SetObjectAccessControlPolicy(soap*, ...) allocate, set required members
/// - _s3__SetObjectAccessControlPolicy* soap_new_set__s3__SetObjectAccessControlPolicy(soap*, ...) allocate, set all public members
/// - _s3__SetObjectAccessControlPolicy::soap_default(soap*) reset members to default
/// - int soap_read__s3__SetObjectAccessControlPolicy(soap*, _s3__SetObjectAccessControlPolicy*) deserialize from a stream
/// - int soap_write__s3__SetObjectAccessControlPolicy(soap*, _s3__SetObjectAccessControlPolicy*) serialize to a stream
/// - _s3__SetObjectAccessControlPolicy* _s3__SetObjectAccessControlPolicy::soap_dup(soap*) returns deep copy of _s3__SetObjectAccessControlPolicy, copies the (cyclic) graph structure when a context is provided, or (cycle-pruned) tree structure with soap_set_mode(soap, SOAP_XML_TREE) (use soapcpp2 -Ec)
/// - _s3__SetObjectAccessControlPolicy::soap_del() deep deletes _s3__SetObjectAccessControlPolicy data members, use only after _s3__SetObjectAccessControlPolicy::soap_dup(NULL) (use soapcpp2 -Ed)
class _s3__SetObjectAccessControlPolicy
{ public:
/// Element "Bucket" of XSD type xs:string.
    std::string                          Bucket                         1;	///< Required element.
/// Element "Key" of XSD type xs:string.
    std::string                          Key                            1;	///< Required element.
/// Element "AccessControlList" of XSD type "http://s3.amazonaws.com/doc/2006-03-01/":AccessControlList.
    s3__AccessControlList*               AccessControlList              1;	///< Required element.
/// Element "AWSAccessKeyId" of XSD type xs:string.
    std::string*                         AWSAccessKeyId                 0;	///< Optional element.
/// Element "Timestamp" of XSD type xs:dateTime.
    time_t*                              Timestamp                      0;	///< Optional element.
/// Element "Signature" of XSD type xs:string.
    std::string*                         Signature                      0;	///< Optional element.
/// Element "Credential" of XSD type xs:string.
    std::string*                         Credential                     0;	///< Optional element.
/// A handle to the soap struct context that manages this instance when instantiated by a context or NULL otherwise (automatically set).
    struct soap                         *soap                          ;
};

/// @brief Top-level root element "http://s3.amazonaws.com/doc/2006-03-01/":SetObjectAccessControlPolicyResponse
/// @brief "http://s3.amazonaws.com/doc/2006-03-01/":SetObjectAccessControlPolicyResponse is a complexType.
///
/// class _s3__SetObjectAccessControlPolicyResponse operations:
/// - _s3__SetObjectAccessControlPolicyResponse* soap_new__s3__SetObjectAccessControlPolicyResponse(soap*) allocate
/// - _s3__SetObjectAccessControlPolicyResponse* soap_new__s3__SetObjectAccessControlPolicyResponse(soap*, int num) allocate array
/// - _s3__SetObjectAccessControlPolicyResponse* soap_new_req__s3__SetObjectAccessControlPolicyResponse(soap*, ...) allocate, set required members
/// - _s3__SetObjectAccessControlPolicyResponse* soap_new_set__s3__SetObjectAccessControlPolicyResponse(soap*, ...) allocate, set all public members
/// - _s3__SetObjectAccessControlPolicyResponse::soap_default(soap*) reset members to default
/// - int soap_read__s3__SetObjectAccessControlPolicyResponse(soap*, _s3__SetObjectAccessControlPolicyResponse*) deserialize from a stream
/// - int soap_write__s3__SetObjectAccessControlPolicyResponse(soap*, _s3__SetObjectAccessControlPolicyResponse*) serialize to a stream
/// - _s3__SetObjectAccessControlPolicyResponse* _s3__SetObjectAccessControlPolicyResponse::soap_dup(soap*) returns deep copy of _s3__SetObjectAccessControlPolicyResponse, copies the (cyclic) graph structure when a context is provided, or (cycle-pruned) tree structure with soap_set_mode(soap, SOAP_XML_TREE) (use soapcpp2 -Ec)
/// - _s3__SetObjectAccessControlPolicyResponse::soap_del() deep deletes _s3__SetObjectAccessControlPolicyResponse data members, use only after _s3__SetObjectAccessControlPolicyResponse::soap_dup(NULL) (use soapcpp2 -Ed)
class _s3__SetObjectAccessControlPolicyResponse
{ public:
/// A handle to the soap struct context that manages this instance when instantiated by a context or NULL otherwise (automatically set).
    struct soap                         *soap                          ;
};

/// @brief Top-level root element "http://s3.amazonaws.com/doc/2006-03-01/":SetBucketAccessControlPolicy
/// @brief "http://s3.amazonaws.com/doc/2006-03-01/":SetBucketAccessControlPolicy is a complexType.
///
/// class _s3__SetBucketAccessControlPolicy operations:
/// - _s3__SetBucketAccessControlPolicy* soap_new__s3__SetBucketAccessControlPolicy(soap*) allocate
/// - _s3__SetBucketAccessControlPolicy* soap_new__s3__SetBucketAccessControlPolicy(soap*, int num) allocate array
/// - _s3__SetBucketAccessControlPolicy* soap_new_req__s3__SetBucketAccessControlPolicy(soap*, ...) allocate, set required members
/// - _s3__SetBucketAccessControlPolicy* soap_new_set__s3__SetBucketAccessControlPolicy(soap*, ...) allocate, set all public members
/// - _s3__SetBucketAccessControlPolicy::soap_default(soap*) reset members to default
/// - int soap_read__s3__SetBucketAccessControlPolicy(soap*, _s3__SetBucketAccessControlPolicy*) deserialize from a stream
/// - int soap_write__s3__SetBucketAccessControlPolicy(soap*, _s3__SetBucketAccessControlPolicy*) serialize to a stream
/// - _s3__SetBucketAccessControlPolicy* _s3__SetBucketAccessControlPolicy::soap_dup(soap*) returns deep copy of _s3__SetBucketAccessControlPolicy, copies the (cyclic) graph structure when a context is provided, or (cycle-pruned) tree structure with soap_set_mode(soap, SOAP_XML_TREE) (use soapcpp2 -Ec)
/// - _s3__SetBucketAccessControlPolicy::soap_del() deep deletes _s3__SetBucketAccessControlPolicy data members, use only after _s3__SetBucketAccessControlPolicy::soap_dup(NULL) (use soapcpp2 -Ed)
class _s3__SetBucketAccessControlPolicy
{ public:
/// Element "Bucket" of XSD type xs:string.
    std::string                          Bucket                         1;	///< Required element.
/// Element "AccessControlList" of XSD type "http://s3.amazonaws.com/doc/2006-03-01/":AccessControlList.
    s3__AccessControlList*               AccessControlList              0;	///< Optional element.
/// Element "AWSAccessKeyId" of XSD type xs:string.
    std::string*                         AWSAccessKeyId                 0;	///< Optional element.
/// Element "Timestamp" of XSD type xs:dateTime.
    time_t*                              Timestamp                      0;	///< Optional element.
/// Element "Signature" of XSD type xs:string.
    std::string*                         Signature                      0;	///< Optional element.
/// Element "Credential" of XSD type xs:string.
    std::string*                         Credential                     0;	///< Optional element.
/// A handle to the soap struct context that manages this instance when instantiated by a context or NULL otherwise (automatically set).
    struct soap                         *soap                          ;
};

/// @brief Top-level root element "http://s3.amazonaws.com/doc/2006-03-01/":SetBucketAccessControlPolicyResponse
/// @brief "http://s3.amazonaws.com/doc/2006-03-01/":SetBucketAccessControlPolicyResponse is a complexType.
///
/// class _s3__SetBucketAccessControlPolicyResponse operations:
/// - _s3__SetBucketAccessControlPolicyResponse* soap_new__s3__SetBucketAccessControlPolicyResponse(soap*) allocate
/// - _s3__SetBucketAccessControlPolicyResponse* soap_new__s3__SetBucketAccessControlPolicyResponse(soap*, int num) allocate array
/// - _s3__SetBucketAccessControlPolicyResponse* soap_new_req__s3__SetBucketAccessControlPolicyResponse(soap*, ...) allocate, set required members
/// - _s3__SetBucketAccessControlPolicyResponse* soap_new_set__s3__SetBucketAccessControlPolicyResponse(soap*, ...) allocate, set all public members
/// - _s3__SetBucketAccessControlPolicyResponse::soap_default(soap*) reset members to default
/// - int soap_read__s3__SetBucketAccessControlPolicyResponse(soap*, _s3__SetBucketAccessControlPolicyResponse*) deserialize from a stream
/// - int soap_write__s3__SetBucketAccessControlPolicyResponse(soap*, _s3__SetBucketAccessControlPolicyResponse*) serialize to a stream
/// - _s3__SetBucketAccessControlPolicyResponse* _s3__SetBucketAccessControlPolicyResponse::soap_dup(soap*) returns deep copy of _s3__SetBucketAccessControlPolicyResponse, copies the (cyclic) graph structure when a context is provided, or (cycle-pruned) tree structure with soap_set_mode(soap, SOAP_XML_TREE) (use soapcpp2 -Ec)
/// - _s3__SetBucketAccessControlPolicyResponse::soap_del() deep deletes _s3__SetBucketAccessControlPolicyResponse data members, use only after _s3__SetBucketAccessControlPolicyResponse::soap_dup(NULL) (use soapcpp2 -Ed)
class _s3__SetBucketAccessControlPolicyResponse
{ public:
/// A handle to the soap struct context that manages this instance when instantiated by a context or NULL otherwise (automatically set).
    struct soap                         *soap                          ;
};

/// @brief Top-level root element "http://s3.amazonaws.com/doc/2006-03-01/":GetObject
/// @brief "http://s3.amazonaws.com/doc/2006-03-01/":GetObject is a complexType.
///
/// class _s3__GetObject operations:
/// - _s3__GetObject* soap_new__s3__GetObject(soap*) allocate
/// - _s3__GetObject* soap_new__s3__GetObject(soap*, int num) allocate array
/// - _s3__GetObject* soap_new_req__s3__GetObject(soap*, ...) allocate, set required members
/// - _s3__GetObject* soap_new_set__s3__GetObject(soap*, ...) allocate, set all public members
/// - _s3__GetObject::soap_default(soap*) reset members to default
/// - int soap_read__s3__GetObject(soap*, _s3__GetObject*) deserialize from a stream
/// - int soap_write__s3__GetObject(soap*, _s3__GetObject*) serialize to a stream
/// - _s3__GetObject* _s3__GetObject::soap_dup(soap*) returns deep copy of _s3__GetObject, copies the (cyclic) graph structure when a context is provided, or (cycle-pruned) tree structure with soap_set_mode(soap, SOAP_XML_TREE) (use soapcpp2 -Ec)
/// - _s3__GetObject::soap_del() deep deletes _s3__GetObject data members, use only after _s3__GetObject::soap_dup(NULL) (use soapcpp2 -Ed)
class _s3__GetObject
{ public:
/// Element "Bucket" of XSD type xs:string.
    std::string                          Bucket                         1;	///< Required element.
/// Element "Key" of XSD type xs:string.
    std::string                          Key                            1;	///< Required element.
/// Element "GetMetadata" of XSD type xs:boolean.
    bool                                 GetMetadata                    1;	///< Required element.
/// Element "GetData" of XSD type xs:boolean.
    bool                                 GetData                        1;	///< Required element.
/// Element "InlineData" of XSD type xs:boolean.
    bool                                 InlineData                     1;	///< Required element.
/// Element "AWSAccessKeyId" of XSD type xs:string.
    std::string*                         AWSAccessKeyId                 0;	///< Optional element.
/// Element "Timestamp" of XSD type xs:dateTime.
    time_t*                              Timestamp                      0;	///< Optional element.
/// Element "Signature" of XSD type xs:string.
    std::string*                         Signature                      0;	///< Optional element.
/// Element "Credential" of XSD type xs:string.
    std::string*                         Credential                     0;	///< Optional element.
/// A handle to the soap struct context that manages this instance when instantiated by a context or NULL otherwise (automatically set).
    struct soap                         *soap                          ;
};

/// @brief Top-level root element "http://s3.amazonaws.com/doc/2006-03-01/":GetObjectResponse
/// @brief "http://s3.amazonaws.com/doc/2006-03-01/":GetObjectResponse is a complexType.
///
/// class _s3__GetObjectResponse operations:
/// - _s3__GetObjectResponse* soap_new__s3__GetObjectResponse(soap*) allocate
/// - _s3__GetObjectResponse* soap_new__s3__GetObjectResponse(soap*, int num) allocate array
/// - _s3__GetObjectResponse* soap_new_req__s3__GetObjectResponse(soap*, ...) allocate, set required members
/// - _s3__GetObjectResponse* soap_new_set__s3__GetObjectResponse(soap*, ...) allocate, set all public members
/// - _s3__GetObjectResponse::soap_default(soap*) reset members to default
/// - int soap_read__s3__GetObjectResponse(soap*, _s3__GetObjectResponse*) deserialize from a stream
/// - int soap_write__s3__GetObjectResponse(soap*, _s3__GetObjectResponse*) serialize to a stream
/// - _s3__GetObjectResponse* _s3__GetObjectResponse::soap_dup(soap*) returns deep copy of _s3__GetObjectResponse, copies the (cyclic) graph structure when a context is provided, or (cycle-pruned) tree structure with soap_set_mode(soap, SOAP_XML_TREE) (use soapcpp2 -Ec)
/// - _s3__GetObjectResponse::soap_del() deep deletes _s3__GetObjectResponse data members, use only after _s3__GetObjectResponse::soap_dup(NULL) (use soapcpp2 -Ed)
class _s3__GetObjectResponse
{ public:
/// Element "GetObjectResponse" of XSD type "http://s3.amazonaws.com/doc/2006-03-01/":GetObjectResult.
    s3__GetObjectResult*                 GetObjectResponse              1;	///< Required element.
/// A handle to the soap struct context that manages this instance when instantiated by a context or NULL otherwise (automatically set).
    struct soap                         *soap                          ;
};

/// @brief Top-level root element "http://s3.amazonaws.com/doc/2006-03-01/":GetObjectExtended
/// @brief "http://s3.amazonaws.com/doc/2006-03-01/":GetObjectExtended is a complexType.
///
/// class _s3__GetObjectExtended operations:
/// - _s3__GetObjectExtended* soap_new__s3__GetObjectExtended(soap*) allocate
/// - _s3__GetObjectExtended* soap_new__s3__GetObjectExtended(soap*, int num) allocate array
/// - _s3__GetObjectExtended* soap_new_req__s3__GetObjectExtended(soap*, ...) allocate, set required members
/// - _s3__GetObjectExtended* soap_new_set__s3__GetObjectExtended(soap*, ...) allocate, set all public members
/// - _s3__GetObjectExtended::soap_default(soap*) reset members to default
/// - int soap_read__s3__GetObjectExtended(soap*, _s3__GetObjectExtended*) deserialize from a stream
/// - int soap_write__s3__GetObjectExtended(soap*, _s3__GetObjectExtended*) serialize to a stream
/// - _s3__GetObjectExtended* _s3__GetObjectExtended::soap_dup(soap*) returns deep copy of _s3__GetObjectExtended, copies the (cyclic) graph structure when a context is provided, or (cycle-pruned) tree structure with soap_set_mode(soap, SOAP_XML_TREE) (use soapcpp2 -Ec)
/// - _s3__GetObjectExtended::soap_del() deep deletes _s3__GetObjectExtended data members, use only after _s3__GetObjectExtended::soap_dup(NULL) (use soapcpp2 -Ed)
class _s3__GetObjectExtended
{ public:
/// Element "Bucket" of XSD type xs:string.
    std::string                          Bucket                         1;	///< Required element.
/// Element "Key" of XSD type xs:string.
    std::string                          Key                            1;	///< Required element.
/// Element "GetMetadata" of XSD type xs:boolean.
    bool                                 GetMetadata                    1;	///< Required element.
/// Element "GetData" of XSD type xs:boolean.
    bool                                 GetData                        1;	///< Required element.
/// Element "InlineData" of XSD type xs:boolean.
    bool                                 InlineData                     1;	///< Required element.
/// Element "ByteRangeStart" of XSD type xs:long.
    LONG64*                              ByteRangeStart                 0;	///< Optional element.
/// Element "ByteRangeEnd" of XSD type xs:long.
    LONG64*                              ByteRangeEnd                   0;	///< Optional element.
/// Element "IfModifiedSince" of XSD type xs:dateTime.
    time_t*                              IfModifiedSince                0;	///< Optional element.
/// Element "IfUnmodifiedSince" of XSD type xs:dateTime.
    time_t*                              IfUnmodifiedSince              0;	///< Optional element.
/// Vector of std::string of length 0..100.
    std::vector<std::string            > IfMatch                        0:100;
/// Vector of std::string of length 0..100.
    std::vector<std::string            > IfNoneMatch                    0:100;
/// Element "ReturnCompleteObjectOnConditionFailure" of XSD type xs:boolean.
    bool*                                ReturnCompleteObjectOnConditionFailure 0;	///< Optional element.
/// Element "AWSAccessKeyId" of XSD type xs:string.
    std::string*                         AWSAccessKeyId                 0;	///< Optional element.
/// Element "Timestamp" of XSD type xs:dateTime.
    time_t*                              Timestamp                      0;	///< Optional element.
/// Element "Signature" of XSD type xs:string.
    std::string*                         Signature                      0;	///< Optional element.
/// Element "Credential" of XSD type xs:string.
    std::string*                         Credential                     0;	///< Optional element.
/// A handle to the soap struct context that manages this instance when instantiated by a context or NULL otherwise (automatically set).
    struct soap                         *soap                          ;
};

/// @brief Top-level root element "http://s3.amazonaws.com/doc/2006-03-01/":GetObjectExtendedResponse
/// @brief "http://s3.amazonaws.com/doc/2006-03-01/":GetObjectExtendedResponse is a complexType.
///
/// class _s3__GetObjectExtendedResponse operations:
/// - _s3__GetObjectExtendedResponse* soap_new__s3__GetObjectExtendedResponse(soap*) allocate
/// - _s3__GetObjectExtendedResponse* soap_new__s3__GetObjectExtendedResponse(soap*, int num) allocate array
/// - _s3__GetObjectExtendedResponse* soap_new_req__s3__GetObjectExtendedResponse(soap*, ...) allocate, set required members
/// - _s3__GetObjectExtendedResponse* soap_new_set__s3__GetObjectExtendedResponse(soap*, ...) allocate, set all public members
/// - _s3__GetObjectExtendedResponse::soap_default(soap*) reset members to default
/// - int soap_read__s3__GetObjectExtendedResponse(soap*, _s3__GetObjectExtendedResponse*) deserialize from a stream
/// - int soap_write__s3__GetObjectExtendedResponse(soap*, _s3__GetObjectExtendedResponse*) serialize to a stream
/// - _s3__GetObjectExtendedResponse* _s3__GetObjectExtendedResponse::soap_dup(soap*) returns deep copy of _s3__GetObjectExtendedResponse, copies the (cyclic) graph structure when a context is provided, or (cycle-pruned) tree structure with soap_set_mode(soap, SOAP_XML_TREE) (use soapcpp2 -Ec)
/// - _s3__GetObjectExtendedResponse::soap_del() deep deletes _s3__GetObjectExtendedResponse data members, use only after _s3__GetObjectExtendedResponse::soap_dup(NULL) (use soapcpp2 -Ed)
class _s3__GetObjectExtendedResponse
{ public:
/// Element "GetObjectResponse" of XSD type "http://s3.amazonaws.com/doc/2006-03-01/":GetObjectResult.
    s3__GetObjectResult*                 GetObjectResponse              1;	///< Required element.
/// A handle to the soap struct context that manages this instance when instantiated by a context or NULL otherwise (automatically set).
    struct soap                         *soap                          ;
};

/// @brief Top-level root element "http://s3.amazonaws.com/doc/2006-03-01/":PutObject
/// @brief "http://s3.amazonaws.com/doc/2006-03-01/":PutObject is a complexType.
///
/// class _s3__PutObject operations:
/// - _s3__PutObject* soap_new__s3__PutObject(soap*) allocate
/// - _s3__PutObject* soap_new__s3__PutObject(soap*, int num) allocate array
/// - _s3__PutObject* soap_new_req__s3__PutObject(soap*, ...) allocate, set required members
/// - _s3__PutObject* soap_new_set__s3__PutObject(soap*, ...) allocate, set all public members
/// - _s3__PutObject::soap_default(soap*) reset members to default
/// - int soap_read__s3__PutObject(soap*, _s3__PutObject*) deserialize from a stream
/// - int soap_write__s3__PutObject(soap*, _s3__PutObject*) serialize to a stream
/// - _s3__PutObject* _s3__PutObject::soap_dup(soap*) returns deep copy of _s3__PutObject, copies the (cyclic) graph structure when a context is provided, or (cycle-pruned) tree structure with soap_set_mode(soap, SOAP_XML_TREE) (use soapcpp2 -Ec)
/// - _s3__PutObject::soap_del() deep deletes _s3__PutObject data members, use only after _s3__PutObject::soap_dup(NULL) (use soapcpp2 -Ed)
class _s3__PutObject
{ public:
/// Element "Bucket" of XSD type xs:string.
    std::string                          Bucket                         1;	///< Required element.
/// Element "Key" of XSD type xs:string.
    std::string                          Key                            1;	///< Required element.
/// Vector of s3__MetadataEntry* of length 0..100.
    std::vector<s3__MetadataEntry*     > Metadata                       0:100;
/// Element "ContentLength" of XSD type xs:long.
    LONG64                               ContentLength                  1;	///< Required element.
/// Element "AccessControlList" of XSD type "http://s3.amazonaws.com/doc/2006-03-01/":AccessControlList.
    s3__AccessControlList*               AccessControlList              0;	///< Optional element.
/// Element "StorageClass" of XSD type "http://s3.amazonaws.com/doc/2006-03-01/":StorageClass.
    enum s3__StorageClass*               StorageClass                   0;	///< Optional element.
/// Element "AWSAccessKeyId" of XSD type xs:string.
    std::string*                         AWSAccessKeyId                 0;	///< Optional element.
/// Element "Timestamp" of XSD type xs:dateTime.
    time_t*                              Timestamp                      0;	///< Optional element.
/// Element "Signature" of XSD type xs:string.
    std::string*                         Signature                      0;	///< Optional element.
/// Element "Credential" of XSD type xs:string.
    std::string*                         Credential                     0;	///< Optional element.
/// A handle to the soap struct context that manages this instance when instantiated by a context or NULL otherwise (automatically set).
    struct soap                         *soap                          ;
};

/// @brief Top-level root element "http://s3.amazonaws.com/doc/2006-03-01/":PutObjectResponse
/// @brief "http://s3.amazonaws.com/doc/2006-03-01/":PutObjectResponse is a complexType.
///
/// class _s3__PutObjectResponse operations:
/// - _s3__PutObjectResponse* soap_new__s3__PutObjectResponse(soap*) allocate
/// - _s3__PutObjectResponse* soap_new__s3__PutObjectResponse(soap*, int num) allocate array
/// - _s3__PutObjectResponse* soap_new_req__s3__PutObjectResponse(soap*, ...) allocate, set required members
/// - _s3__PutObjectResponse* soap_new_set__s3__PutObjectResponse(soap*, ...) allocate, set all public members
/// - _s3__PutObjectResponse::soap_default(soap*) reset members to default
/// - int soap_read__s3__PutObjectResponse(soap*, _s3__PutObjectResponse*) deserialize from a stream
/// - int soap_write__s3__PutObjectResponse(soap*, _s3__PutObjectResponse*) serialize to a stream
/// - _s3__PutObjectResponse* _s3__PutObjectResponse::soap_dup(soap*) returns deep copy of _s3__PutObjectResponse, copies the (cyclic) graph structure when a context is provided, or (cycle-pruned) tree structure with soap_set_mode(soap, SOAP_XML_TREE) (use soapcpp2 -Ec)
/// - _s3__PutObjectResponse::soap_del() deep deletes _s3__PutObjectResponse data members, use only after _s3__PutObjectResponse::soap_dup(NULL) (use soapcpp2 -Ed)
class _s3__PutObjectResponse
{ public:
/// Element "PutObjectResponse" of XSD type "http://s3.amazonaws.com/doc/2006-03-01/":PutObjectResult.
    s3__PutObjectResult*                 PutObjectResponse              1;	///< Required element.
/// A handle to the soap struct context that manages this instance when instantiated by a context or NULL otherwise (automatically set).
    struct soap                         *soap                          ;
};

/// @brief Top-level root element "http://s3.amazonaws.com/doc/2006-03-01/":PutObjectInline
/// @brief "http://s3.amazonaws.com/doc/2006-03-01/":PutObjectInline is a complexType.
///
/// class _s3__PutObjectInline operations:
/// - _s3__PutObjectInline* soap_new__s3__PutObjectInline(soap*) allocate
/// - _s3__PutObjectInline* soap_new__s3__PutObjectInline(soap*, int num) allocate array
/// - _s3__PutObjectInline* soap_new_req__s3__PutObjectInline(soap*, ...) allocate, set required members
/// - _s3__PutObjectInline* soap_new_set__s3__PutObjectInline(soap*, ...) allocate, set all public members
/// - _s3__PutObjectInline::soap_default(soap*) reset members to default
/// - int soap_read__s3__PutObjectInline(soap*, _s3__PutObjectInline*) deserialize from a stream
/// - int soap_write__s3__PutObjectInline(soap*, _s3__PutObjectInline*) serialize to a stream
/// - _s3__PutObjectInline* _s3__PutObjectInline::soap_dup(soap*) returns deep copy of _s3__PutObjectInline, copies the (cyclic) graph structure when a context is provided, or (cycle-pruned) tree structure with soap_set_mode(soap, SOAP_XML_TREE) (use soapcpp2 -Ec)
/// - _s3__PutObjectInline::soap_del() deep deletes _s3__PutObjectInline data members, use only after _s3__PutObjectInline::soap_dup(NULL) (use soapcpp2 -Ed)
class _s3__PutObjectInline
{ public:
/// Element "Bucket" of XSD type xs:string.
    std::string                          Bucket                         1;	///< Required element.
/// Element "Key" of XSD type xs:string.
    std::string                          Key                            1;	///< Required element.
/// Vector of s3__MetadataEntry* of length 0..100.
    std::vector<s3__MetadataEntry*     > Metadata                       0:100;
/// Element "Data" of XSD type xs:base64Binary.
    xsd__base64Binary                    Data                           1;	///< Required element.
/// Element "ContentLength" of XSD type xs:long.
    LONG64                               ContentLength                  1;	///< Required element.
/// Element "AccessControlList" of XSD type "http://s3.amazonaws.com/doc/2006-03-01/":AccessControlList.
    s3__AccessControlList*               AccessControlList              0;	///< Optional element.
/// Element "StorageClass" of XSD type "http://s3.amazonaws.com/doc/2006-03-01/":StorageClass.
    enum s3__StorageClass*               StorageClass                   0;	///< Optional element.
/// Element "AWSAccessKeyId" of XSD type xs:string.
    std::string*                         AWSAccessKeyId                 0;	///< Optional element.
/// Element "Timestamp" of XSD type xs:dateTime.
    time_t*                              Timestamp                      0;	///< Optional element.
/// Element "Signature" of XSD type xs:string.
    std::string*                         Signature                      0;	///< Optional element.
/// Element "Credential" of XSD type xs:string.
    std::string*                         Credential                     0;	///< Optional element.
/// A handle to the soap struct context that manages this instance when instantiated by a context or NULL otherwise (automatically set).
    struct soap                         *soap                          ;
};

/// @brief Top-level root element "http://s3.amazonaws.com/doc/2006-03-01/":PutObjectInlineResponse
/// @brief "http://s3.amazonaws.com/doc/2006-03-01/":PutObjectInlineResponse is a complexType.
///
/// class _s3__PutObjectInlineResponse operations:
/// - _s3__PutObjectInlineResponse* soap_new__s3__PutObjectInlineResponse(soap*) allocate
/// - _s3__PutObjectInlineResponse* soap_new__s3__PutObjectInlineResponse(soap*, int num) allocate array
/// - _s3__PutObjectInlineResponse* soap_new_req__s3__PutObjectInlineResponse(soap*, ...) allocate, set required members
/// - _s3__PutObjectInlineResponse* soap_new_set__s3__PutObjectInlineResponse(soap*, ...) allocate, set all public members
/// - _s3__PutObjectInlineResponse::soap_default(soap*) reset members to default
/// - int soap_read__s3__PutObjectInlineResponse(soap*, _s3__PutObjectInlineResponse*) deserialize from a stream
/// - int soap_write__s3__PutObjectInlineResponse(soap*, _s3__PutObjectInlineResponse*) serialize to a stream
/// - _s3__PutObjectInlineResponse* _s3__PutObjectInlineResponse::soap_dup(soap*) returns deep copy of _s3__PutObjectInlineResponse, copies the (cyclic) graph structure when a context is provided, or (cycle-pruned) tree structure with soap_set_mode(soap, SOAP_XML_TREE) (use soapcpp2 -Ec)
/// - _s3__PutObjectInlineResponse::soap_del() deep deletes _s3__PutObjectInlineResponse data members, use only after _s3__PutObjectInlineResponse::soap_dup(NULL) (use soapcpp2 -Ed)
class _s3__PutObjectInlineResponse
{ public:
/// Element "PutObjectInlineResponse" of XSD type "http://s3.amazonaws.com/doc/2006-03-01/":PutObjectResult.
    s3__PutObjectResult*                 PutObjectInlineResponse        1;	///< Required element.
/// A handle to the soap struct context that manages this instance when instantiated by a context or NULL otherwise (automatically set).
    struct soap                         *soap                          ;
};

/// @brief Top-level root element "http://s3.amazonaws.com/doc/2006-03-01/":DeleteObject
/// @brief "http://s3.amazonaws.com/doc/2006-03-01/":DeleteObject is a complexType.
///
/// class _s3__DeleteObject operations:
/// - _s3__DeleteObject* soap_new__s3__DeleteObject(soap*) allocate
/// - _s3__DeleteObject* soap_new__s3__DeleteObject(soap*, int num) allocate array
/// - _s3__DeleteObject* soap_new_req__s3__DeleteObject(soap*, ...) allocate, set required members
/// - _s3__DeleteObject* soap_new_set__s3__DeleteObject(soap*, ...) allocate, set all public members
/// - _s3__DeleteObject::soap_default(soap*) reset members to default
/// - int soap_read__s3__DeleteObject(soap*, _s3__DeleteObject*) deserialize from a stream
/// - int soap_write__s3__DeleteObject(soap*, _s3__DeleteObject*) serialize to a stream
/// - _s3__DeleteObject* _s3__DeleteObject::soap_dup(soap*) returns deep copy of _s3__DeleteObject, copies the (cyclic) graph structure when a context is provided, or (cycle-pruned) tree structure with soap_set_mode(soap, SOAP_XML_TREE) (use soapcpp2 -Ec)
/// - _s3__DeleteObject::soap_del() deep deletes _s3__DeleteObject data members, use only after _s3__DeleteObject::soap_dup(NULL) (use soapcpp2 -Ed)
class _s3__DeleteObject
{ public:
/// Element "Bucket" of XSD type xs:string.
    std::string                          Bucket                         1;	///< Required element.
/// Element "Key" of XSD type xs:string.
    std::string                          Key                            1;	///< Required element.
/// Element "AWSAccessKeyId" of XSD type xs:string.
    std::string*                         AWSAccessKeyId                 0;	///< Optional element.
/// Element "Timestamp" of XSD type xs:dateTime.
    time_t*                              Timestamp                      0;	///< Optional element.
/// Element "Signature" of XSD type xs:string.
    std::string*                         Signature                      0;	///< Optional element.
/// Element "Credential" of XSD type xs:string.
    std::string*                         Credential                     0;	///< Optional element.
/// A handle to the soap struct context that manages this instance when instantiated by a context or NULL otherwise (automatically set).
    struct soap                         *soap                          ;
};

/// @brief Top-level root element "http://s3.amazonaws.com/doc/2006-03-01/":DeleteObjectResponse
/// @brief "http://s3.amazonaws.com/doc/2006-03-01/":DeleteObjectResponse is a complexType.
///
/// class _s3__DeleteObjectResponse operations:
/// - _s3__DeleteObjectResponse* soap_new__s3__DeleteObjectResponse(soap*) allocate
/// - _s3__DeleteObjectResponse* soap_new__s3__DeleteObjectResponse(soap*, int num) allocate array
/// - _s3__DeleteObjectResponse* soap_new_req__s3__DeleteObjectResponse(soap*, ...) allocate, set required members
/// - _s3__DeleteObjectResponse* soap_new_set__s3__DeleteObjectResponse(soap*, ...) allocate, set all public members
/// - _s3__DeleteObjectResponse::soap_default(soap*) reset members to default
/// - int soap_read__s3__DeleteObjectResponse(soap*, _s3__DeleteObjectResponse*) deserialize from a stream
/// - int soap_write__s3__DeleteObjectResponse(soap*, _s3__DeleteObjectResponse*) serialize to a stream
/// - _s3__DeleteObjectResponse* _s3__DeleteObjectResponse::soap_dup(soap*) returns deep copy of _s3__DeleteObjectResponse, copies the (cyclic) graph structure when a context is provided, or (cycle-pruned) tree structure with soap_set_mode(soap, SOAP_XML_TREE) (use soapcpp2 -Ec)
/// - _s3__DeleteObjectResponse::soap_del() deep deletes _s3__DeleteObjectResponse data members, use only after _s3__DeleteObjectResponse::soap_dup(NULL) (use soapcpp2 -Ed)
class _s3__DeleteObjectResponse
{ public:
/// Element "DeleteObjectResponse" of XSD type "http://s3.amazonaws.com/doc/2006-03-01/":Status.
    s3__Status*                          DeleteObjectResponse           1;	///< Required element.
/// A handle to the soap struct context that manages this instance when instantiated by a context or NULL otherwise (automatically set).
    struct soap                         *soap                          ;
};

/// @brief Top-level root element "http://s3.amazonaws.com/doc/2006-03-01/":ListBucket
/// @brief "http://s3.amazonaws.com/doc/2006-03-01/":ListBucket is a complexType.
///
/// class _s3__ListBucket operations:
/// - _s3__ListBucket* soap_new__s3__ListBucket(soap*) allocate
/// - _s3__ListBucket* soap_new__s3__ListBucket(soap*, int num) allocate array
/// - _s3__ListBucket* soap_new_req__s3__ListBucket(soap*, ...) allocate, set required members
/// - _s3__ListBucket* soap_new_set__s3__ListBucket(soap*, ...) allocate, set all public members
/// - _s3__ListBucket::soap_default(soap*) reset members to default
/// - int soap_read__s3__ListBucket(soap*, _s3__ListBucket*) deserialize from a stream
/// - int soap_write__s3__ListBucket(soap*, _s3__ListBucket*) serialize to a stream
/// - _s3__ListBucket* _s3__ListBucket::soap_dup(soap*) returns deep copy of _s3__ListBucket, copies the (cyclic) graph structure when a context is provided, or (cycle-pruned) tree structure with soap_set_mode(soap, SOAP_XML_TREE) (use soapcpp2 -Ec)
/// - _s3__ListBucket::soap_del() deep deletes _s3__ListBucket data members, use only after _s3__ListBucket::soap_dup(NULL) (use soapcpp2 -Ed)
class _s3__ListBucket
{ public:
/// Element "Bucket" of XSD type xs:string.
    std::string                          Bucket                         1;	///< Required element.
/// Element "Prefix" of XSD type xs:string.
    std::string*                         Prefix                         0;	///< Optional element.
/// Element "Marker" of XSD type xs:string.
    std::string*                         Marker                         0;	///< Optional element.
/// Element "MaxKeys" of XSD type xs:int.
    int*                                 MaxKeys                        0;	///< Optional element.
/// Element "Delimiter" of XSD type xs:string.
    std::string*                         Delimiter                      0;	///< Optional element.
/// Element "AWSAccessKeyId" of XSD type xs:string.
    std::string*                         AWSAccessKeyId                 0;	///< Optional element.
/// Element "Timestamp" of XSD type xs:dateTime.
    time_t*                              Timestamp                      0;	///< Optional element.
/// Element "Signature" of XSD type xs:string.
    std::string*                         Signature                      0;	///< Optional element.
/// Element "Credential" of XSD type xs:string.
    std::string*                         Credential                     0;	///< Optional element.
/// A handle to the soap struct context that manages this instance when instantiated by a context or NULL otherwise (automatically set).
    struct soap                         *soap                          ;
};

/// @brief Top-level root element "http://s3.amazonaws.com/doc/2006-03-01/":ListBucketResponse
/// @brief "http://s3.amazonaws.com/doc/2006-03-01/":ListBucketResponse is a complexType.
///
/// class _s3__ListBucketResponse operations:
/// - _s3__ListBucketResponse* soap_new__s3__ListBucketResponse(soap*) allocate
/// - _s3__ListBucketResponse* soap_new__s3__ListBucketResponse(soap*, int num) allocate array
/// - _s3__ListBucketResponse* soap_new_req__s3__ListBucketResponse(soap*, ...) allocate, set required members
/// - _s3__ListBucketResponse* soap_new_set__s3__ListBucketResponse(soap*, ...) allocate, set all public members
/// - _s3__ListBucketResponse::soap_default(soap*) reset members to default
/// - int soap_read__s3__ListBucketResponse(soap*, _s3__ListBucketResponse*) deserialize from a stream
/// - int soap_write__s3__ListBucketResponse(soap*, _s3__ListBucketResponse*) serialize to a stream
/// - _s3__ListBucketResponse* _s3__ListBucketResponse::soap_dup(soap*) returns deep copy of _s3__ListBucketResponse, copies the (cyclic) graph structure when a context is provided, or (cycle-pruned) tree structure with soap_set_mode(soap, SOAP_XML_TREE) (use soapcpp2 -Ec)
/// - _s3__ListBucketResponse::soap_del() deep deletes _s3__ListBucketResponse data members, use only after _s3__ListBucketResponse::soap_dup(NULL) (use soapcpp2 -Ed)
class _s3__ListBucketResponse
{ public:
/// Element "ListBucketResponse" of XSD type "http://s3.amazonaws.com/doc/2006-03-01/":ListBucketResult.
    s3__ListBucketResult*                ListBucketResponse             1;	///< Required element.
/// A handle to the soap struct context that manages this instance when instantiated by a context or NULL otherwise (automatically set).
    struct soap                         *soap                          ;
};

/// @brief Top-level root element "http://s3.amazonaws.com/doc/2006-03-01/":ListVersionsResponse
/// @brief "http://s3.amazonaws.com/doc/2006-03-01/":ListVersionsResponse is a complexType.
///
/// class _s3__ListVersionsResponse operations:
/// - _s3__ListVersionsResponse* soap_new__s3__ListVersionsResponse(soap*) allocate
/// - _s3__ListVersionsResponse* soap_new__s3__ListVersionsResponse(soap*, int num) allocate array
/// - _s3__ListVersionsResponse* soap_new_req__s3__ListVersionsResponse(soap*, ...) allocate, set required members
/// - _s3__ListVersionsResponse* soap_new_set__s3__ListVersionsResponse(soap*, ...) allocate, set all public members
/// - _s3__ListVersionsResponse::soap_default(soap*) reset members to default
/// - int soap_read__s3__ListVersionsResponse(soap*, _s3__ListVersionsResponse*) deserialize from a stream
/// - int soap_write__s3__ListVersionsResponse(soap*, _s3__ListVersionsResponse*) serialize to a stream
/// - _s3__ListVersionsResponse* _s3__ListVersionsResponse::soap_dup(soap*) returns deep copy of _s3__ListVersionsResponse, copies the (cyclic) graph structure when a context is provided, or (cycle-pruned) tree structure with soap_set_mode(soap, SOAP_XML_TREE) (use soapcpp2 -Ec)
/// - _s3__ListVersionsResponse::soap_del() deep deletes _s3__ListVersionsResponse data members, use only after _s3__ListVersionsResponse::soap_dup(NULL) (use soapcpp2 -Ed)
class _s3__ListVersionsResponse
{ public:
/// Element "ListVersionsResponse" of XSD type "http://s3.amazonaws.com/doc/2006-03-01/":ListVersionsResult.
    s3__ListVersionsResult*              ListVersionsResponse           1;	///< Required element.
/// A handle to the soap struct context that manages this instance when instantiated by a context or NULL otherwise (automatically set).
    struct soap                         *soap                          ;
};

/// @brief Top-level root element "http://s3.amazonaws.com/doc/2006-03-01/":ListAllMyBuckets
/// @brief "http://s3.amazonaws.com/doc/2006-03-01/":ListAllMyBuckets is a complexType.
///
/// class _s3__ListAllMyBuckets operations:
/// - _s3__ListAllMyBuckets* soap_new__s3__ListAllMyBuckets(soap*) allocate
/// - _s3__ListAllMyBuckets* soap_new__s3__ListAllMyBuckets(soap*, int num) allocate array
/// - _s3__ListAllMyBuckets* soap_new_req__s3__ListAllMyBuckets(soap*, ...) allocate, set required members
/// - _s3__ListAllMyBuckets* soap_new_set__s3__ListAllMyBuckets(soap*, ...) allocate, set all public members
/// - _s3__ListAllMyBuckets::soap_default(soap*) reset members to default
/// - int soap_read__s3__ListAllMyBuckets(soap*, _s3__ListAllMyBuckets*) deserialize from a stream
/// - int soap_write__s3__ListAllMyBuckets(soap*, _s3__ListAllMyBuckets*) serialize to a stream
/// - _s3__ListAllMyBuckets* _s3__ListAllMyBuckets::soap_dup(soap*) returns deep copy of _s3__ListAllMyBuckets, copies the (cyclic) graph structure when a context is provided, or (cycle-pruned) tree structure with soap_set_mode(soap, SOAP_XML_TREE) (use soapcpp2 -Ec)
/// - _s3__ListAllMyBuckets::soap_del() deep deletes _s3__ListAllMyBuckets data members, use only after _s3__ListAllMyBuckets::soap_dup(NULL) (use soapcpp2 -Ed)
class _s3__ListAllMyBuckets
{ public:
/// Element "AWSAccessKeyId" of XSD type xs:string.
    std::string*                         AWSAccessKeyId                 0;	///< Optional element.
/// Element "Timestamp" of XSD type xs:dateTime.
    time_t*                              Timestamp                      0;	///< Optional element.
/// Element "Signature" of XSD type xs:string.
    std::string*                         Signature                      0;	///< Optional element.
/// A handle to the soap struct context that manages this instance when instantiated by a context or NULL otherwise (automatically set).
    struct soap                         *soap                          ;
};

/// @brief Top-level root element "http://s3.amazonaws.com/doc/2006-03-01/":ListAllMyBucketsResponse
/// @brief "http://s3.amazonaws.com/doc/2006-03-01/":ListAllMyBucketsResponse is a complexType.
///
/// class _s3__ListAllMyBucketsResponse operations:
/// - _s3__ListAllMyBucketsResponse* soap_new__s3__ListAllMyBucketsResponse(soap*) allocate
/// - _s3__ListAllMyBucketsResponse* soap_new__s3__ListAllMyBucketsResponse(soap*, int num) allocate array
/// - _s3__ListAllMyBucketsResponse* soap_new_req__s3__ListAllMyBucketsResponse(soap*, ...) allocate, set required members
/// - _s3__ListAllMyBucketsResponse* soap_new_set__s3__ListAllMyBucketsResponse(soap*, ...) allocate, set all public members
/// - _s3__ListAllMyBucketsResponse::soap_default(soap*) reset members to default
/// - int soap_read__s3__ListAllMyBucketsResponse(soap*, _s3__ListAllMyBucketsResponse*) deserialize from a stream
/// - int soap_write__s3__ListAllMyBucketsResponse(soap*, _s3__ListAllMyBucketsResponse*) serialize to a stream
/// - _s3__ListAllMyBucketsResponse* _s3__ListAllMyBucketsResponse::soap_dup(soap*) returns deep copy of _s3__ListAllMyBucketsResponse, copies the (cyclic) graph structure when a context is provided, or (cycle-pruned) tree structure with soap_set_mode(soap, SOAP_XML_TREE) (use soapcpp2 -Ec)
/// - _s3__ListAllMyBucketsResponse::soap_del() deep deletes _s3__ListAllMyBucketsResponse data members, use only after _s3__ListAllMyBucketsResponse::soap_dup(NULL) (use soapcpp2 -Ed)
class _s3__ListAllMyBucketsResponse
{ public:
/// Element "ListAllMyBucketsResponse" of XSD type "http://s3.amazonaws.com/doc/2006-03-01/":ListAllMyBucketsResult.
    s3__ListAllMyBucketsResult*          ListAllMyBucketsResponse       1;	///< Required element.
/// A handle to the soap struct context that manages this instance when instantiated by a context or NULL otherwise (automatically set).
    struct soap                         *soap                          ;
};

/// @brief Top-level root element "http://s3.amazonaws.com/doc/2006-03-01/":PostResponse
/// @brief "http://s3.amazonaws.com/doc/2006-03-01/":PostResponse is a complexType.
///
/// class _s3__PostResponse operations:
/// - _s3__PostResponse* soap_new__s3__PostResponse(soap*) allocate
/// - _s3__PostResponse* soap_new__s3__PostResponse(soap*, int num) allocate array
/// - _s3__PostResponse* soap_new_req__s3__PostResponse(soap*, ...) allocate, set required members
/// - _s3__PostResponse* soap_new_set__s3__PostResponse(soap*, ...) allocate, set all public members
/// - _s3__PostResponse::soap_default(soap*) reset members to default
/// - int soap_read__s3__PostResponse(soap*, _s3__PostResponse*) deserialize from a stream
/// - int soap_write__s3__PostResponse(soap*, _s3__PostResponse*) serialize to a stream
/// - _s3__PostResponse* _s3__PostResponse::soap_dup(soap*) returns deep copy of _s3__PostResponse, copies the (cyclic) graph structure when a context is provided, or (cycle-pruned) tree structure with soap_set_mode(soap, SOAP_XML_TREE) (use soapcpp2 -Ec)
/// - _s3__PostResponse::soap_del() deep deletes _s3__PostResponse data members, use only after _s3__PostResponse::soap_dup(NULL) (use soapcpp2 -Ed)
class _s3__PostResponse
{ public:
/// Element "Location" of XSD type xs:anyURI.
    xsd__anyURI                          Location                       1;	///< Required element.
/// Element "Bucket" of XSD type xs:string.
    std::string                          Bucket                         1;	///< Required element.
/// Element "Key" of XSD type xs:string.
    std::string                          Key                            1;	///< Required element.
/// Element "ETag" of XSD type xs:string.
    std::string                          ETag                           1;	///< Required element.
/// A handle to the soap struct context that manages this instance when instantiated by a context or NULL otherwise (automatically set).
    struct soap                         *soap                          ;
};

/// @brief Top-level root element "http://s3.amazonaws.com/doc/2006-03-01/":CopyObject
/// @brief "http://s3.amazonaws.com/doc/2006-03-01/":CopyObject is a complexType.
///
/// class _s3__CopyObject operations:
/// - _s3__CopyObject* soap_new__s3__CopyObject(soap*) allocate
/// - _s3__CopyObject* soap_new__s3__CopyObject(soap*, int num) allocate array
/// - _s3__CopyObject* soap_new_req__s3__CopyObject(soap*, ...) allocate, set required members
/// - _s3__CopyObject* soap_new_set__s3__CopyObject(soap*, ...) allocate, set all public members
/// - _s3__CopyObject::soap_default(soap*) reset members to default
/// - int soap_read__s3__CopyObject(soap*, _s3__CopyObject*) deserialize from a stream
/// - int soap_write__s3__CopyObject(soap*, _s3__CopyObject*) serialize to a stream
/// - _s3__CopyObject* _s3__CopyObject::soap_dup(soap*) returns deep copy of _s3__CopyObject, copies the (cyclic) graph structure when a context is provided, or (cycle-pruned) tree structure with soap_set_mode(soap, SOAP_XML_TREE) (use soapcpp2 -Ec)
/// - _s3__CopyObject::soap_del() deep deletes _s3__CopyObject data members, use only after _s3__CopyObject::soap_dup(NULL) (use soapcpp2 -Ed)
class _s3__CopyObject
{ public:
/// Element "SourceBucket" of XSD type xs:string.
    std::string                          SourceBucket                   1;	///< Required element.
/// Element "SourceKey" of XSD type xs:string.
    std::string                          SourceKey                      1;	///< Required element.
/// Element "DestinationBucket" of XSD type xs:string.
    std::string                          DestinationBucket              1;	///< Required element.
/// Element "DestinationKey" of XSD type xs:string.
    std::string                          DestinationKey                 1;	///< Required element.
/// Element "MetadataDirective" of XSD type "http://s3.amazonaws.com/doc/2006-03-01/":MetadataDirective.
    enum s3__MetadataDirective*          MetadataDirective              0;	///< Optional element.
/// Vector of s3__MetadataEntry* of length 0..100.
    std::vector<s3__MetadataEntry*     > Metadata                       0:100;
/// Element "AccessControlList" of XSD type "http://s3.amazonaws.com/doc/2006-03-01/":AccessControlList.
    s3__AccessControlList*               AccessControlList              0;	///< Optional element.
/// Element "CopySourceIfModifiedSince" of XSD type xs:dateTime.
    time_t*                              CopySourceIfModifiedSince      0;	///< Optional element.
/// Element "CopySourceIfUnmodifiedSince" of XSD type xs:dateTime.
    time_t*                              CopySourceIfUnmodifiedSince    0;	///< Optional element.
/// Vector of std::string of length 0..100.
    std::vector<std::string            > CopySourceIfMatch              0:100;
/// Vector of std::string of length 0..100.
    std::vector<std::string            > CopySourceIfNoneMatch          0:100;
/// Element "StorageClass" of XSD type "http://s3.amazonaws.com/doc/2006-03-01/":StorageClass.
    enum s3__StorageClass*               StorageClass                   0;	///< Optional element.
/// Element "AWSAccessKeyId" of XSD type xs:string.
    std::string*                         AWSAccessKeyId                 0;	///< Optional element.
/// Element "Timestamp" of XSD type xs:dateTime.
    time_t*                              Timestamp                      0;	///< Optional element.
/// Element "Signature" of XSD type xs:string.
    std::string*                         Signature                      0;	///< Optional element.
/// Element "Credential" of XSD type xs:string.
    std::string*                         Credential                     0;	///< Optional element.
/// A handle to the soap struct context that manages this instance when instantiated by a context or NULL otherwise (automatically set).
    struct soap                         *soap                          ;
};

/// @brief Top-level root element "http://s3.amazonaws.com/doc/2006-03-01/":CopyObjectResponse
/// @brief "http://s3.amazonaws.com/doc/2006-03-01/":CopyObjectResponse is a complexType.
///
/// class _s3__CopyObjectResponse operations:
/// - _s3__CopyObjectResponse* soap_new__s3__CopyObjectResponse(soap*) allocate
/// - _s3__CopyObjectResponse* soap_new__s3__CopyObjectResponse(soap*, int num) allocate array
/// - _s3__CopyObjectResponse* soap_new_req__s3__CopyObjectResponse(soap*, ...) allocate, set required members
/// - _s3__CopyObjectResponse* soap_new_set__s3__CopyObjectResponse(soap*, ...) allocate, set all public members
/// - _s3__CopyObjectResponse::soap_default(soap*) reset members to default
/// - int soap_read__s3__CopyObjectResponse(soap*, _s3__CopyObjectResponse*) deserialize from a stream
/// - int soap_write__s3__CopyObjectResponse(soap*, _s3__CopyObjectResponse*) serialize to a stream
/// - _s3__CopyObjectResponse* _s3__CopyObjectResponse::soap_dup(soap*) returns deep copy of _s3__CopyObjectResponse, copies the (cyclic) graph structure when a context is provided, or (cycle-pruned) tree structure with soap_set_mode(soap, SOAP_XML_TREE) (use soapcpp2 -Ec)
/// - _s3__CopyObjectResponse::soap_del() deep deletes _s3__CopyObjectResponse data members, use only after _s3__CopyObjectResponse::soap_dup(NULL) (use soapcpp2 -Ed)
class _s3__CopyObjectResponse
{ public:
/// Element "CopyObjectResult" of XSD type "http://s3.amazonaws.com/doc/2006-03-01/":CopyObjectResult.
    s3__CopyObjectResult*                CopyObjectResult               1;	///< Required element.
/// A handle to the soap struct context that manages this instance when instantiated by a context or NULL otherwise (automatically set).
    struct soap                         *soap                          ;
};

/// @brief "http://s3.amazonaws.com/doc/2006-03-01/":User is an abstract complexType with complexContent extension of XSD type "http://s3.amazonaws.com/doc/2006-03-01/":Grantee.
///
/// class s3__User operations:
/// - s3__User* soap_new_s3__User(soap*) allocate
/// - s3__User* soap_new_s3__User(soap*, int num) allocate array
/// - s3__User* soap_new_req_s3__User(soap*, ...) allocate, set required members
/// - s3__User* soap_new_set_s3__User(soap*, ...) allocate, set all public members
/// - s3__User::soap_default(soap*) reset members to default
/// - int soap_read_s3__User(soap*, s3__User*) deserialize from a stream
/// - int soap_write_s3__User(soap*, s3__User*) serialize to a stream
/// - s3__User* s3__User::soap_dup(soap*) returns deep copy of s3__User, copies the (cyclic) graph structure when a context is provided, or (cycle-pruned) tree structure with soap_set_mode(soap, SOAP_XML_TREE) (use soapcpp2 -Ec)
/// - s3__User::soap_del() deep deletes s3__User data members, use only after s3__User::soap_dup(NULL) (use soapcpp2 -Ed)
class s3__User : public s3__Grantee
{ public:
/*  INHERITED FROM s3__Grantee:
    END OF INHERITED FROM s3__Grantee */
};

/// @brief "http://s3.amazonaws.com/doc/2006-03-01/":Group is a complexType with complexContent extension of XSD type "http://s3.amazonaws.com/doc/2006-03-01/":Grantee.
///
/// class s3__Group operations:
/// - s3__Group* soap_new_s3__Group(soap*) allocate
/// - s3__Group* soap_new_s3__Group(soap*, int num) allocate array
/// - s3__Group* soap_new_req_s3__Group(soap*, ...) allocate, set required members
/// - s3__Group* soap_new_set_s3__Group(soap*, ...) allocate, set all public members
/// - s3__Group::soap_default(soap*) reset members to default
/// - int soap_read_s3__Group(soap*, s3__Group*) deserialize from a stream
/// - int soap_write_s3__Group(soap*, s3__Group*) serialize to a stream
/// - s3__Group* s3__Group::soap_dup(soap*) returns deep copy of s3__Group, copies the (cyclic) graph structure when a context is provided, or (cycle-pruned) tree structure with soap_set_mode(soap, SOAP_XML_TREE) (use soapcpp2 -Ec)
/// - s3__Group::soap_del() deep deletes s3__Group data members, use only after s3__Group::soap_dup(NULL) (use soapcpp2 -Ed)
class s3__Group : public s3__Grantee
{ public:
/*  INHERITED FROM s3__Grantee:
    END OF INHERITED FROM s3__Grantee */
/// Element "URI" of XSD type xs:string.
    std::string                          URI                            1;	///< Required element.
};

/// @brief "http://s3.amazonaws.com/doc/2006-03-01/":LocationConstraint is a complexType with simpleContent.
///
/// class s3__LocationConstraint operations:
/// - s3__LocationConstraint* soap_new_s3__LocationConstraint(soap*) allocate
/// - s3__LocationConstraint* soap_new_s3__LocationConstraint(soap*, int num) allocate array
/// - s3__LocationConstraint* soap_new_req_s3__LocationConstraint(soap*, ...) allocate, set required members
/// - s3__LocationConstraint* soap_new_set_s3__LocationConstraint(soap*, ...) allocate, set all public members
/// - s3__LocationConstraint::soap_default(soap*) reset members to default
/// - int soap_read_s3__LocationConstraint(soap*, s3__LocationConstraint*) deserialize from a stream
/// - int soap_write_s3__LocationConstraint(soap*, s3__LocationConstraint*) serialize to a stream
/// - s3__LocationConstraint* s3__LocationConstraint::soap_dup(soap*) returns deep copy of s3__LocationConstraint, copies the (cyclic) graph structure when a context is provided, or (cycle-pruned) tree structure with soap_set_mode(soap, SOAP_XML_TREE) (use soapcpp2 -Ec)
/// - s3__LocationConstraint::soap_del() deep deletes s3__LocationConstraint data members, use only after s3__LocationConstraint::soap_dup(NULL) (use soapcpp2 -Ed)
class s3__LocationConstraint
{ public:
/// __item wraps "xs:string" simpleContent.
    std::string                          __item                        ;
/// A handle to the soap struct context that manages this instance when instantiated by a context or NULL otherwise (automatically set).
    struct soap                         *soap                          ;
};

/// @brief "http://s3.amazonaws.com/doc/2006-03-01/":GetObjectResult is a complexType with complexContent extension of XSD type "http://s3.amazonaws.com/doc/2006-03-01/":Result.
///
/// class s3__GetObjectResult operations:
/// - s3__GetObjectResult* soap_new_s3__GetObjectResult(soap*) allocate
/// - s3__GetObjectResult* soap_new_s3__GetObjectResult(soap*, int num) allocate array
/// - s3__GetObjectResult* soap_new_req_s3__GetObjectResult(soap*, ...) allocate, set required members
/// - s3__GetObjectResult* soap_new_set_s3__GetObjectResult(soap*, ...) allocate, set all public members
/// - s3__GetObjectResult::soap_default(soap*) reset members to default
/// - int soap_read_s3__GetObjectResult(soap*, s3__GetObjectResult*) deserialize from a stream
/// - int soap_write_s3__GetObjectResult(soap*, s3__GetObjectResult*) serialize to a stream
/// - s3__GetObjectResult* s3__GetObjectResult::soap_dup(soap*) returns deep copy of s3__GetObjectResult, copies the (cyclic) graph structure when a context is provided, or (cycle-pruned) tree structure with soap_set_mode(soap, SOAP_XML_TREE) (use soapcpp2 -Ec)
/// - s3__GetObjectResult::soap_del() deep deletes s3__GetObjectResult data members, use only after s3__GetObjectResult::soap_dup(NULL) (use soapcpp2 -Ed)
class s3__GetObjectResult : public s3__Result
{ public:
/*  INHERITED FROM s3__Result:
/// Element "Status" of XSD type "http://s3.amazonaws.com/doc/2006-03-01/":Status.
    s3__Status*                          Status                         1;	///< Required element.
    END OF INHERITED FROM s3__Result */
/// Vector of s3__MetadataEntry* of length 0..unbounded.
    std::vector<s3__MetadataEntry*     > Metadata                       0;
/// Element "Data" of XSD type xs:base64Binary.
    xsd__base64Binary*                   Data                           1;	///< Optional (xsi:nil when NULL) element.
/// Element "LastModified" of XSD type xs:dateTime.
    time_t                               LastModified                   1;	///< Required element.
/// Element "ETag" of XSD type xs:string.
    std::string                          ETag                           1;	///< Required element.
};

/// @brief "http://s3.amazonaws.com/doc/2006-03-01/":AmazonCustomerByEmail is a complexType with complexContent extension of XSD type "http://s3.amazonaws.com/doc/2006-03-01/":User.
///
/// class s3__AmazonCustomerByEmail operations:
/// - s3__AmazonCustomerByEmail* soap_new_s3__AmazonCustomerByEmail(soap*) allocate
/// - s3__AmazonCustomerByEmail* soap_new_s3__AmazonCustomerByEmail(soap*, int num) allocate array
/// - s3__AmazonCustomerByEmail* soap_new_req_s3__AmazonCustomerByEmail(soap*, ...) allocate, set required members
/// - s3__AmazonCustomerByEmail* soap_new_set_s3__AmazonCustomerByEmail(soap*, ...) allocate, set all public members
/// - s3__AmazonCustomerByEmail::soap_default(soap*) reset members to default
/// - int soap_read_s3__AmazonCustomerByEmail(soap*, s3__AmazonCustomerByEmail*) deserialize from a stream
/// - int soap_write_s3__AmazonCustomerByEmail(soap*, s3__AmazonCustomerByEmail*) serialize to a stream
/// - s3__AmazonCustomerByEmail* s3__AmazonCustomerByEmail::soap_dup(soap*) returns deep copy of s3__AmazonCustomerByEmail, copies the (cyclic) graph structure when a context is provided, or (cycle-pruned) tree structure with soap_set_mode(soap, SOAP_XML_TREE) (use soapcpp2 -Ec)
/// - s3__AmazonCustomerByEmail::soap_del() deep deletes s3__AmazonCustomerByEmail data members, use only after s3__AmazonCustomerByEmail::soap_dup(NULL) (use soapcpp2 -Ed)
class s3__AmazonCustomerByEmail : public s3__User
{ public:
/*  INHERITED FROM s3__Grantee:
    END OF INHERITED FROM s3__Grantee */
/*  INHERITED FROM s3__User:
    END OF INHERITED FROM s3__User */
/// Element "EmailAddress" of XSD type xs:string.
    std::string                          EmailAddress                   1;	///< Required element.
};

/// @brief "http://s3.amazonaws.com/doc/2006-03-01/":CanonicalUser is a complexType with complexContent extension of XSD type "http://s3.amazonaws.com/doc/2006-03-01/":User.
///
/// class s3__CanonicalUser operations:
/// - s3__CanonicalUser* soap_new_s3__CanonicalUser(soap*) allocate
/// - s3__CanonicalUser* soap_new_s3__CanonicalUser(soap*, int num) allocate array
/// - s3__CanonicalUser* soap_new_req_s3__CanonicalUser(soap*, ...) allocate, set required members
/// - s3__CanonicalUser* soap_new_set_s3__CanonicalUser(soap*, ...) allocate, set all public members
/// - s3__CanonicalUser::soap_default(soap*) reset members to default
/// - int soap_read_s3__CanonicalUser(soap*, s3__CanonicalUser*) deserialize from a stream
/// - int soap_write_s3__CanonicalUser(soap*, s3__CanonicalUser*) serialize to a stream
/// - s3__CanonicalUser* s3__CanonicalUser::soap_dup(soap*) returns deep copy of s3__CanonicalUser, copies the (cyclic) graph structure when a context is provided, or (cycle-pruned) tree structure with soap_set_mode(soap, SOAP_XML_TREE) (use soapcpp2 -Ec)
/// - s3__CanonicalUser::soap_del() deep deletes s3__CanonicalUser data members, use only after s3__CanonicalUser::soap_dup(NULL) (use soapcpp2 -Ed)
class s3__CanonicalUser : public s3__User
{ public:
/*  INHERITED FROM s3__Grantee:
    END OF INHERITED FROM s3__Grantee */
/*  INHERITED FROM s3__User:
    END OF INHERITED FROM s3__User */
/// Element "ID" of XSD type xs:string.
    std::string                          ID                             1;	///< Required element.
/// Element "DisplayName" of XSD type xs:string.
    std::string*                         DisplayName                    0;	///< Optional element.
};


/******************************************************************************\
 *                                                                            *
 * Additional Top-Level Elements                                              *
 *   http://s3.amazonaws.com/doc/2006-03-01/                                  *
 *                                                                            *
\******************************************************************************/


/******************************************************************************\
 *                                                                            *
 * Additional Top-Level Attributes                                            *
 *   http://s3.amazonaws.com/doc/2006-03-01/                                  *
 *                                                                            *
\******************************************************************************/


/******************************************************************************\
 *                                                                            *
 * Services                                                                   *
 *                                                                            *
\******************************************************************************/


//gsoap s3   service name:	AmazonS3SoapBinding AWS S3 SOAP API: code example located at http://www.genivia.com/files/aws-s3.cpp see also http://www.genivia.com/dev.html to learn more
//gsoap s3   service type:	AmazonS3 
//gsoap s3   service port:	https://s3.amazonaws.com/soap 
//gsoap s3   service namespace:	http://s3.amazonaws.com/doc/2006-03-01/ 
//gsoap s3   service transport:	http://schemas.xmlsoap.org/soap/http 

/** @mainpage Service Definitions

@section Service_bindings Service Bindings

  - @ref AmazonS3SoapBinding

@section Service_more More Information

  - @ref page_notes "Notes"

  - @ref page_XMLDataBinding "XML Data Binding"

  - @ref SOAP_ENV__Header "SOAP Header Content" (when applicable)

  - @ref SOAP_ENV__Detail "SOAP Fault Detail Content" (when applicable)


*/

/**

@page AmazonS3SoapBinding Binding "AmazonS3SoapBinding"

@section AmazonS3SoapBinding_operations Operations of Binding "AmazonS3SoapBinding"

  - @ref __s3__CreateBucket

  - @ref __s3__DeleteBucket

  - @ref __s3__GetObjectAccessControlPolicy

  - @ref __s3__GetBucketAccessControlPolicy

  - @ref __s3__SetObjectAccessControlPolicy

  - @ref __s3__SetBucketAccessControlPolicy

  - @ref __s3__GetObject

  - @ref __s3__GetObjectExtended

  - @ref __s3__PutObject

  - @ref __s3__PutObjectInline

  - @ref __s3__DeleteObject

  - @ref __s3__ListBucket

  - @ref __s3__ListAllMyBuckets

  - @ref __s3__SetBucketLoggingStatus

  - @ref __s3__GetBucketLoggingStatus

  - @ref __s3__CopyObject

@section AmazonS3SoapBinding_ports Endpoints of Binding "AmazonS3SoapBinding"

  - https://s3.amazonaws.com/soap

@note Use wsdl2h option -Nname to change the service binding prefix name


*/

/******************************************************************************\
 *                                                                            *
 * Service Binding                                                            *
 *   AmazonS3SoapBinding                                                      *
 *                                                                            *
\******************************************************************************/


/******************************************************************************\
 *                                                                            *
 * Service Operation                                                          *
 *   __s3__CreateBucket                                                       *
 *                                                                            *
\******************************************************************************/


/** Operation "__s3__CreateBucket" of service binding "AmazonS3SoapBinding".

  - SOAP document/literal style messaging

  - Addressing input action: ""

  - Addressing output action: "Response"

C stub function (defined in soapClient.c[pp] generated by soapcpp2):
@code
  int soap_call___s3__CreateBucket(
    struct soap *soap,
    NULL, // char *endpoint = NULL selects default endpoint for this operation
    NULL, // char *action = NULL selects default action for this operation
    // input parameters:
    _s3__CreateBucket*                  s3__CreateBucket,
    // output parameters:
    _s3__CreateBucketResponse          &s3__CreateBucketResponse
  );
@endcode

C server function (called from the service dispatcher defined in soapServer.c[pp]):
@code
  int __s3__CreateBucket(
    struct soap *soap,
    // input parameters:
    _s3__CreateBucket*                  s3__CreateBucket,
    // output parameters:
    _s3__CreateBucketResponse          &s3__CreateBucketResponse
  );
@endcode

C++ proxy class (defined in soapAmazonS3SoapBindingProxy.h):
@code
  class AmazonS3SoapBindingProxy;
@endcode
Important: use soapcpp2 option '-j' (or '-i') to generate improved and easy-to-use proxy classes;

C++ service class (defined in soapAmazonS3SoapBindingService.h):
@code
  class AmazonS3SoapBindingService;
@endcode
Important: use soapcpp2 option '-j' (or '-i') to generate improved and easy-to-use service classes;

*/

//gsoap s3   service method-protocol:	CreateBucket SOAP
//gsoap s3   service method-style:	CreateBucket document
//gsoap s3   service method-encoding:	CreateBucket literal
//gsoap s3   service method-action:	CreateBucket ""
//gsoap s3   service method-output-action:	CreateBucket Response
int __s3__CreateBucket(
    _s3__CreateBucket*                  s3__CreateBucket,	///< Input parameter
    _s3__CreateBucketResponse          &s3__CreateBucketResponse	///< Output parameter
);

/******************************************************************************\
 *                                                                            *
 * Service Operation                                                          *
 *   __s3__DeleteBucket                                                       *
 *                                                                            *
\******************************************************************************/


/** Operation "__s3__DeleteBucket" of service binding "AmazonS3SoapBinding".

  - SOAP document/literal style messaging

  - Addressing input action: ""

  - Addressing output action: "Response"

C stub function (defined in soapClient.c[pp] generated by soapcpp2):
@code
  int soap_call___s3__DeleteBucket(
    struct soap *soap,
    NULL, // char *endpoint = NULL selects default endpoint for this operation
    NULL, // char *action = NULL selects default action for this operation
    // input parameters:
    _s3__DeleteBucket*                  s3__DeleteBucket,
    // output parameters:
    _s3__DeleteBucketResponse          &s3__DeleteBucketResponse
  );
@endcode

C server function (called from the service dispatcher defined in soapServer.c[pp]):
@code
  int __s3__DeleteBucket(
    struct soap *soap,
    // input parameters:
    _s3__DeleteBucket*                  s3__DeleteBucket,
    // output parameters:
    _s3__DeleteBucketResponse          &s3__DeleteBucketResponse
  );
@endcode

C++ proxy class (defined in soapAmazonS3SoapBindingProxy.h):
@code
  class AmazonS3SoapBindingProxy;
@endcode
Important: use soapcpp2 option '-j' (or '-i') to generate improved and easy-to-use proxy classes;

C++ service class (defined in soapAmazonS3SoapBindingService.h):
@code
  class AmazonS3SoapBindingService;
@endcode
Important: use soapcpp2 option '-j' (or '-i') to generate improved and easy-to-use service classes;

*/

//gsoap s3   service method-protocol:	DeleteBucket SOAP
//gsoap s3   service method-style:	DeleteBucket document
//gsoap s3   service method-encoding:	DeleteBucket literal
//gsoap s3   service method-action:	DeleteBucket ""
//gsoap s3   service method-output-action:	DeleteBucket Response
int __s3__DeleteBucket(
    _s3__DeleteBucket*                  s3__DeleteBucket,	///< Input parameter
    _s3__DeleteBucketResponse          &s3__DeleteBucketResponse	///< Output parameter
);

/******************************************************************************\
 *                                                                            *
 * Service Operation                                                          *
 *   __s3__GetObjectAccessControlPolicy                                       *
 *                                                                            *
\******************************************************************************/


/** Operation "__s3__GetObjectAccessControlPolicy" of service binding "AmazonS3SoapBinding".

  - SOAP document/literal style messaging

  - Addressing input action: ""

  - Addressing output action: "Response"

C stub function (defined in soapClient.c[pp] generated by soapcpp2):
@code
  int soap_call___s3__GetObjectAccessControlPolicy(
    struct soap *soap,
    NULL, // char *endpoint = NULL selects default endpoint for this operation
    NULL, // char *action = NULL selects default action for this operation
    // input parameters:
    _s3__GetObjectAccessControlPolicy*  s3__GetObjectAccessControlPolicy,
    // output parameters:
    _s3__GetObjectAccessControlPolicyResponse&s3__GetObjectAccessControlPolicyResponse
  );
@endcode

C server function (called from the service dispatcher defined in soapServer.c[pp]):
@code
  int __s3__GetObjectAccessControlPolicy(
    struct soap *soap,
    // input parameters:
    _s3__GetObjectAccessControlPolicy*  s3__GetObjectAccessControlPolicy,
    // output parameters:
    _s3__GetObjectAccessControlPolicyResponse&s3__GetObjectAccessControlPolicyResponse
  );
@endcode

C++ proxy class (defined in soapAmazonS3SoapBindingProxy.h):
@code
  class AmazonS3SoapBindingProxy;
@endcode
Important: use soapcpp2 option '-j' (or '-i') to generate improved and easy-to-use proxy classes;

C++ service class (defined in soapAmazonS3SoapBindingService.h):
@code
  class AmazonS3SoapBindingService;
@endcode
Important: use soapcpp2 option '-j' (or '-i') to generate improved and easy-to-use service classes;

*/

//gsoap s3   service method-protocol:	GetObjectAccessControlPolicy SOAP
//gsoap s3   service method-style:	GetObjectAccessControlPolicy document
//gsoap s3   service method-encoding:	GetObjectAccessControlPolicy literal
//gsoap s3   service method-action:	GetObjectAccessControlPolicy ""
//gsoap s3   service method-output-action:	GetObjectAccessControlPolicy Response
int __s3__GetObjectAccessControlPolicy(
    _s3__GetObjectAccessControlPolicy*  s3__GetObjectAccessControlPolicy,	///< Input parameter
    _s3__GetObjectAccessControlPolicyResponse&s3__GetObjectAccessControlPolicyResponse	///< Output parameter
);

/******************************************************************************\
 *                                                                            *
 * Service Operation                                                          *
 *   __s3__GetBucketAccessControlPolicy                                       *
 *                                                                            *
\******************************************************************************/


/** Operation "__s3__GetBucketAccessControlPolicy" of service binding "AmazonS3SoapBinding".

  - SOAP document/literal style messaging

  - Addressing input action: ""

  - Addressing output action: "Response"

C stub function (defined in soapClient.c[pp] generated by soapcpp2):
@code
  int soap_call___s3__GetBucketAccessControlPolicy(
    struct soap *soap,
    NULL, // char *endpoint = NULL selects default endpoint for this operation
    NULL, // char *action = NULL selects default action for this operation
    // input parameters:
    _s3__GetBucketAccessControlPolicy*  s3__GetBucketAccessControlPolicy,
    // output parameters:
    _s3__GetBucketAccessControlPolicyResponse&s3__GetBucketAccessControlPolicyResponse
  );
@endcode

C server function (called from the service dispatcher defined in soapServer.c[pp]):
@code
  int __s3__GetBucketAccessControlPolicy(
    struct soap *soap,
    // input parameters:
    _s3__GetBucketAccessControlPolicy*  s3__GetBucketAccessControlPolicy,
    // output parameters:
    _s3__GetBucketAccessControlPolicyResponse&s3__GetBucketAccessControlPolicyResponse
  );
@endcode

C++ proxy class (defined in soapAmazonS3SoapBindingProxy.h):
@code
  class AmazonS3SoapBindingProxy;
@endcode
Important: use soapcpp2 option '-j' (or '-i') to generate improved and easy-to-use proxy classes;

C++ service class (defined in soapAmazonS3SoapBindingService.h):
@code
  class AmazonS3SoapBindingService;
@endcode
Important: use soapcpp2 option '-j' (or '-i') to generate improved and easy-to-use service classes;

*/

//gsoap s3   service method-protocol:	GetBucketAccessControlPolicy SOAP
//gsoap s3   service method-style:	GetBucketAccessControlPolicy document
//gsoap s3   service method-encoding:	GetBucketAccessControlPolicy literal
//gsoap s3   service method-action:	GetBucketAccessControlPolicy ""
//gsoap s3   service method-output-action:	GetBucketAccessControlPolicy Response
int __s3__GetBucketAccessControlPolicy(
    _s3__GetBucketAccessControlPolicy*  s3__GetBucketAccessControlPolicy,	///< Input parameter
    _s3__GetBucketAccessControlPolicyResponse&s3__GetBucketAccessControlPolicyResponse	///< Output parameter
);

/******************************************************************************\
 *                                                                            *
 * Service Operation                                                          *
 *   __s3__SetObjectAccessControlPolicy                                       *
 *                                                                            *
\******************************************************************************/


/** Operation "__s3__SetObjectAccessControlPolicy" of service binding "AmazonS3SoapBinding".

  - SOAP document/literal style messaging

  - Addressing input action: ""

  - Addressing output action: "Response"

C stub function (defined in soapClient.c[pp] generated by soapcpp2):
@code
  int soap_call___s3__SetObjectAccessControlPolicy(
    struct soap *soap,
    NULL, // char *endpoint = NULL selects default endpoint for this operation
    NULL, // char *action = NULL selects default action for this operation
    // input parameters:
    _s3__SetObjectAccessControlPolicy*  s3__SetObjectAccessControlPolicy,
    // output parameters:
    _s3__SetObjectAccessControlPolicyResponse&s3__SetObjectAccessControlPolicyResponse
  );
@endcode

C server function (called from the service dispatcher defined in soapServer.c[pp]):
@code
  int __s3__SetObjectAccessControlPolicy(
    struct soap *soap,
    // input parameters:
    _s3__SetObjectAccessControlPolicy*  s3__SetObjectAccessControlPolicy,
    // output parameters:
    _s3__SetObjectAccessControlPolicyResponse&s3__SetObjectAccessControlPolicyResponse
  );
@endcode

C++ proxy class (defined in soapAmazonS3SoapBindingProxy.h):
@code
  class AmazonS3SoapBindingProxy;
@endcode
Important: use soapcpp2 option '-j' (or '-i') to generate improved and easy-to-use proxy classes;

C++ service class (defined in soapAmazonS3SoapBindingService.h):
@code
  class AmazonS3SoapBindingService;
@endcode
Important: use soapcpp2 option '-j' (or '-i') to generate improved and easy-to-use service classes;

*/

//gsoap s3   service method-protocol:	SetObjectAccessControlPolicy SOAP
//gsoap s3   service method-style:	SetObjectAccessControlPolicy document
//gsoap s3   service method-encoding:	SetObjectAccessControlPolicy literal
//gsoap s3   service method-action:	SetObjectAccessControlPolicy ""
//gsoap s3   service method-output-action:	SetObjectAccessControlPolicy Response
int __s3__SetObjectAccessControlPolicy(
    _s3__SetObjectAccessControlPolicy*  s3__SetObjectAccessControlPolicy,	///< Input parameter
    _s3__SetObjectAccessControlPolicyResponse&s3__SetObjectAccessControlPolicyResponse	///< Output parameter
);

/******************************************************************************\
 *                                                                            *
 * Service Operation                                                          *
 *   __s3__SetBucketAccessControlPolicy                                       *
 *                                                                            *
\******************************************************************************/


/** Operation "__s3__SetBucketAccessControlPolicy" of service binding "AmazonS3SoapBinding".

  - SOAP document/literal style messaging

  - Addressing input action: ""

  - Addressing output action: "Response"

C stub function (defined in soapClient.c[pp] generated by soapcpp2):
@code
  int soap_call___s3__SetBucketAccessControlPolicy(
    struct soap *soap,
    NULL, // char *endpoint = NULL selects default endpoint for this operation
    NULL, // char *action = NULL selects default action for this operation
    // input parameters:
    _s3__SetBucketAccessControlPolicy*  s3__SetBucketAccessControlPolicy,
    // output parameters:
    _s3__SetBucketAccessControlPolicyResponse&s3__SetBucketAccessControlPolicyResponse
  );
@endcode

C server function (called from the service dispatcher defined in soapServer.c[pp]):
@code
  int __s3__SetBucketAccessControlPolicy(
    struct soap *soap,
    // input parameters:
    _s3__SetBucketAccessControlPolicy*  s3__SetBucketAccessControlPolicy,
    // output parameters:
    _s3__SetBucketAccessControlPolicyResponse&s3__SetBucketAccessControlPolicyResponse
  );
@endcode

C++ proxy class (defined in soapAmazonS3SoapBindingProxy.h):
@code
  class AmazonS3SoapBindingProxy;
@endcode
Important: use soapcpp2 option '-j' (or '-i') to generate improved and easy-to-use proxy classes;

C++ service class (defined in soapAmazonS3SoapBindingService.h):
@code
  class AmazonS3SoapBindingService;
@endcode
Important: use soapcpp2 option '-j' (or '-i') to generate improved and easy-to-use service classes;

*/

//gsoap s3   service method-protocol:	SetBucketAccessControlPolicy SOAP
//gsoap s3   service method-style:	SetBucketAccessControlPolicy document
//gsoap s3   service method-encoding:	SetBucketAccessControlPolicy literal
//gsoap s3   service method-action:	SetBucketAccessControlPolicy ""
//gsoap s3   service method-output-action:	SetBucketAccessControlPolicy Response
int __s3__SetBucketAccessControlPolicy(
    _s3__SetBucketAccessControlPolicy*  s3__SetBucketAccessControlPolicy,	///< Input parameter
    _s3__SetBucketAccessControlPolicyResponse&s3__SetBucketAccessControlPolicyResponse	///< Output parameter
);

/******************************************************************************\
 *                                                                            *
 * Service Operation                                                          *
 *   __s3__GetObject                                                          *
 *                                                                            *
\******************************************************************************/


/** Operation "__s3__GetObject" of service binding "AmazonS3SoapBinding".

  - SOAP document/literal style messaging

  - Addressing input action: ""

  - Addressing output action: "Response"

C stub function (defined in soapClient.c[pp] generated by soapcpp2):
@code
  int soap_call___s3__GetObject(
    struct soap *soap,
    NULL, // char *endpoint = NULL selects default endpoint for this operation
    NULL, // char *action = NULL selects default action for this operation
    // input parameters:
    _s3__GetObject*                     s3__GetObject,
    // output parameters:
    _s3__GetObjectResponse             &s3__GetObjectResponse
  );
@endcode

C server function (called from the service dispatcher defined in soapServer.c[pp]):
@code
  int __s3__GetObject(
    struct soap *soap,
    // input parameters:
    _s3__GetObject*                     s3__GetObject,
    // output parameters:
    _s3__GetObjectResponse             &s3__GetObjectResponse
  );
@endcode

C++ proxy class (defined in soapAmazonS3SoapBindingProxy.h):
@code
  class AmazonS3SoapBindingProxy;
@endcode
Important: use soapcpp2 option '-j' (or '-i') to generate improved and easy-to-use proxy classes;

C++ service class (defined in soapAmazonS3SoapBindingService.h):
@code
  class AmazonS3SoapBindingService;
@endcode
Important: use soapcpp2 option '-j' (or '-i') to generate improved and easy-to-use service classes;

*/

//gsoap s3   service method-protocol:	GetObject SOAP
//gsoap s3   service method-style:	GetObject document
//gsoap s3   service method-encoding:	GetObject literal
//gsoap s3   service method-action:	GetObject ""
//gsoap s3   service method-output-action:	GetObject Response
int __s3__GetObject(
    _s3__GetObject*                     s3__GetObject,	///< Input parameter
    _s3__GetObjectResponse             &s3__GetObjectResponse	///< Output parameter
);

/******************************************************************************\
 *                                                                            *
 * Service Operation                                                          *
 *   __s3__GetObjectExtended                                                  *
 *                                                                            *
\******************************************************************************/


/** Operation "__s3__GetObjectExtended" of service binding "AmazonS3SoapBinding".

  - SOAP document/literal style messaging

  - Addressing input action: ""

  - Addressing output action: "Response"

C stub function (defined in soapClient.c[pp] generated by soapcpp2):
@code
  int soap_call___s3__GetObjectExtended(
    struct soap *soap,
    NULL, // char *endpoint = NULL selects default endpoint for this operation
    NULL, // char *action = NULL selects default action for this operation
    // input parameters:
    _s3__GetObjectExtended*             s3__GetObjectExtended,
    // output parameters:
    _s3__GetObjectExtendedResponse     &s3__GetObjectExtendedResponse
  );
@endcode

C server function (called from the service dispatcher defined in soapServer.c[pp]):
@code
  int __s3__GetObjectExtended(
    struct soap *soap,
    // input parameters:
    _s3__GetObjectExtended*             s3__GetObjectExtended,
    // output parameters:
    _s3__GetObjectExtendedResponse     &s3__GetObjectExtendedResponse
  );
@endcode

C++ proxy class (defined in soapAmazonS3SoapBindingProxy.h):
@code
  class AmazonS3SoapBindingProxy;
@endcode
Important: use soapcpp2 option '-j' (or '-i') to generate improved and easy-to-use proxy classes;

C++ service class (defined in soapAmazonS3SoapBindingService.h):
@code
  class AmazonS3SoapBindingService;
@endcode
Important: use soapcpp2 option '-j' (or '-i') to generate improved and easy-to-use service classes;

*/

//gsoap s3   service method-protocol:	GetObjectExtended SOAP
//gsoap s3   service method-style:	GetObjectExtended document
//gsoap s3   service method-encoding:	GetObjectExtended literal
//gsoap s3   service method-action:	GetObjectExtended ""
//gsoap s3   service method-output-action:	GetObjectExtended Response
int __s3__GetObjectExtended(
    _s3__GetObjectExtended*             s3__GetObjectExtended,	///< Input parameter
    _s3__GetObjectExtendedResponse     &s3__GetObjectExtendedResponse	///< Output parameter
);

/******************************************************************************\
 *                                                                            *
 * Service Operation                                                          *
 *   __s3__PutObject                                                          *
 *                                                                            *
\******************************************************************************/


/** Operation "__s3__PutObject" of service binding "AmazonS3SoapBinding".

  - SOAP document/literal style messaging

  - Addressing input action: ""

  - Addressing output action: "Response"

C stub function (defined in soapClient.c[pp] generated by soapcpp2):
@code
  int soap_call___s3__PutObject(
    struct soap *soap,
    NULL, // char *endpoint = NULL selects default endpoint for this operation
    NULL, // char *action = NULL selects default action for this operation
    // input parameters:
    _s3__PutObject*                     s3__PutObject,
    // output parameters:
    _s3__PutObjectResponse             &s3__PutObjectResponse
  );
@endcode

C server function (called from the service dispatcher defined in soapServer.c[pp]):
@code
  int __s3__PutObject(
    struct soap *soap,
    // input parameters:
    _s3__PutObject*                     s3__PutObject,
    // output parameters:
    _s3__PutObjectResponse             &s3__PutObjectResponse
  );
@endcode

C++ proxy class (defined in soapAmazonS3SoapBindingProxy.h):
@code
  class AmazonS3SoapBindingProxy;
@endcode
Important: use soapcpp2 option '-j' (or '-i') to generate improved and easy-to-use proxy classes;

C++ service class (defined in soapAmazonS3SoapBindingService.h):
@code
  class AmazonS3SoapBindingService;
@endcode
Important: use soapcpp2 option '-j' (or '-i') to generate improved and easy-to-use service classes;

*/

//gsoap s3   service method-protocol:	PutObject SOAP
//gsoap s3   service method-style:	PutObject document
//gsoap s3   service method-encoding:	PutObject literal
//gsoap s3   service method-action:	PutObject ""
//gsoap s3   service method-output-action:	PutObject Response
int __s3__PutObject(
    _s3__PutObject*                     s3__PutObject,	///< Input parameter
    _s3__PutObjectResponse             &s3__PutObjectResponse	///< Output parameter
);

/******************************************************************************\
 *                                                                            *
 * Service Operation                                                          *
 *   __s3__PutObjectInline                                                    *
 *                                                                            *
\******************************************************************************/


/** Operation "__s3__PutObjectInline" of service binding "AmazonS3SoapBinding".

  - SOAP document/literal style messaging

  - Addressing input action: ""

  - Addressing output action: "Response"

C stub function (defined in soapClient.c[pp] generated by soapcpp2):
@code
  int soap_call___s3__PutObjectInline(
    struct soap *soap,
    NULL, // char *endpoint = NULL selects default endpoint for this operation
    NULL, // char *action = NULL selects default action for this operation
    // input parameters:
    _s3__PutObjectInline*               s3__PutObjectInline,
    // output parameters:
    _s3__PutObjectInlineResponse       &s3__PutObjectInlineResponse
  );
@endcode

C server function (called from the service dispatcher defined in soapServer.c[pp]):
@code
  int __s3__PutObjectInline(
    struct soap *soap,
    // input parameters:
    _s3__PutObjectInline*               s3__PutObjectInline,
    // output parameters:
    _s3__PutObjectInlineResponse       &s3__PutObjectInlineResponse
  );
@endcode

C++ proxy class (defined in soapAmazonS3SoapBindingProxy.h):
@code
  class AmazonS3SoapBindingProxy;
@endcode
Important: use soapcpp2 option '-j' (or '-i') to generate improved and easy-to-use proxy classes;

C++ service class (defined in soapAmazonS3SoapBindingService.h):
@code
  class AmazonS3SoapBindingService;
@endcode
Important: use soapcpp2 option '-j' (or '-i') to generate improved and easy-to-use service classes;

*/

//gsoap s3   service method-protocol:	PutObjectInline SOAP
//gsoap s3   service method-style:	PutObjectInline document
//gsoap s3   service method-encoding:	PutObjectInline literal
//gsoap s3   service method-action:	PutObjectInline ""
//gsoap s3   service method-output-action:	PutObjectInline Response
int __s3__PutObjectInline(
    _s3__PutObjectInline*               s3__PutObjectInline,	///< Input parameter
    _s3__PutObjectInlineResponse       &s3__PutObjectInlineResponse	///< Output parameter
);

/******************************************************************************\
 *                                                                            *
 * Service Operation                                                          *
 *   __s3__DeleteObject                                                       *
 *                                                                            *
\******************************************************************************/


/** Operation "__s3__DeleteObject" of service binding "AmazonS3SoapBinding".

  - SOAP document/literal style messaging

  - Addressing input action: ""

  - Addressing output action: "Response"

C stub function (defined in soapClient.c[pp] generated by soapcpp2):
@code
  int soap_call___s3__DeleteObject(
    struct soap *soap,
    NULL, // char *endpoint = NULL selects default endpoint for this operation
    NULL, // char *action = NULL selects default action for this operation
    // input parameters:
    _s3__DeleteObject*                  s3__DeleteObject,
    // output parameters:
    _s3__DeleteObjectResponse          &s3__DeleteObjectResponse
  );
@endcode

C server function (called from the service dispatcher defined in soapServer.c[pp]):
@code
  int __s3__DeleteObject(
    struct soap *soap,
    // input parameters:
    _s3__DeleteObject*                  s3__DeleteObject,
    // output parameters:
    _s3__DeleteObjectResponse          &s3__DeleteObjectResponse
  );
@endcode

C++ proxy class (defined in soapAmazonS3SoapBindingProxy.h):
@code
  class AmazonS3SoapBindingProxy;
@endcode
Important: use soapcpp2 option '-j' (or '-i') to generate improved and easy-to-use proxy classes;

C++ service class (defined in soapAmazonS3SoapBindingService.h):
@code
  class AmazonS3SoapBindingService;
@endcode
Important: use soapcpp2 option '-j' (or '-i') to generate improved and easy-to-use service classes;

*/

//gsoap s3   service method-protocol:	DeleteObject SOAP
//gsoap s3   service method-style:	DeleteObject document
//gsoap s3   service method-encoding:	DeleteObject literal
//gsoap s3   service method-action:	DeleteObject ""
//gsoap s3   service method-output-action:	DeleteObject Response
int __s3__DeleteObject(
    _s3__DeleteObject*                  s3__DeleteObject,	///< Input parameter
    _s3__DeleteObjectResponse          &s3__DeleteObjectResponse	///< Output parameter
);

/******************************************************************************\
 *                                                                            *
 * Service Operation                                                          *
 *   __s3__ListBucket                                                         *
 *                                                                            *
\******************************************************************************/


/** Operation "__s3__ListBucket" of service binding "AmazonS3SoapBinding".

  - SOAP document/literal style messaging

  - Addressing input action: ""

  - Addressing output action: "Response"

C stub function (defined in soapClient.c[pp] generated by soapcpp2):
@code
  int soap_call___s3__ListBucket(
    struct soap *soap,
    NULL, // char *endpoint = NULL selects default endpoint for this operation
    NULL, // char *action = NULL selects default action for this operation
    // input parameters:
    _s3__ListBucket*                    s3__ListBucket,
    // output parameters:
    _s3__ListBucketResponse            &s3__ListBucketResponse
  );
@endcode

C server function (called from the service dispatcher defined in soapServer.c[pp]):
@code
  int __s3__ListBucket(
    struct soap *soap,
    // input parameters:
    _s3__ListBucket*                    s3__ListBucket,
    // output parameters:
    _s3__ListBucketResponse            &s3__ListBucketResponse
  );
@endcode

C++ proxy class (defined in soapAmazonS3SoapBindingProxy.h):
@code
  class AmazonS3SoapBindingProxy;
@endcode
Important: use soapcpp2 option '-j' (or '-i') to generate improved and easy-to-use proxy classes;

C++ service class (defined in soapAmazonS3SoapBindingService.h):
@code
  class AmazonS3SoapBindingService;
@endcode
Important: use soapcpp2 option '-j' (or '-i') to generate improved and easy-to-use service classes;

*/

//gsoap s3   service method-protocol:	ListBucket SOAP
//gsoap s3   service method-style:	ListBucket document
//gsoap s3   service method-encoding:	ListBucket literal
//gsoap s3   service method-action:	ListBucket ""
//gsoap s3   service method-output-action:	ListBucket Response
int __s3__ListBucket(
    _s3__ListBucket*                    s3__ListBucket,	///< Input parameter
    _s3__ListBucketResponse            &s3__ListBucketResponse	///< Output parameter
);

/******************************************************************************\
 *                                                                            *
 * Service Operation                                                          *
 *   __s3__ListAllMyBuckets                                                   *
 *                                                                            *
\******************************************************************************/


/** Operation "__s3__ListAllMyBuckets" of service binding "AmazonS3SoapBinding".

  - SOAP document/literal style messaging

  - Addressing input action: ""

  - Addressing output action: "Response"

C stub function (defined in soapClient.c[pp] generated by soapcpp2):
@code
  int soap_call___s3__ListAllMyBuckets(
    struct soap *soap,
    NULL, // char *endpoint = NULL selects default endpoint for this operation
    NULL, // char *action = NULL selects default action for this operation
    // input parameters:
    _s3__ListAllMyBuckets*              s3__ListAllMyBuckets,
    // output parameters:
    _s3__ListAllMyBucketsResponse      &s3__ListAllMyBucketsResponse
  );
@endcode

C server function (called from the service dispatcher defined in soapServer.c[pp]):
@code
  int __s3__ListAllMyBuckets(
    struct soap *soap,
    // input parameters:
    _s3__ListAllMyBuckets*              s3__ListAllMyBuckets,
    // output parameters:
    _s3__ListAllMyBucketsResponse      &s3__ListAllMyBucketsResponse
  );
@endcode

C++ proxy class (defined in soapAmazonS3SoapBindingProxy.h):
@code
  class AmazonS3SoapBindingProxy;
@endcode
Important: use soapcpp2 option '-j' (or '-i') to generate improved and easy-to-use proxy classes;

C++ service class (defined in soapAmazonS3SoapBindingService.h):
@code
  class AmazonS3SoapBindingService;
@endcode
Important: use soapcpp2 option '-j' (or '-i') to generate improved and easy-to-use service classes;

*/

//gsoap s3   service method-protocol:	ListAllMyBuckets SOAP
//gsoap s3   service method-style:	ListAllMyBuckets document
//gsoap s3   service method-encoding:	ListAllMyBuckets literal
//gsoap s3   service method-action:	ListAllMyBuckets ""
//gsoap s3   service method-output-action:	ListAllMyBuckets Response
int __s3__ListAllMyBuckets(
    _s3__ListAllMyBuckets*              s3__ListAllMyBuckets,	///< Input parameter
    _s3__ListAllMyBucketsResponse      &s3__ListAllMyBucketsResponse	///< Output parameter
);

/******************************************************************************\
 *                                                                            *
 * Service Operation                                                          *
 *   __s3__SetBucketLoggingStatus                                             *
 *                                                                            *
\******************************************************************************/


/** Operation "__s3__SetBucketLoggingStatus" of service binding "AmazonS3SoapBinding".

  - SOAP document/literal style messaging

  - Addressing input action: ""

  - Addressing output action: "Response"

C stub function (defined in soapClient.c[pp] generated by soapcpp2):
@code
  int soap_call___s3__SetBucketLoggingStatus(
    struct soap *soap,
    NULL, // char *endpoint = NULL selects default endpoint for this operation
    NULL, // char *action = NULL selects default action for this operation
    // input parameters:
    _s3__SetBucketLoggingStatus*        s3__SetBucketLoggingStatus,
    // output parameters:
    _s3__SetBucketLoggingStatusResponse&s3__SetBucketLoggingStatusResponse
  );
@endcode

C server function (called from the service dispatcher defined in soapServer.c[pp]):
@code
  int __s3__SetBucketLoggingStatus(
    struct soap *soap,
    // input parameters:
    _s3__SetBucketLoggingStatus*        s3__SetBucketLoggingStatus,
    // output parameters:
    _s3__SetBucketLoggingStatusResponse&s3__SetBucketLoggingStatusResponse
  );
@endcode

C++ proxy class (defined in soapAmazonS3SoapBindingProxy.h):
@code
  class AmazonS3SoapBindingProxy;
@endcode
Important: use soapcpp2 option '-j' (or '-i') to generate improved and easy-to-use proxy classes;

C++ service class (defined in soapAmazonS3SoapBindingService.h):
@code
  class AmazonS3SoapBindingService;
@endcode
Important: use soapcpp2 option '-j' (or '-i') to generate improved and easy-to-use service classes;

*/

//gsoap s3   service method-protocol:	SetBucketLoggingStatus SOAP
//gsoap s3   service method-style:	SetBucketLoggingStatus document
//gsoap s3   service method-encoding:	SetBucketLoggingStatus literal
//gsoap s3   service method-action:	SetBucketLoggingStatus ""
//gsoap s3   service method-output-action:	SetBucketLoggingStatus Response
int __s3__SetBucketLoggingStatus(
    _s3__SetBucketLoggingStatus*        s3__SetBucketLoggingStatus,	///< Input parameter
    _s3__SetBucketLoggingStatusResponse&s3__SetBucketLoggingStatusResponse	///< Output parameter
);

/******************************************************************************\
 *                                                                            *
 * Service Operation                                                          *
 *   __s3__GetBucketLoggingStatus                                             *
 *                                                                            *
\******************************************************************************/


/** Operation "__s3__GetBucketLoggingStatus" of service binding "AmazonS3SoapBinding".

  - SOAP document/literal style messaging

  - Addressing input action: ""

  - Addressing output action: "Response"

C stub function (defined in soapClient.c[pp] generated by soapcpp2):
@code
  int soap_call___s3__GetBucketLoggingStatus(
    struct soap *soap,
    NULL, // char *endpoint = NULL selects default endpoint for this operation
    NULL, // char *action = NULL selects default action for this operation
    // input parameters:
    _s3__GetBucketLoggingStatus*        s3__GetBucketLoggingStatus,
    // output parameters:
    _s3__GetBucketLoggingStatusResponse&s3__GetBucketLoggingStatusResponse
  );
@endcode

C server function (called from the service dispatcher defined in soapServer.c[pp]):
@code
  int __s3__GetBucketLoggingStatus(
    struct soap *soap,
    // input parameters:
    _s3__GetBucketLoggingStatus*        s3__GetBucketLoggingStatus,
    // output parameters:
    _s3__GetBucketLoggingStatusResponse&s3__GetBucketLoggingStatusResponse
  );
@endcode

C++ proxy class (defined in soapAmazonS3SoapBindingProxy.h):
@code
  class AmazonS3SoapBindingProxy;
@endcode
Important: use soapcpp2 option '-j' (or '-i') to generate improved and easy-to-use proxy classes;

C++ service class (defined in soapAmazonS3SoapBindingService.h):
@code
  class AmazonS3SoapBindingService;
@endcode
Important: use soapcpp2 option '-j' (or '-i') to generate improved and easy-to-use service classes;

*/

//gsoap s3   service method-protocol:	GetBucketLoggingStatus SOAP
//gsoap s3   service method-style:	GetBucketLoggingStatus document
//gsoap s3   service method-encoding:	GetBucketLoggingStatus literal
//gsoap s3   service method-action:	GetBucketLoggingStatus ""
//gsoap s3   service method-output-action:	GetBucketLoggingStatus Response
int __s3__GetBucketLoggingStatus(
    _s3__GetBucketLoggingStatus*        s3__GetBucketLoggingStatus,	///< Input parameter
    _s3__GetBucketLoggingStatusResponse&s3__GetBucketLoggingStatusResponse	///< Output parameter
);

/******************************************************************************\
 *                                                                            *
 * Service Operation                                                          *
 *   __s3__CopyObject                                                         *
 *                                                                            *
\******************************************************************************/


/** Operation "__s3__CopyObject" of service binding "AmazonS3SoapBinding".

  - SOAP document/literal style messaging

  - Addressing input action: ""

  - Addressing output action: "Response"

C stub function (defined in soapClient.c[pp] generated by soapcpp2):
@code
  int soap_call___s3__CopyObject(
    struct soap *soap,
    NULL, // char *endpoint = NULL selects default endpoint for this operation
    NULL, // char *action = NULL selects default action for this operation
    // input parameters:
    _s3__CopyObject*                    s3__CopyObject,
    // output parameters:
    _s3__CopyObjectResponse            &s3__CopyObjectResponse
  );
@endcode

C server function (called from the service dispatcher defined in soapServer.c[pp]):
@code
  int __s3__CopyObject(
    struct soap *soap,
    // input parameters:
    _s3__CopyObject*                    s3__CopyObject,
    // output parameters:
    _s3__CopyObjectResponse            &s3__CopyObjectResponse
  );
@endcode

C++ proxy class (defined in soapAmazonS3SoapBindingProxy.h):
@code
  class AmazonS3SoapBindingProxy;
@endcode
Important: use soapcpp2 option '-j' (or '-i') to generate improved and easy-to-use proxy classes;

C++ service class (defined in soapAmazonS3SoapBindingService.h):
@code
  class AmazonS3SoapBindingService;
@endcode
Important: use soapcpp2 option '-j' (or '-i') to generate improved and easy-to-use service classes;

*/

//gsoap s3   service method-protocol:	CopyObject SOAP
//gsoap s3   service method-style:	CopyObject document
//gsoap s3   service method-encoding:	CopyObject literal
//gsoap s3   service method-action:	CopyObject ""
//gsoap s3   service method-output-action:	CopyObject Response
int __s3__CopyObject(
    _s3__CopyObject*                    s3__CopyObject,	///< Input parameter
    _s3__CopyObjectResponse            &s3__CopyObjectResponse	///< Output parameter
);

/**

@page AmazonS3SoapBinding Binding "AmazonS3SoapBinding"

@section AmazonS3SoapBinding_policy_enablers Policy Enablers of Binding "AmazonS3SoapBinding"

None specified.

*/

/******************************************************************************\
 *                                                                            *
 * XML Data Binding                                                           *
 *                                                                            *
\******************************************************************************/


/**

@page page_XMLDataBinding XML Data Binding

SOAP/XML services use data bindings contractually bound by WSDL and auto-
generated by wsdl2h and soapcpp2 (see Service Bindings). Plain data bindings
are adopted from XML schemas as part of the WSDL types section or when running
wsdl2h on a set of schemas to produce non-SOAP-based XML data bindings.

The following readers and writers are C/C++ data type (de)serializers auto-
generated by wsdl2h and soapcpp2. Run soapcpp2 on this file to generate the
(de)serialization code, which is stored in soapC.c[pp]. Include "soapH.h" in
your code to import these data type and function declarations. Only use the
soapcpp2-generated files in your project build. Do not include the wsdl2h-
generated .h file in your code.

Data can be read and deserialized from:
  - an int file descriptor, using soap->recvfd = fd
  - a socket, using soap->socket = (int)...
  - a C++ stream (istream, stringstream), using soap->is = (istream*)...
  - a C string, using soap->is = (const char*)...
  - any input, using the soap->frecv() callback

Data can be serialized and written to:
  - an int file descriptor, using soap->sendfd = (int)...
  - a socket, using soap->socket = (int)...
  - a C++ stream (ostream, stringstream), using soap->os = (ostream*)...
  - a C string, using soap->os = (const char**)...
  - any output, using the soap->fsend() callback

The following options are available for (de)serialization control:
  - soap->encodingStyle = NULL; to remove SOAP 1.1/1.2 encodingStyle
  - soap_mode(soap, SOAP_XML_TREE); XML without id-ref (no cycles!)
  - soap_mode(soap, SOAP_XML_GRAPH); XML with id-ref (including cycles)
  - soap_set_namespaces(soap, struct Namespace *nsmap); to set xmlns bindings


@section s3 Top-level root elements of schema "http://s3.amazonaws.com/doc/2006-03-01/"

  - <s3:CreateBucket> @ref _s3__CreateBucket
    @code
    // Reader (returns SOAP_OK on success):
    soap_read__s3__CreateBucket(struct soap*, _s3__CreateBucket*);
    // Writer (returns SOAP_OK on success):
    soap_write__s3__CreateBucket(struct soap*, _s3__CreateBucket*);
    @endcode

  - <s3:CreateBucketResponse> @ref _s3__CreateBucketResponse
    @code
    // Reader (returns SOAP_OK on success):
    soap_read__s3__CreateBucketResponse(struct soap*, _s3__CreateBucketResponse*);
    // Writer (returns SOAP_OK on success):
    soap_write__s3__CreateBucketResponse(struct soap*, _s3__CreateBucketResponse*);
    @endcode

  - <s3:DeleteBucket> @ref _s3__DeleteBucket
    @code
    // Reader (returns SOAP_OK on success):
    soap_read__s3__DeleteBucket(struct soap*, _s3__DeleteBucket*);
    // Writer (returns SOAP_OK on success):
    soap_write__s3__DeleteBucket(struct soap*, _s3__DeleteBucket*);
    @endcode

  - <s3:DeleteBucketResponse> @ref _s3__DeleteBucketResponse
    @code
    // Reader (returns SOAP_OK on success):
    soap_read__s3__DeleteBucketResponse(struct soap*, _s3__DeleteBucketResponse*);
    // Writer (returns SOAP_OK on success):
    soap_write__s3__DeleteBucketResponse(struct soap*, _s3__DeleteBucketResponse*);
    @endcode

  - <s3:GetBucketLoggingStatus> @ref _s3__GetBucketLoggingStatus
    @code
    // Reader (returns SOAP_OK on success):
    soap_read__s3__GetBucketLoggingStatus(struct soap*, _s3__GetBucketLoggingStatus*);
    // Writer (returns SOAP_OK on success):
    soap_write__s3__GetBucketLoggingStatus(struct soap*, _s3__GetBucketLoggingStatus*);
    @endcode

  - <s3:GetBucketLoggingStatusResponse> @ref _s3__GetBucketLoggingStatusResponse
    @code
    // Reader (returns SOAP_OK on success):
    soap_read__s3__GetBucketLoggingStatusResponse(struct soap*, _s3__GetBucketLoggingStatusResponse*);
    // Writer (returns SOAP_OK on success):
    soap_write__s3__GetBucketLoggingStatusResponse(struct soap*, _s3__GetBucketLoggingStatusResponse*);
    @endcode

  - <s3:SetBucketLoggingStatus> @ref _s3__SetBucketLoggingStatus
    @code
    // Reader (returns SOAP_OK on success):
    soap_read__s3__SetBucketLoggingStatus(struct soap*, _s3__SetBucketLoggingStatus*);
    // Writer (returns SOAP_OK on success):
    soap_write__s3__SetBucketLoggingStatus(struct soap*, _s3__SetBucketLoggingStatus*);
    @endcode

  - <s3:SetBucketLoggingStatusResponse> @ref _s3__SetBucketLoggingStatusResponse
    @code
    // Reader (returns SOAP_OK on success):
    soap_read__s3__SetBucketLoggingStatusResponse(struct soap*, _s3__SetBucketLoggingStatusResponse*);
    // Writer (returns SOAP_OK on success):
    soap_write__s3__SetBucketLoggingStatusResponse(struct soap*, _s3__SetBucketLoggingStatusResponse*);
    @endcode

  - <s3:GetObjectAccessControlPolicy> @ref _s3__GetObjectAccessControlPolicy
    @code
    // Reader (returns SOAP_OK on success):
    soap_read__s3__GetObjectAccessControlPolicy(struct soap*, _s3__GetObjectAccessControlPolicy*);
    // Writer (returns SOAP_OK on success):
    soap_write__s3__GetObjectAccessControlPolicy(struct soap*, _s3__GetObjectAccessControlPolicy*);
    @endcode

  - <s3:GetObjectAccessControlPolicyResponse> @ref _s3__GetObjectAccessControlPolicyResponse
    @code
    // Reader (returns SOAP_OK on success):
    soap_read__s3__GetObjectAccessControlPolicyResponse(struct soap*, _s3__GetObjectAccessControlPolicyResponse*);
    // Writer (returns SOAP_OK on success):
    soap_write__s3__GetObjectAccessControlPolicyResponse(struct soap*, _s3__GetObjectAccessControlPolicyResponse*);
    @endcode

  - <s3:GetBucketAccessControlPolicy> @ref _s3__GetBucketAccessControlPolicy
    @code
    // Reader (returns SOAP_OK on success):
    soap_read__s3__GetBucketAccessControlPolicy(struct soap*, _s3__GetBucketAccessControlPolicy*);
    // Writer (returns SOAP_OK on success):
    soap_write__s3__GetBucketAccessControlPolicy(struct soap*, _s3__GetBucketAccessControlPolicy*);
    @endcode

  - <s3:GetBucketAccessControlPolicyResponse> @ref _s3__GetBucketAccessControlPolicyResponse
    @code
    // Reader (returns SOAP_OK on success):
    soap_read__s3__GetBucketAccessControlPolicyResponse(struct soap*, _s3__GetBucketAccessControlPolicyResponse*);
    // Writer (returns SOAP_OK on success):
    soap_write__s3__GetBucketAccessControlPolicyResponse(struct soap*, _s3__GetBucketAccessControlPolicyResponse*);
    @endcode

  - <s3:SetObjectAccessControlPolicy> @ref _s3__SetObjectAccessControlPolicy
    @code
    // Reader (returns SOAP_OK on success):
    soap_read__s3__SetObjectAccessControlPolicy(struct soap*, _s3__SetObjectAccessControlPolicy*);
    // Writer (returns SOAP_OK on success):
    soap_write__s3__SetObjectAccessControlPolicy(struct soap*, _s3__SetObjectAccessControlPolicy*);
    @endcode

  - <s3:SetObjectAccessControlPolicyResponse> @ref _s3__SetObjectAccessControlPolicyResponse
    @code
    // Reader (returns SOAP_OK on success):
    soap_read__s3__SetObjectAccessControlPolicyResponse(struct soap*, _s3__SetObjectAccessControlPolicyResponse*);
    // Writer (returns SOAP_OK on success):
    soap_write__s3__SetObjectAccessControlPolicyResponse(struct soap*, _s3__SetObjectAccessControlPolicyResponse*);
    @endcode

  - <s3:SetBucketAccessControlPolicy> @ref _s3__SetBucketAccessControlPolicy
    @code
    // Reader (returns SOAP_OK on success):
    soap_read__s3__SetBucketAccessControlPolicy(struct soap*, _s3__SetBucketAccessControlPolicy*);
    // Writer (returns SOAP_OK on success):
    soap_write__s3__SetBucketAccessControlPolicy(struct soap*, _s3__SetBucketAccessControlPolicy*);
    @endcode

  - <s3:SetBucketAccessControlPolicyResponse> @ref _s3__SetBucketAccessControlPolicyResponse
    @code
    // Reader (returns SOAP_OK on success):
    soap_read__s3__SetBucketAccessControlPolicyResponse(struct soap*, _s3__SetBucketAccessControlPolicyResponse*);
    // Writer (returns SOAP_OK on success):
    soap_write__s3__SetBucketAccessControlPolicyResponse(struct soap*, _s3__SetBucketAccessControlPolicyResponse*);
    @endcode

  - <s3:GetObject> @ref _s3__GetObject
    @code
    // Reader (returns SOAP_OK on success):
    soap_read__s3__GetObject(struct soap*, _s3__GetObject*);
    // Writer (returns SOAP_OK on success):
    soap_write__s3__GetObject(struct soap*, _s3__GetObject*);
    @endcode

  - <s3:GetObjectResponse> @ref _s3__GetObjectResponse
    @code
    // Reader (returns SOAP_OK on success):
    soap_read__s3__GetObjectResponse(struct soap*, _s3__GetObjectResponse*);
    // Writer (returns SOAP_OK on success):
    soap_write__s3__GetObjectResponse(struct soap*, _s3__GetObjectResponse*);
    @endcode

  - <s3:GetObjectExtended> @ref _s3__GetObjectExtended
    @code
    // Reader (returns SOAP_OK on success):
    soap_read__s3__GetObjectExtended(struct soap*, _s3__GetObjectExtended*);
    // Writer (returns SOAP_OK on success):
    soap_write__s3__GetObjectExtended(struct soap*, _s3__GetObjectExtended*);
    @endcode

  - <s3:GetObjectExtendedResponse> @ref _s3__GetObjectExtendedResponse
    @code
    // Reader (returns SOAP_OK on success):
    soap_read__s3__GetObjectExtendedResponse(struct soap*, _s3__GetObjectExtendedResponse*);
    // Writer (returns SOAP_OK on success):
    soap_write__s3__GetObjectExtendedResponse(struct soap*, _s3__GetObjectExtendedResponse*);
    @endcode

  - <s3:PutObject> @ref _s3__PutObject
    @code
    // Reader (returns SOAP_OK on success):
    soap_read__s3__PutObject(struct soap*, _s3__PutObject*);
    // Writer (returns SOAP_OK on success):
    soap_write__s3__PutObject(struct soap*, _s3__PutObject*);
    @endcode

  - <s3:PutObjectResponse> @ref _s3__PutObjectResponse
    @code
    // Reader (returns SOAP_OK on success):
    soap_read__s3__PutObjectResponse(struct soap*, _s3__PutObjectResponse*);
    // Writer (returns SOAP_OK on success):
    soap_write__s3__PutObjectResponse(struct soap*, _s3__PutObjectResponse*);
    @endcode

  - <s3:PutObjectInline> @ref _s3__PutObjectInline
    @code
    // Reader (returns SOAP_OK on success):
    soap_read__s3__PutObjectInline(struct soap*, _s3__PutObjectInline*);
    // Writer (returns SOAP_OK on success):
    soap_write__s3__PutObjectInline(struct soap*, _s3__PutObjectInline*);
    @endcode

  - <s3:PutObjectInlineResponse> @ref _s3__PutObjectInlineResponse
    @code
    // Reader (returns SOAP_OK on success):
    soap_read__s3__PutObjectInlineResponse(struct soap*, _s3__PutObjectInlineResponse*);
    // Writer (returns SOAP_OK on success):
    soap_write__s3__PutObjectInlineResponse(struct soap*, _s3__PutObjectInlineResponse*);
    @endcode

  - <s3:DeleteObject> @ref _s3__DeleteObject
    @code
    // Reader (returns SOAP_OK on success):
    soap_read__s3__DeleteObject(struct soap*, _s3__DeleteObject*);
    // Writer (returns SOAP_OK on success):
    soap_write__s3__DeleteObject(struct soap*, _s3__DeleteObject*);
    @endcode

  - <s3:DeleteObjectResponse> @ref _s3__DeleteObjectResponse
    @code
    // Reader (returns SOAP_OK on success):
    soap_read__s3__DeleteObjectResponse(struct soap*, _s3__DeleteObjectResponse*);
    // Writer (returns SOAP_OK on success):
    soap_write__s3__DeleteObjectResponse(struct soap*, _s3__DeleteObjectResponse*);
    @endcode

  - <s3:ListBucket> @ref _s3__ListBucket
    @code
    // Reader (returns SOAP_OK on success):
    soap_read__s3__ListBucket(struct soap*, _s3__ListBucket*);
    // Writer (returns SOAP_OK on success):
    soap_write__s3__ListBucket(struct soap*, _s3__ListBucket*);
    @endcode

  - <s3:ListBucketResponse> @ref _s3__ListBucketResponse
    @code
    // Reader (returns SOAP_OK on success):
    soap_read__s3__ListBucketResponse(struct soap*, _s3__ListBucketResponse*);
    // Writer (returns SOAP_OK on success):
    soap_write__s3__ListBucketResponse(struct soap*, _s3__ListBucketResponse*);
    @endcode

  - <s3:ListVersionsResponse> @ref _s3__ListVersionsResponse
    @code
    // Reader (returns SOAP_OK on success):
    soap_read__s3__ListVersionsResponse(struct soap*, _s3__ListVersionsResponse*);
    // Writer (returns SOAP_OK on success):
    soap_write__s3__ListVersionsResponse(struct soap*, _s3__ListVersionsResponse*);
    @endcode

  - <s3:ListAllMyBuckets> @ref _s3__ListAllMyBuckets
    @code
    // Reader (returns SOAP_OK on success):
    soap_read__s3__ListAllMyBuckets(struct soap*, _s3__ListAllMyBuckets*);
    // Writer (returns SOAP_OK on success):
    soap_write__s3__ListAllMyBuckets(struct soap*, _s3__ListAllMyBuckets*);
    @endcode

  - <s3:ListAllMyBucketsResponse> @ref _s3__ListAllMyBucketsResponse
    @code
    // Reader (returns SOAP_OK on success):
    soap_read__s3__ListAllMyBucketsResponse(struct soap*, _s3__ListAllMyBucketsResponse*);
    // Writer (returns SOAP_OK on success):
    soap_write__s3__ListAllMyBucketsResponse(struct soap*, _s3__ListAllMyBucketsResponse*);
    @endcode

  - <s3:PostResponse> @ref _s3__PostResponse
    @code
    // Reader (returns SOAP_OK on success):
    soap_read__s3__PostResponse(struct soap*, _s3__PostResponse*);
    // Writer (returns SOAP_OK on success):
    soap_write__s3__PostResponse(struct soap*, _s3__PostResponse*);
    @endcode

  - <s3:CopyObject> @ref _s3__CopyObject
    @code
    // Reader (returns SOAP_OK on success):
    soap_read__s3__CopyObject(struct soap*, _s3__CopyObject*);
    // Writer (returns SOAP_OK on success):
    soap_write__s3__CopyObject(struct soap*, _s3__CopyObject*);
    @endcode

  - <s3:CopyObjectResponse> @ref _s3__CopyObjectResponse
    @code
    // Reader (returns SOAP_OK on success):
    soap_read__s3__CopyObjectResponse(struct soap*, _s3__CopyObjectResponse*);
    // Writer (returns SOAP_OK on success):
    soap_write__s3__CopyObjectResponse(struct soap*, _s3__CopyObjectResponse*);
    @endcode

*/

/* End of aws-s3.h */
